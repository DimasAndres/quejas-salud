2025-06-15 15:48:18,343 - semgrep.notifications - WARNING - METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

2025-06-15 15:48:18,345 - semgrep.run_scan - DEBUG - semgrep version 1.2.0
2025-06-15 15:48:18,350 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-06-15 15:48:18,351 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-06-15 15:48:18,353 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-06-15 15:48:18,357 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-5a26bd4g.rules
2025-06-15 15:48:18,546 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIQwTeGR/semgrep/bin/semgrep-core-proprietary'.
2025-06-15 15:48:19,004 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-06-15 15:48:19,004 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-06-15 15:48:19,004 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-06-15 15:48:19,005 - semgrep.config_resolver - DEBUG - loaded 1 configs in 0.6536965370178223
2025-06-15 15:48:19,081 - semgrep.run_scan - VERBOSE - running 714 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-06-15 15:48:19,081 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-06-15 15:48:19,083 - semgrep.run_scan - VERBOSE - Rules:
2025-06-15 15:48:19,083 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-06-15 15:48:19,251 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-06-15 15:48:19,362 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-06-15 15:48:19,362 - semgrep.core_runner - DEBUG - /tmp/_MEIQwTeGR/semgrep/bin/opengrep-core -json -rules /tmp/tmpexqz4aq0.json -j 8 -targets /tmp/tmp3cwglrqm -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-06-15 15:48:30,605 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.09][[34mINFO[0m]: Executed as: /tmp/_MEIQwTeGR/semgrep/bin/opengrep-core -json -rules /tmp/tmpexqz4aq0.json -j 8 -targets /tmp/tmp3cwglrqm -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.09][[34mINFO[0m]: Version: 1.2.0
[00.09][[34mINFO[0m]: Parsing rules in /tmp/tmpexqz4aq0.json
[00.66][[34mINFO[0m]: scan: processing 47 files (skipping 0), with 446 rules (skipping 0 )
[11.15][[34mINFO[0m]: Custom ignore pattern: None
[11.15][[34mINFO[0m]: Custom ignore pattern: None
--- end semgrep-core stderr ---
2025-06-15 15:48:30,618 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('CopiaSeguridad2.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = a5da6cfc363b920bcfcd8d889991c4e4e01ad8cf2daf6672ce8f82359a893cf2caaf438b9fb398374c7b01beedc858e5611d45bb932bf882205d4aef3db11b61_0
2025-06-15 15:48:30,627 - semgrep.rule_match - DEBUG - match_key = ('\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            let tipoTexto;\n            if (tipo === \'primaria\') {\n                tipoTexto = \'Atenci√≥n Primaria\';\n            } else if (tipo === \'complementaria\') {\n                tipoTexto = \'Atenci√≥n Complementaria\';\n            } else if (tipo === \'medicamentos\') {\n                tipoTexto = \'Medicamentos\';\n            }\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de tipo de problema\n            document.getElementById(\'problema\').addEventListener(\'change\', function() {\n                const problemaOtroGroup = document.getElementById(\'problemaOtroGroup\');\n                const problemaOtroInput = document.getElementById(\'problemaOtro\');\n                \n                if (this.value === \'otro\') {\n                    problemaOtroGroup.style.display = \'block\';\n                    problemaOtroInput.required = true;\n                    this.required = false;\n                } else {\n                    problemaOtroGroup.style.display = \'none\';\n                    problemaOtroInput.required = false;\n                    problemaOtroInput.value = \'\';\n                    this.required = true;\n                }\n            });\n            \n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                data.problema = problemaOtroInput.value.trim();\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Establecer el problema correcto (personalizado si es "otro")\n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            let tipoTexto;\n            if (tipo === \'primaria\') {\n                tipoTexto = \'Atenci√≥n Primaria\';\n            } else if (tipo === \'complementaria\') {\n                tipoTexto = \'Atenci√≥n Complementaria\';\n            } else if (tipo === \'medicamentos\') {\n                tipoTexto = \'Medicamentos\';\n            }\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de tipo de problema\n            document.getElementById(\'problema\').addEventListener(\'change\', function() {\n                const problemaOtroGroup = document.getElementById(\'problemaOtroGroup\');\n                const problemaOtroInput = document.getElementById(\'problemaOtro\');\n                \n                if (this.value === \'otro\') {\n                    problemaOtroGroup.style.display = \'block\';\n                    problemaOtroInput.required = true;\n                    this.required = false;\n                } else {\n                    problemaOtroGroup.style.display = \'none\';\n                    problemaOtroInput.required = false;\n                    problemaOtroInput.value = \'\';\n                    this.required = true;\n                }\n            });\n            \n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                data.problema = problemaOtroInput.value.trim();\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Establecer el problema correcto (personalizado si es "otro")\n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('CopiaSeguridad2.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 365a9f153ee4a7d92559de54899182281a088f64f2b53f510b745b8ec1e7704af1d9ab72047f5a7550f2dec0c939fe92e5f6a7e4742e13ead047a1487b8e144d_0
2025-06-15 15:48:30,636 - semgrep.rule_match - DEBUG - match_key = ('\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            let tipoTexto;\n            if (tipo === \'primaria\') {\n                tipoTexto = \'Atenci√≥n Primaria\';\n            } else if (tipo === \'complementaria\') {\n                tipoTexto = \'Atenci√≥n Complementaria\';\n            } else if (tipo === \'medicamentos\') {\n                tipoTexto = \'Medicamentos\';\n            }\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de tipo de problema\n            document.getElementById(\'problema\').addEventListener(\'change\', function() {\n                const problemaOtroGroup = document.getElementById(\'problemaOtroGroup\');\n                const problemaOtroInput = document.getElementById(\'problemaOtro\');\n                \n                if (this.value === \'otro\') {\n                    problemaOtroGroup.style.display = \'block\';\n                    problemaOtroInput.required = true;\n                    this.required = false;\n                } else {\n                    problemaOtroGroup.style.display = \'none\';\n                    problemaOtroInput.required = false;\n                    problemaOtroInput.value = \'\';\n                    this.required = true;\n                }\n            });\n            \n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                data.problema = problemaOtroInput.value.trim();\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Establecer el problema correcto (personalizado si es "otro")\n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            let tipoTexto;\n            if (tipo === \'primaria\') {\n                tipoTexto = \'Atenci√≥n Primaria\';\n            } else if (tipo === \'complementaria\') {\n                tipoTexto = \'Atenci√≥n Complementaria\';\n            } else if (tipo === \'medicamentos\') {\n                tipoTexto = \'Medicamentos\';\n            }\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de tipo de problema\n            document.getElementById(\'problema\').addEventListener(\'change\', function() {\n                const problemaOtroGroup = document.getElementById(\'problemaOtroGroup\');\n                const problemaOtroInput = document.getElementById(\'problemaOtro\');\n                \n                if (this.value === \'otro\') {\n                    problemaOtroGroup.style.display = \'block\';\n                    problemaOtroInput.required = true;\n                    this.required = false;\n                } else {\n                    problemaOtroGroup.style.display = \'none\';\n                    problemaOtroInput.required = false;\n                    problemaOtroInput.value = \'\';\n                    this.required = true;\n                }\n            });\n            \n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                data.problema = problemaOtroInput.value.trim();\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Establecer el problema correcto (personalizado si es "otro")\n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('CopiaSeguridad2.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 365a9f153ee4a7d92559de54899182281a088f64f2b53f510b745b8ec1e7704af1d9ab72047f5a7550f2dec0c939fe92e5f6a7e4742e13ead047a1487b8e144d_0
2025-06-15 15:48:30,646 - semgrep.rule_match - DEBUG - match_key = ('\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            let tipoTexto;\n            if (tipo === \'primaria\') {\n                tipoTexto = \'Atenci√≥n Primaria\';\n            } else if (tipo === \'complementaria\') {\n                tipoTexto = \'Atenci√≥n Complementaria\';\n            } else if (tipo === \'medicamentos\') {\n                tipoTexto = \'Medicamentos\';\n            }\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de tipo de problema\n            document.getElementById(\'problema\').addEventListener(\'change\', function() {\n                const problemaOtroGroup = document.getElementById(\'problemaOtroGroup\');\n                const problemaOtroInput = document.getElementById(\'problemaOtro\');\n                \n                if (this.value === \'otro\') {\n                    problemaOtroGroup.style.display = \'block\';\n                    problemaOtroInput.required = true;\n                    this.required = false;\n                } else {\n                    problemaOtroGroup.style.display = \'none\';\n                    problemaOtroInput.required = false;\n                    problemaOtroInput.value = \'\';\n                    this.required = true;\n                }\n            });\n            \n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                data.problema = problemaOtroInput.value.trim();\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Establecer el problema correcto (personalizado si es "otro")\n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            let tipoTexto;\n            if (tipo === \'primaria\') {\n                tipoTexto = \'Atenci√≥n Primaria\';\n            } else if (tipo === \'complementaria\') {\n                tipoTexto = \'Atenci√≥n Complementaria\';\n            } else if (tipo === \'medicamentos\') {\n                tipoTexto = \'Medicamentos\';\n            }\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de tipo de problema\n            document.getElementById(\'problema\').addEventListener(\'change\', function() {\n                const problemaOtroGroup = document.getElementById(\'problemaOtroGroup\');\n                const problemaOtroInput = document.getElementById(\'problemaOtro\');\n                \n                if (this.value === \'otro\') {\n                    problemaOtroGroup.style.display = \'block\';\n                    problemaOtroInput.required = true;\n                    this.required = false;\n                } else {\n                    problemaOtroGroup.style.display = \'none\';\n                    problemaOtroInput.required = false;\n                    problemaOtroInput.value = \'\';\n                    this.required = true;\n                }\n            });\n            \n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                data.problema = problemaOtroInput.value.trim();\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Establecer el problema correcto (personalizado si es "otro")\n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n            const problemaSelect = document.querySelector(\'select[name="problema"]\');\n            const problemaOtroInput = document.querySelector(\'input[name="problemaOtro"]\');\n            \n            if (problemaSelect.value === \'otro\' && problemaOtroInput.value.trim()) {\n                submitFormData.set(\'problema\', problemaOtroInput.value.trim());\n            }\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('CopiaSeguridad2.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 365a9f153ee4a7d92559de54899182281a088f64f2b53f510b745b8ec1e7704af1d9ab72047f5a7550f2dec0c939fe92e5f6a7e4742e13ead047a1487b8e144d_0
2025-06-15 15:48:30,650 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('CopiaSeguridad3.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d578b5c448758a8750fcc4a486d51139594974de617f75c1830e34bc453d7aeadcc362e851e214e706579cbec962f1c59bf482eecc9649f509ba84b3475e5bf3_0
2025-06-15 15:48:30,654 - semgrep.rule_match - DEBUG - match_key = ('\n        // Datos de departamentos y ciudades\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo", "Rionegro", "Sabaneta"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul", "Arauquita", "Puerto Rond√≥n", "Cravo Norte"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande", "Puerto Colombia", "Galapa", "Baranoa"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona", "El Carmen de Bol√≠var", "San Pablo", "Santa Rosa"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°", "Barbosa", "Moniquir√°", "Villa de Leyva"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada", "Riosucio", "Anserma", "Palestina"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico", "El Doncello", "La Monta√±ita", "Morelia"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena", "Monterrey", "Paz de Ariporo", "Man√≠"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada", "Pat√≠a", "Corinto", "Guapi", "Timb√≠o"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia", "El Copey", "La Jagua de Ibirico", "San Diego"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥", "Acand√≠", "Riosucio", "Bah√≠a Solano"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica", "Ci√©naga de Oro", "Planeta Rica", "Montel√≠bano"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°", "Ch√≠a", "Mosquera", "Fusagasug√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas", "Mapiripana", "San Felipe", "Puerto Colombia", "La Guadalupe"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar", "El Retorno", "Miraflores"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata", "Campoalegre", "San Agust√≠n", "Isnos"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure", "San Juan del Cesar", "Villanueva", "El Molino"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n", "Zona Bananera", "El Banco", "Plato", "Aracataca"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n", "Puerto L√≥pez", "Cumaral", "Restrepo"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres", "Samaniego", "La Cruz", "Barbacoas"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario", "Los Patios", "Pamplona", "Tib√∫", "El Zulia"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito", "Valle del Guamuez", "Puerto Caicedo", "Villagarz√≥n"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida", "Montenegro", "Quimbaya", "Circasia", "Filandia"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal", "La Virginia", "Bel√©n de Umbr√≠a", "Marsella"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n", "Piedecuesta", "Barrancabermeja", "Socorro", "M√°laga"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s", "San Marcos", "Tol√∫", "Majagual", "Galeras"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda", "L√≠bano", "Chaparral", "Mariquita"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura", "Tul√∫a", "Cartago", "Buga", "Jamund√≠"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫", "Pacoa", "Taraira", "Papunaua", "Yavarat√©"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera", "Santa Rosal√≠a", "Cumaribo"]\n        };\n\n        // Tipos de problemas por categor√≠a\n        const TIPOS_PROBLEMAS = {\n            primaria: [\n                "Negaci√≥n de cita m√©dica general",\n                "Demora en asignaci√≥n de citas",\n                "Negaci√≥n de atenci√≥n de urgencias",\n                "Mala calidad en la atenci√≥n m√©dica",\n                "Problemas con medicina preventiva",\n                "Negaci√≥n de procedimientos b√°sicos",\n                "Otro"\n            ],\n            complementaria: [\n                "Negaci√≥n de cita con especialistas",\n                "Demora en autorizaci√≥n de cirug√≠as",\n                "Negaci√≥n de ex√°menes diagn√≥sticos",\n                "Problemas con hospitalizaci√≥n",\n                "Negaci√≥n de terapias especializadas",\n                "Demora en resultados de laboratorio",\n                "Otro"\n            ],\n            medicamentos: [\n                "Negaci√≥n de medicamentos autorizados",\n                "Falta de medicamentos en farmacia",\n                "Demora en entrega de medicamentos",\n                "Suministro de medicamentos vencidos",\n                "Negaci√≥n de medicamentos especializados",\n                "Calidad deficiente de medicamentos",\n                "Problemas con medicamentos especializados",\n                "Otro"\n            ]\n        };\n\n        let currentCategory = \'\';\n        let currentUser = null;\n\n        // Inicializar la aplicaci√≥n\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            checkUserSession();\n        });\n\n        function initializeDepartments() {\n            const departamentoSelect = document.getElementById(\'departamento\');\n            Object.keys(DEPARTAMENTOS).forEach(dept => {\n                const option = document.createElement(\'option\');\n                option.value = dept;\n                option.textContent = dept;\n                departamentoSelect.appendChild(option);\n            });\n        }\n\n        function updateCities() {\n            const departamento = document.getElementById(\'departamento\').value;\n            const ciudadSelect = document.getElementById(\'ciudad\');\n            \n            ciudadSelect.innerHTML = \'<option value="">Seleccione ciudad/municipio</option>\';\n            \n            if (departamento && DEPARTAMENTOS[departamento]) {\n                DEPARTAMENTOS[departamento].forEach(ciudad => {\n                    const option = document.createElement(\'option\');\n                    option.value = ciudad;\n                    option.textContent = ciudad;\n                    ciudadSelect.appendChild(option);\n                });\n            }\n        }\n\n        function selectCategory(category) {\n            currentCategory = category;\n            \n            // Actualizar tipos de problemas\n            const problemaSelect = document.getElementById(\'problema\');\n            problemaSelect.innerHTML = \'<option value="">Seleccione el tipo de problema</option>\';\n            \n            TIPOS_PROBLEMAS[category].forEach(problema => {\n                const option = document.createElement(\'option\');\n                option.value = problema;\n                option.textContent = problema;\n                problemaSelect.appendChild(option);\n            });\n            \n            // Establecer clasificaci√≥n\n            document.querySelector(\'input[name="clasificacion"]\').value = category;\n            \n            // Mostrar formulario\n            document.getElementById(\'authSection\').classList.add(\'hidden\');\n            document.getElementById(\'formSection\').classList.remove(\'hidden\');\n            \n            showMessage(`Formulario para: ${category === \'primaria\' ? \'Atenci√≥n Primaria\' : category === \'complementaria\' ? \'Atenci√≥n Complementaria\' : \'Medicamentos\'}`, \'success\');\n        }\n\n        function toggleOtroInput() {\n            const problemaSelect = document.getElementById(\'problema\');\n            const otroGroup = document.getElementById(\'otroProblemaGroup\');\n            const otroInput = document.getElementById(\'otroProblema\');\n            \n            if (problemaSelect.value === \'Otro\') {\n                otroGroup.classList.remove(\'hidden\');\n                otroInput.required = true;\n            } else {\n                otroGroup.classList.add(\'hidden\');\n                otroInput.required = false;\n                otroInput.value = \'\';\n            }\n        }\n\n        function validateFiles() {\n            const fileInput = document.getElementById(\'soporte\');\n            const files = fileInput.files;\n            \n            if (files.length > 5) {\n                showMessage(\'M√°ximo 5 archivos permitidos\', \'error\');\n                fileInput.value = \'\';\n                return;\n            }\n            \n            for (let file of files) {\n                if (file.size > 5 * 1024 * 1024) {\n                    showMessage(`El archivo ${file.name} excede el tama√±o m√°ximo de 5MB`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n                \n                const allowedTypes = [\'application/pdf\', \'image/jpeg\', \'image/jpg\', \'image/png\'];\n                if (!allowedTypes.includes(file.type)) {\n                    showMessage(`El archivo ${file.name} no es un tipo permitido (PDF, JPG, PNG)`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n            }\n        }\n\n        function checkUserSession() {\n            // Simular verificaci√≥n de sesi√≥n\n            // En una implementaci√≥n real, esto verificar√≠a una sesi√≥n o token\n        }\n\n        function resetForm() {\n            document.getElementById(\'quejaForm\').reset();\n            document.getElementById(\'authSection\').classList.remove(\'hidden\');\n            document.getElementById(\'formSection\').classList.add(\'hidden\');\n            document.getElementById(\'otroProblemaGroup\').classList.add(\'hidden\');\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            // Auto-hide success messages\n            if (type === \'success\') {\n                setTimeout(() => {\n                    messageArea.innerHTML = \'\';\n                }, 5000);\n            }\n        }\n\n        function showLoading(show) {\n            const button = document.querySelector(\'#quejaForm button[type="submit"]\');\n            if (show) {\n                button.disabled = true;\n                button.innerHTML = \'<span class="loading">Enviando queja...</span>\';\n            } else {\n                button.disabled = false;\n                button.innerHTML = \'Enviar Queja\';\n            }\n        }\n\n        // Manejar env√≠o del formulario\n        document.getElementById(\'quejaForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            showLoading(true);\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n            \n            try {\n                const formData = new FormData(this);\n                \n                // Si seleccion√≥ "Otro", usar el texto personalizado\n                if (formData.get(\'problema\') === \'Otro\' && formData.get(\'otroProblema\')) {\n                    formData.set(\'problema\', formData.get(\'otroProblema\'));\n                }\n                \n                const response = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: formData\n                });\n                \n                const result = await response.json();\n                \n                if (response.ok && result.success) {\n                    showMessage(`‚úÖ ${result.mensaje}`, \'success\');\n                    \n                    // Limpiar formulario despu√©s de env√≠o exitoso\n                    setTimeout(() => {\n                        resetForm();\n                    }, 3000);\n                } else {\n                    if (result.sugerencia) {\n                        showMessage(`‚ùå ${result.error}\\n\\nSugerencia: ${result.sugerencia}`, \'warning\');\n                    } else {\n                        showMessage(`‚ùå ${result.error || \'Error al enviar la queja\'}`, \'error\');\n                    }\n                }\n            } catch (error) {\n                console.error(\'Error:\', error);\n                showMessage(\'‚ùå Error de conexi√≥n. Por favor, intente nuevamente.\', \'error\');\n            } finally {\n                showLoading(false);\n            }\n        });\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Datos de departamentos y ciudades\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo", "Rionegro", "Sabaneta"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul", "Arauquita", "Puerto Rond√≥n", "Cravo Norte"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande", "Puerto Colombia", "Galapa", "Baranoa"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona", "El Carmen de Bol√≠var", "San Pablo", "Santa Rosa"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°", "Barbosa", "Moniquir√°", "Villa de Leyva"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada", "Riosucio", "Anserma", "Palestina"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico", "El Doncello", "La Monta√±ita", "Morelia"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena", "Monterrey", "Paz de Ariporo", "Man√≠"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada", "Pat√≠a", "Corinto", "Guapi", "Timb√≠o"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia", "El Copey", "La Jagua de Ibirico", "San Diego"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥", "Acand√≠", "Riosucio", "Bah√≠a Solano"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica", "Ci√©naga de Oro", "Planeta Rica", "Montel√≠bano"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°", "Ch√≠a", "Mosquera", "Fusagasug√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas", "Mapiripana", "San Felipe", "Puerto Colombia", "La Guadalupe"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar", "El Retorno", "Miraflores"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata", "Campoalegre", "San Agust√≠n", "Isnos"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure", "San Juan del Cesar", "Villanueva", "El Molino"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n", "Zona Bananera", "El Banco", "Plato", "Aracataca"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n", "Puerto L√≥pez", "Cumaral", "Restrepo"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres", "Samaniego", "La Cruz", "Barbacoas"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario", "Los Patios", "Pamplona", "Tib√∫", "El Zulia"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito", "Valle del Guamuez", "Puerto Caicedo", "Villagarz√≥n"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida", "Montenegro", "Quimbaya", "Circasia", "Filandia"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal", "La Virginia", "Bel√©n de Umbr√≠a", "Marsella"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n", "Piedecuesta", "Barrancabermeja", "Socorro", "M√°laga"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s", "San Marcos", "Tol√∫", "Majagual", "Galeras"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda", "L√≠bano", "Chaparral", "Mariquita"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura", "Tul√∫a", "Cartago", "Buga", "Jamund√≠"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫", "Pacoa", "Taraira", "Papunaua", "Yavarat√©"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera", "Santa Rosal√≠a", "Cumaribo"]\n        };\n\n        // Tipos de problemas por categor√≠a\n        const TIPOS_PROBLEMAS = {\n            primaria: [\n                "Negaci√≥n de cita m√©dica general",\n                "Demora en asignaci√≥n de citas",\n                "Negaci√≥n de atenci√≥n de urgencias",\n                "Mala calidad en la atenci√≥n m√©dica",\n                "Problemas con medicina preventiva",\n                "Negaci√≥n de procedimientos b√°sicos",\n                "Otro"\n            ],\n            complementaria: [\n                "Negaci√≥n de cita con especialistas",\n                "Demora en autorizaci√≥n de cirug√≠as",\n                "Negaci√≥n de ex√°menes diagn√≥sticos",\n                "Problemas con hospitalizaci√≥n",\n                "Negaci√≥n de terapias especializadas",\n                "Demora en resultados de laboratorio",\n                "Otro"\n            ],\n            medicamentos: [\n                "Negaci√≥n de medicamentos autorizados",\n                "Falta de medicamentos en farmacia",\n                "Demora en entrega de medicamentos",\n                "Suministro de medicamentos vencidos",\n                "Negaci√≥n de medicamentos especializados",\n                "Calidad deficiente de medicamentos",\n                "Problemas con medicamentos especializados",\n                "Otro"\n            ]\n        };\n\n        let currentCategory = \'\';\n        let currentUser = null;\n\n        // Inicializar la aplicaci√≥n\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            checkUserSession();\n        });\n\n        function initializeDepartments() {\n            const departamentoSelect = document.getElementById(\'departamento\');\n            Object.keys(DEPARTAMENTOS).forEach(dept => {\n                const option = document.createElement(\'option\');\n                option.value = dept;\n                option.textContent = dept;\n                departamentoSelect.appendChild(option);\n            });\n        }\n\n        function updateCities() {\n            const departamento = document.getElementById(\'departamento\').value;\n            const ciudadSelect = document.getElementById(\'ciudad\');\n            \n            ciudadSelect.innerHTML = \'<option value="">Seleccione ciudad/municipio</option>\';\n            \n            if (departamento && DEPARTAMENTOS[departamento]) {\n                DEPARTAMENTOS[departamento].forEach(ciudad => {\n                    const option = document.createElement(\'option\');\n                    option.value = ciudad;\n                    option.textContent = ciudad;\n                    ciudadSelect.appendChild(option);\n                });\n            }\n        }\n\n        function selectCategory(category) {\n            currentCategory = category;\n            \n            // Actualizar tipos de problemas\n            const problemaSelect = document.getElementById(\'problema\');\n            problemaSelect.innerHTML = \'<option value="">Seleccione el tipo de problema</option>\';\n            \n            TIPOS_PROBLEMAS[category].forEach(problema => {\n                const option = document.createElement(\'option\');\n                option.value = problema;\n                option.textContent = problema;\n                problemaSelect.appendChild(option);\n            });\n            \n            // Establecer clasificaci√≥n\n            document.querySelector(\'input[name="clasificacion"]\').value = category;\n            \n            // Mostrar formulario\n            document.getElementById(\'authSection\').classList.add(\'hidden\');\n            document.getElementById(\'formSection\').classList.remove(\'hidden\');\n            \n            showMessage(`Formulario para: ${category === \'primaria\' ? \'Atenci√≥n Primaria\' : category === \'complementaria\' ? \'Atenci√≥n Complementaria\' : \'Medicamentos\'}`, \'success\');\n        }\n\n        function toggleOtroInput() {\n            const problemaSelect = document.getElementById(\'problema\');\n            const otroGroup = document.getElementById(\'otroProblemaGroup\');\n            const otroInput = document.getElementById(\'otroProblema\');\n            \n            if (problemaSelect.value === \'Otro\') {\n                otroGroup.classList.remove(\'hidden\');\n                otroInput.required = true;\n            } else {\n                otroGroup.classList.add(\'hidden\');\n                otroInput.required = false;\n                otroInput.value = \'\';\n            }\n        }\n\n        function validateFiles() {\n            const fileInput = document.getElementById(\'soporte\');\n            const files = fileInput.files;\n            \n            if (files.length > 5) {\n                showMessage(\'M√°ximo 5 archivos permitidos\', \'error\');\n                fileInput.value = \'\';\n                return;\n            }\n            \n            for (let file of files) {\n                if (file.size > 5 * 1024 * 1024) {\n                    showMessage(`El archivo ${file.name} excede el tama√±o m√°ximo de 5MB`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n                \n                const allowedTypes = [\'application/pdf\', \'image/jpeg\', \'image/jpg\', \'image/png\'];\n                if (!allowedTypes.includes(file.type)) {\n                    showMessage(`El archivo ${file.name} no es un tipo permitido (PDF, JPG, PNG)`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n            }\n        }\n\n        function checkUserSession() {\n            // Simular verificaci√≥n de sesi√≥n\n            // En una implementaci√≥n real, esto verificar√≠a una sesi√≥n o token\n        }\n\n        function resetForm() {\n            document.getElementById(\'quejaForm\').reset();\n            document.getElementById(\'authSection\').classList.remove(\'hidden\');\n            document.getElementById(\'formSection\').classList.add(\'hidden\');\n            document.getElementById(\'otroProblemaGroup\').classList.add(\'hidden\');\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            // Auto-hide success messages\n            if (type === \'success\') {\n                setTimeout(() => {\n                    messageArea.innerHTML = \'\';\n                }, 5000);\n            }\n        }\n\n        function showLoading(show) {\n            const button = document.querySelector(\'#quejaForm button[type="submit"]\');\n            if (show) {\n                button.disabled = true;\n                button.innerHTML = \'<span class="loading">Enviando queja...</span>\';\n            } else {\n                button.disabled = false;\n                button.innerHTML = \'Enviar Queja\';\n            }\n        }\n\n        // Manejar env√≠o del formulario\n        document.getElementById(\'quejaForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            showLoading(true);\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n            \n            try {\n                const formData = new FormData(this);\n                \n                // Si seleccion√≥ "Otro", usar el texto personalizado\n                if (formData.get(\'problema\') === \'Otro\' && formData.get(\'otroProblema\')) {\n                    formData.set(\'problema\', formData.get(\'otroProblema\'));\n                }\n                \n                const response = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: formData\n                });\n                \n                const result = await response.json();\n                \n                if (response.ok && result.success) {\n                    showMessage(`‚úÖ ${result.mensaje}`, \'success\');\n                    \n                    // Limpiar formulario despu√©s de env√≠o exitoso\n                    setTimeout(() => {\n                        resetForm();\n                    }, 3000);\n                } else {\n                    if (result.sugerencia) {\n                        showMessage(`‚ùå ${result.error}\\n\\nSugerencia: ${result.sugerencia}`, \'warning\');\n                    } else {\n                        showMessage(`‚ùå ${result.error || \'Error al enviar la queja\'}`, \'error\');\n                    }\n                }\n            } catch (error) {\n                console.error(\'Error:\', error);\n                showMessage(\'‚ùå Error de conexi√≥n. Por favor, intente nuevamente.\', \'error\');\n            } finally {\n                showLoading(false);\n            }\n        });\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('CopiaSeguridad3.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = c05a81be0528109b46a169b674aef57be14af795c1a38521bb012a5b7f2f32d78ff859d762f0ccdf23def7c0e52cadfc6be0e3647e81724c5698548a2054cfe5_0
2025-06-15 15:48:30,658 - semgrep.rule_match - DEBUG - match_key = ('\n        // Datos de departamentos y ciudades\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo", "Rionegro", "Sabaneta"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul", "Arauquita", "Puerto Rond√≥n", "Cravo Norte"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande", "Puerto Colombia", "Galapa", "Baranoa"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona", "El Carmen de Bol√≠var", "San Pablo", "Santa Rosa"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°", "Barbosa", "Moniquir√°", "Villa de Leyva"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada", "Riosucio", "Anserma", "Palestina"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico", "El Doncello", "La Monta√±ita", "Morelia"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena", "Monterrey", "Paz de Ariporo", "Man√≠"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada", "Pat√≠a", "Corinto", "Guapi", "Timb√≠o"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia", "El Copey", "La Jagua de Ibirico", "San Diego"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥", "Acand√≠", "Riosucio", "Bah√≠a Solano"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica", "Ci√©naga de Oro", "Planeta Rica", "Montel√≠bano"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°", "Ch√≠a", "Mosquera", "Fusagasug√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas", "Mapiripana", "San Felipe", "Puerto Colombia", "La Guadalupe"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar", "El Retorno", "Miraflores"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata", "Campoalegre", "San Agust√≠n", "Isnos"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure", "San Juan del Cesar", "Villanueva", "El Molino"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n", "Zona Bananera", "El Banco", "Plato", "Aracataca"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n", "Puerto L√≥pez", "Cumaral", "Restrepo"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres", "Samaniego", "La Cruz", "Barbacoas"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario", "Los Patios", "Pamplona", "Tib√∫", "El Zulia"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito", "Valle del Guamuez", "Puerto Caicedo", "Villagarz√≥n"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida", "Montenegro", "Quimbaya", "Circasia", "Filandia"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal", "La Virginia", "Bel√©n de Umbr√≠a", "Marsella"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n", "Piedecuesta", "Barrancabermeja", "Socorro", "M√°laga"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s", "San Marcos", "Tol√∫", "Majagual", "Galeras"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda", "L√≠bano", "Chaparral", "Mariquita"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura", "Tul√∫a", "Cartago", "Buga", "Jamund√≠"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫", "Pacoa", "Taraira", "Papunaua", "Yavarat√©"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera", "Santa Rosal√≠a", "Cumaribo"]\n        };\n\n        // Tipos de problemas por categor√≠a\n        const TIPOS_PROBLEMAS = {\n            primaria: [\n                "Negaci√≥n de cita m√©dica general",\n                "Demora en asignaci√≥n de citas",\n                "Negaci√≥n de atenci√≥n de urgencias",\n                "Mala calidad en la atenci√≥n m√©dica",\n                "Problemas con medicina preventiva",\n                "Negaci√≥n de procedimientos b√°sicos",\n                "Otro"\n            ],\n            complementaria: [\n                "Negaci√≥n de cita con especialistas",\n                "Demora en autorizaci√≥n de cirug√≠as",\n                "Negaci√≥n de ex√°menes diagn√≥sticos",\n                "Problemas con hospitalizaci√≥n",\n                "Negaci√≥n de terapias especializadas",\n                "Demora en resultados de laboratorio",\n                "Otro"\n            ],\n            medicamentos: [\n                "Negaci√≥n de medicamentos autorizados",\n                "Falta de medicamentos en farmacia",\n                "Demora en entrega de medicamentos",\n                "Suministro de medicamentos vencidos",\n                "Negaci√≥n de medicamentos especializados",\n                "Calidad deficiente de medicamentos",\n                "Problemas con medicamentos especializados",\n                "Otro"\n            ]\n        };\n\n        let currentCategory = \'\';\n        let currentUser = null;\n\n        // Inicializar la aplicaci√≥n\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            checkUserSession();\n        });\n\n        function initializeDepartments() {\n            const departamentoSelect = document.getElementById(\'departamento\');\n            Object.keys(DEPARTAMENTOS).forEach(dept => {\n                const option = document.createElement(\'option\');\n                option.value = dept;\n                option.textContent = dept;\n                departamentoSelect.appendChild(option);\n            });\n        }\n\n        function updateCities() {\n            const departamento = document.getElementById(\'departamento\').value;\n            const ciudadSelect = document.getElementById(\'ciudad\');\n            \n            ciudadSelect.innerHTML = \'<option value="">Seleccione ciudad/municipio</option>\';\n            \n            if (departamento && DEPARTAMENTOS[departamento]) {\n                DEPARTAMENTOS[departamento].forEach(ciudad => {\n                    const option = document.createElement(\'option\');\n                    option.value = ciudad;\n                    option.textContent = ciudad;\n                    ciudadSelect.appendChild(option);\n                });\n            }\n        }\n\n        function selectCategory(category) {\n            currentCategory = category;\n            \n            // Actualizar tipos de problemas\n            const problemaSelect = document.getElementById(\'problema\');\n            problemaSelect.innerHTML = \'<option value="">Seleccione el tipo de problema</option>\';\n            \n            TIPOS_PROBLEMAS[category].forEach(problema => {\n                const option = document.createElement(\'option\');\n                option.value = problema;\n                option.textContent = problema;\n                problemaSelect.appendChild(option);\n            });\n            \n            // Establecer clasificaci√≥n\n            document.querySelector(\'input[name="clasificacion"]\').value = category;\n            \n            // Mostrar formulario\n            document.getElementById(\'authSection\').classList.add(\'hidden\');\n            document.getElementById(\'formSection\').classList.remove(\'hidden\');\n            \n            showMessage(`Formulario para: ${category === \'primaria\' ? \'Atenci√≥n Primaria\' : category === \'complementaria\' ? \'Atenci√≥n Complementaria\' : \'Medicamentos\'}`, \'success\');\n        }\n\n        function toggleOtroInput() {\n            const problemaSelect = document.getElementById(\'problema\');\n            const otroGroup = document.getElementById(\'otroProblemaGroup\');\n            const otroInput = document.getElementById(\'otroProblema\');\n            \n            if (problemaSelect.value === \'Otro\') {\n                otroGroup.classList.remove(\'hidden\');\n                otroInput.required = true;\n            } else {\n                otroGroup.classList.add(\'hidden\');\n                otroInput.required = false;\n                otroInput.value = \'\';\n            }\n        }\n\n        function validateFiles() {\n            const fileInput = document.getElementById(\'soporte\');\n            const files = fileInput.files;\n            \n            if (files.length > 5) {\n                showMessage(\'M√°ximo 5 archivos permitidos\', \'error\');\n                fileInput.value = \'\';\n                return;\n            }\n            \n            for (let file of files) {\n                if (file.size > 5 * 1024 * 1024) {\n                    showMessage(`El archivo ${file.name} excede el tama√±o m√°ximo de 5MB`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n                \n                const allowedTypes = [\'application/pdf\', \'image/jpeg\', \'image/jpg\', \'image/png\'];\n                if (!allowedTypes.includes(file.type)) {\n                    showMessage(`El archivo ${file.name} no es un tipo permitido (PDF, JPG, PNG)`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n            }\n        }\n\n        function checkUserSession() {\n            // Simular verificaci√≥n de sesi√≥n\n            // En una implementaci√≥n real, esto verificar√≠a una sesi√≥n o token\n        }\n\n        function resetForm() {\n            document.getElementById(\'quejaForm\').reset();\n            document.getElementById(\'authSection\').classList.remove(\'hidden\');\n            document.getElementById(\'formSection\').classList.add(\'hidden\');\n            document.getElementById(\'otroProblemaGroup\').classList.add(\'hidden\');\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            // Auto-hide success messages\n            if (type === \'success\') {\n                setTimeout(() => {\n                    messageArea.innerHTML = \'\';\n                }, 5000);\n            }\n        }\n\n        function showLoading(show) {\n            const button = document.querySelector(\'#quejaForm button[type="submit"]\');\n            if (show) {\n                button.disabled = true;\n                button.innerHTML = \'<span class="loading">Enviando queja...</span>\';\n            } else {\n                button.disabled = false;\n                button.innerHTML = \'Enviar Queja\';\n            }\n        }\n\n        // Manejar env√≠o del formulario\n        document.getElementById(\'quejaForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            showLoading(true);\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n            \n            try {\n                const formData = new FormData(this);\n                \n                // Si seleccion√≥ "Otro", usar el texto personalizado\n                if (formData.get(\'problema\') === \'Otro\' && formData.get(\'otroProblema\')) {\n                    formData.set(\'problema\', formData.get(\'otroProblema\'));\n                }\n                \n                const response = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: formData\n                });\n                \n                const result = await response.json();\n                \n                if (response.ok && result.success) {\n                    showMessage(`‚úÖ ${result.mensaje}`, \'success\');\n                    \n                    // Limpiar formulario despu√©s de env√≠o exitoso\n                    setTimeout(() => {\n                        resetForm();\n                    }, 3000);\n                } else {\n                    if (result.sugerencia) {\n                        showMessage(`‚ùå ${result.error}\\n\\nSugerencia: ${result.sugerencia}`, \'warning\');\n                    } else {\n                        showMessage(`‚ùå ${result.error || \'Error al enviar la queja\'}`, \'error\');\n                    }\n                }\n            } catch (error) {\n                console.error(\'Error:\', error);\n                showMessage(\'‚ùå Error de conexi√≥n. Por favor, intente nuevamente.\', \'error\');\n            } finally {\n                showLoading(false);\n            }\n        });\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Datos de departamentos y ciudades\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo", "Rionegro", "Sabaneta"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul", "Arauquita", "Puerto Rond√≥n", "Cravo Norte"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande", "Puerto Colombia", "Galapa", "Baranoa"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona", "El Carmen de Bol√≠var", "San Pablo", "Santa Rosa"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°", "Barbosa", "Moniquir√°", "Villa de Leyva"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada", "Riosucio", "Anserma", "Palestina"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico", "El Doncello", "La Monta√±ita", "Morelia"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena", "Monterrey", "Paz de Ariporo", "Man√≠"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada", "Pat√≠a", "Corinto", "Guapi", "Timb√≠o"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia", "El Copey", "La Jagua de Ibirico", "San Diego"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥", "Acand√≠", "Riosucio", "Bah√≠a Solano"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica", "Ci√©naga de Oro", "Planeta Rica", "Montel√≠bano"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°", "Ch√≠a", "Mosquera", "Fusagasug√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas", "Mapiripana", "San Felipe", "Puerto Colombia", "La Guadalupe"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar", "El Retorno", "Miraflores"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata", "Campoalegre", "San Agust√≠n", "Isnos"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure", "San Juan del Cesar", "Villanueva", "El Molino"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n", "Zona Bananera", "El Banco", "Plato", "Aracataca"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n", "Puerto L√≥pez", "Cumaral", "Restrepo"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres", "Samaniego", "La Cruz", "Barbacoas"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario", "Los Patios", "Pamplona", "Tib√∫", "El Zulia"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito", "Valle del Guamuez", "Puerto Caicedo", "Villagarz√≥n"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida", "Montenegro", "Quimbaya", "Circasia", "Filandia"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal", "La Virginia", "Bel√©n de Umbr√≠a", "Marsella"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n", "Piedecuesta", "Barrancabermeja", "Socorro", "M√°laga"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s", "San Marcos", "Tol√∫", "Majagual", "Galeras"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda", "L√≠bano", "Chaparral", "Mariquita"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura", "Tul√∫a", "Cartago", "Buga", "Jamund√≠"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫", "Pacoa", "Taraira", "Papunaua", "Yavarat√©"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera", "Santa Rosal√≠a", "Cumaribo"]\n        };\n\n        // Tipos de problemas por categor√≠a\n        const TIPOS_PROBLEMAS = {\n            primaria: [\n                "Negaci√≥n de cita m√©dica general",\n                "Demora en asignaci√≥n de citas",\n                "Negaci√≥n de atenci√≥n de urgencias",\n                "Mala calidad en la atenci√≥n m√©dica",\n                "Problemas con medicina preventiva",\n                "Negaci√≥n de procedimientos b√°sicos",\n                "Otro"\n            ],\n            complementaria: [\n                "Negaci√≥n de cita con especialistas",\n                "Demora en autorizaci√≥n de cirug√≠as",\n                "Negaci√≥n de ex√°menes diagn√≥sticos",\n                "Problemas con hospitalizaci√≥n",\n                "Negaci√≥n de terapias especializadas",\n                "Demora en resultados de laboratorio",\n                "Otro"\n            ],\n            medicamentos: [\n                "Negaci√≥n de medicamentos autorizados",\n                "Falta de medicamentos en farmacia",\n                "Demora en entrega de medicamentos",\n                "Suministro de medicamentos vencidos",\n                "Negaci√≥n de medicamentos especializados",\n                "Calidad deficiente de medicamentos",\n                "Problemas con medicamentos especializados",\n                "Otro"\n            ]\n        };\n\n        let currentCategory = \'\';\n        let currentUser = null;\n\n        // Inicializar la aplicaci√≥n\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            checkUserSession();\n        });\n\n        function initializeDepartments() {\n            const departamentoSelect = document.getElementById(\'departamento\');\n            Object.keys(DEPARTAMENTOS).forEach(dept => {\n                const option = document.createElement(\'option\');\n                option.value = dept;\n                option.textContent = dept;\n                departamentoSelect.appendChild(option);\n            });\n        }\n\n        function updateCities() {\n            const departamento = document.getElementById(\'departamento\').value;\n            const ciudadSelect = document.getElementById(\'ciudad\');\n            \n            ciudadSelect.innerHTML = \'<option value="">Seleccione ciudad/municipio</option>\';\n            \n            if (departamento && DEPARTAMENTOS[departamento]) {\n                DEPARTAMENTOS[departamento].forEach(ciudad => {\n                    const option = document.createElement(\'option\');\n                    option.value = ciudad;\n                    option.textContent = ciudad;\n                    ciudadSelect.appendChild(option);\n                });\n            }\n        }\n\n        function selectCategory(category) {\n            currentCategory = category;\n            \n            // Actualizar tipos de problemas\n            const problemaSelect = document.getElementById(\'problema\');\n            problemaSelect.innerHTML = \'<option value="">Seleccione el tipo de problema</option>\';\n            \n            TIPOS_PROBLEMAS[category].forEach(problema => {\n                const option = document.createElement(\'option\');\n                option.value = problema;\n                option.textContent = problema;\n                problemaSelect.appendChild(option);\n            });\n            \n            // Establecer clasificaci√≥n\n            document.querySelector(\'input[name="clasificacion"]\').value = category;\n            \n            // Mostrar formulario\n            document.getElementById(\'authSection\').classList.add(\'hidden\');\n            document.getElementById(\'formSection\').classList.remove(\'hidden\');\n            \n            showMessage(`Formulario para: ${category === \'primaria\' ? \'Atenci√≥n Primaria\' : category === \'complementaria\' ? \'Atenci√≥n Complementaria\' : \'Medicamentos\'}`, \'success\');\n        }\n\n        function toggleOtroInput() {\n            const problemaSelect = document.getElementById(\'problema\');\n            const otroGroup = document.getElementById(\'otroProblemaGroup\');\n            const otroInput = document.getElementById(\'otroProblema\');\n            \n            if (problemaSelect.value === \'Otro\') {\n                otroGroup.classList.remove(\'hidden\');\n                otroInput.required = true;\n            } else {\n                otroGroup.classList.add(\'hidden\');\n                otroInput.required = false;\n                otroInput.value = \'\';\n            }\n        }\n\n        function validateFiles() {\n            const fileInput = document.getElementById(\'soporte\');\n            const files = fileInput.files;\n            \n            if (files.length > 5) {\n                showMessage(\'M√°ximo 5 archivos permitidos\', \'error\');\n                fileInput.value = \'\';\n                return;\n            }\n            \n            for (let file of files) {\n                if (file.size > 5 * 1024 * 1024) {\n                    showMessage(`El archivo ${file.name} excede el tama√±o m√°ximo de 5MB`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n                \n                const allowedTypes = [\'application/pdf\', \'image/jpeg\', \'image/jpg\', \'image/png\'];\n                if (!allowedTypes.includes(file.type)) {\n                    showMessage(`El archivo ${file.name} no es un tipo permitido (PDF, JPG, PNG)`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n            }\n        }\n\n        function checkUserSession() {\n            // Simular verificaci√≥n de sesi√≥n\n            // En una implementaci√≥n real, esto verificar√≠a una sesi√≥n o token\n        }\n\n        function resetForm() {\n            document.getElementById(\'quejaForm\').reset();\n            document.getElementById(\'authSection\').classList.remove(\'hidden\');\n            document.getElementById(\'formSection\').classList.add(\'hidden\');\n            document.getElementById(\'otroProblemaGroup\').classList.add(\'hidden\');\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            // Auto-hide success messages\n            if (type === \'success\') {\n                setTimeout(() => {\n                    messageArea.innerHTML = \'\';\n                }, 5000);\n            }\n        }\n\n        function showLoading(show) {\n            const button = document.querySelector(\'#quejaForm button[type="submit"]\');\n            if (show) {\n                button.disabled = true;\n                button.innerHTML = \'<span class="loading">Enviando queja...</span>\';\n            } else {\n                button.disabled = false;\n                button.innerHTML = \'Enviar Queja\';\n            }\n        }\n\n        // Manejar env√≠o del formulario\n        document.getElementById(\'quejaForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            showLoading(true);\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n            \n            try {\n                const formData = new FormData(this);\n                \n                // Si seleccion√≥ "Otro", usar el texto personalizado\n                if (formData.get(\'problema\') === \'Otro\' && formData.get(\'otroProblema\')) {\n                    formData.set(\'problema\', formData.get(\'otroProblema\'));\n                }\n                \n                const response = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: formData\n                });\n                \n                const result = await response.json();\n                \n                if (response.ok && result.success) {\n                    showMessage(`‚úÖ ${result.mensaje}`, \'success\');\n                    \n                    // Limpiar formulario despu√©s de env√≠o exitoso\n                    setTimeout(() => {\n                        resetForm();\n                    }, 3000);\n                } else {\n                    if (result.sugerencia) {\n                        showMessage(`‚ùå ${result.error}\\n\\nSugerencia: ${result.sugerencia}`, \'warning\');\n                    } else {\n                        showMessage(`‚ùå ${result.error || \'Error al enviar la queja\'}`, \'error\');\n                    }\n                }\n            } catch (error) {\n                console.error(\'Error:\', error);\n                showMessage(\'‚ùå Error de conexi√≥n. Por favor, intente nuevamente.\', \'error\');\n            } finally {\n                showLoading(false);\n            }\n        });\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('CopiaSeguridad3.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = c05a81be0528109b46a169b674aef57be14af795c1a38521bb012a5b7f2f32d78ff859d762f0ccdf23def7c0e52cadfc6be0e3647e81724c5698548a2054cfe5_0
2025-06-15 15:48:30,663 - semgrep.rule_match - DEBUG - match_key = ('\n        // Datos de departamentos y ciudades\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo", "Rionegro", "Sabaneta"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul", "Arauquita", "Puerto Rond√≥n", "Cravo Norte"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande", "Puerto Colombia", "Galapa", "Baranoa"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona", "El Carmen de Bol√≠var", "San Pablo", "Santa Rosa"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°", "Barbosa", "Moniquir√°", "Villa de Leyva"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada", "Riosucio", "Anserma", "Palestina"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico", "El Doncello", "La Monta√±ita", "Morelia"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena", "Monterrey", "Paz de Ariporo", "Man√≠"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada", "Pat√≠a", "Corinto", "Guapi", "Timb√≠o"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia", "El Copey", "La Jagua de Ibirico", "San Diego"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥", "Acand√≠", "Riosucio", "Bah√≠a Solano"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica", "Ci√©naga de Oro", "Planeta Rica", "Montel√≠bano"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°", "Ch√≠a", "Mosquera", "Fusagasug√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas", "Mapiripana", "San Felipe", "Puerto Colombia", "La Guadalupe"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar", "El Retorno", "Miraflores"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata", "Campoalegre", "San Agust√≠n", "Isnos"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure", "San Juan del Cesar", "Villanueva", "El Molino"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n", "Zona Bananera", "El Banco", "Plato", "Aracataca"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n", "Puerto L√≥pez", "Cumaral", "Restrepo"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres", "Samaniego", "La Cruz", "Barbacoas"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario", "Los Patios", "Pamplona", "Tib√∫", "El Zulia"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito", "Valle del Guamuez", "Puerto Caicedo", "Villagarz√≥n"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida", "Montenegro", "Quimbaya", "Circasia", "Filandia"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal", "La Virginia", "Bel√©n de Umbr√≠a", "Marsella"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n", "Piedecuesta", "Barrancabermeja", "Socorro", "M√°laga"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s", "San Marcos", "Tol√∫", "Majagual", "Galeras"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda", "L√≠bano", "Chaparral", "Mariquita"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura", "Tul√∫a", "Cartago", "Buga", "Jamund√≠"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫", "Pacoa", "Taraira", "Papunaua", "Yavarat√©"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera", "Santa Rosal√≠a", "Cumaribo"]\n        };\n\n        // Tipos de problemas por categor√≠a\n        const TIPOS_PROBLEMAS = {\n            primaria: [\n                "Negaci√≥n de cita m√©dica general",\n                "Demora en asignaci√≥n de citas",\n                "Negaci√≥n de atenci√≥n de urgencias",\n                "Mala calidad en la atenci√≥n m√©dica",\n                "Problemas con medicina preventiva",\n                "Negaci√≥n de procedimientos b√°sicos",\n                "Otro"\n            ],\n            complementaria: [\n                "Negaci√≥n de cita con especialistas",\n                "Demora en autorizaci√≥n de cirug√≠as",\n                "Negaci√≥n de ex√°menes diagn√≥sticos",\n                "Problemas con hospitalizaci√≥n",\n                "Negaci√≥n de terapias especializadas",\n                "Demora en resultados de laboratorio",\n                "Otro"\n            ],\n            medicamentos: [\n                "Negaci√≥n de medicamentos autorizados",\n                "Falta de medicamentos en farmacia",\n                "Demora en entrega de medicamentos",\n                "Suministro de medicamentos vencidos",\n                "Negaci√≥n de medicamentos especializados",\n                "Calidad deficiente de medicamentos",\n                "Problemas con medicamentos especializados",\n                "Otro"\n            ]\n        };\n\n        let currentCategory = \'\';\n        let currentUser = null;\n\n        // Inicializar la aplicaci√≥n\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            checkUserSession();\n        });\n\n        function initializeDepartments() {\n            const departamentoSelect = document.getElementById(\'departamento\');\n            Object.keys(DEPARTAMENTOS).forEach(dept => {\n                const option = document.createElement(\'option\');\n                option.value = dept;\n                option.textContent = dept;\n                departamentoSelect.appendChild(option);\n            });\n        }\n\n        function updateCities() {\n            const departamento = document.getElementById(\'departamento\').value;\n            const ciudadSelect = document.getElementById(\'ciudad\');\n            \n            ciudadSelect.innerHTML = \'<option value="">Seleccione ciudad/municipio</option>\';\n            \n            if (departamento && DEPARTAMENTOS[departamento]) {\n                DEPARTAMENTOS[departamento].forEach(ciudad => {\n                    const option = document.createElement(\'option\');\n                    option.value = ciudad;\n                    option.textContent = ciudad;\n                    ciudadSelect.appendChild(option);\n                });\n            }\n        }\n\n        function selectCategory(category) {\n            currentCategory = category;\n            \n            // Actualizar tipos de problemas\n            const problemaSelect = document.getElementById(\'problema\');\n            problemaSelect.innerHTML = \'<option value="">Seleccione el tipo de problema</option>\';\n            \n            TIPOS_PROBLEMAS[category].forEach(problema => {\n                const option = document.createElement(\'option\');\n                option.value = problema;\n                option.textContent = problema;\n                problemaSelect.appendChild(option);\n            });\n            \n            // Establecer clasificaci√≥n\n            document.querySelector(\'input[name="clasificacion"]\').value = category;\n            \n            // Mostrar formulario\n            document.getElementById(\'authSection\').classList.add(\'hidden\');\n            document.getElementById(\'formSection\').classList.remove(\'hidden\');\n            \n            showMessage(`Formulario para: ${category === \'primaria\' ? \'Atenci√≥n Primaria\' : category === \'complementaria\' ? \'Atenci√≥n Complementaria\' : \'Medicamentos\'}`, \'success\');\n        }\n\n        function toggleOtroInput() {\n            const problemaSelect = document.getElementById(\'problema\');\n            const otroGroup = document.getElementById(\'otroProblemaGroup\');\n            const otroInput = document.getElementById(\'otroProblema\');\n            \n            if (problemaSelect.value === \'Otro\') {\n                otroGroup.classList.remove(\'hidden\');\n                otroInput.required = true;\n            } else {\n                otroGroup.classList.add(\'hidden\');\n                otroInput.required = false;\n                otroInput.value = \'\';\n            }\n        }\n\n        function validateFiles() {\n            const fileInput = document.getElementById(\'soporte\');\n            const files = fileInput.files;\n            \n            if (files.length > 5) {\n                showMessage(\'M√°ximo 5 archivos permitidos\', \'error\');\n                fileInput.value = \'\';\n                return;\n            }\n            \n            for (let file of files) {\n                if (file.size > 5 * 1024 * 1024) {\n                    showMessage(`El archivo ${file.name} excede el tama√±o m√°ximo de 5MB`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n                \n                const allowedTypes = [\'application/pdf\', \'image/jpeg\', \'image/jpg\', \'image/png\'];\n                if (!allowedTypes.includes(file.type)) {\n                    showMessage(`El archivo ${file.name} no es un tipo permitido (PDF, JPG, PNG)`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n            }\n        }\n\n        function checkUserSession() {\n            // Simular verificaci√≥n de sesi√≥n\n            // En una implementaci√≥n real, esto verificar√≠a una sesi√≥n o token\n        }\n\n        function resetForm() {\n            document.getElementById(\'quejaForm\').reset();\n            document.getElementById(\'authSection\').classList.remove(\'hidden\');\n            document.getElementById(\'formSection\').classList.add(\'hidden\');\n            document.getElementById(\'otroProblemaGroup\').classList.add(\'hidden\');\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            // Auto-hide success messages\n            if (type === \'success\') {\n                setTimeout(() => {\n                    messageArea.innerHTML = \'\';\n                }, 5000);\n            }\n        }\n\n        function showLoading(show) {\n            const button = document.querySelector(\'#quejaForm button[type="submit"]\');\n            if (show) {\n                button.disabled = true;\n                button.innerHTML = \'<span class="loading">Enviando queja...</span>\';\n            } else {\n                button.disabled = false;\n                button.innerHTML = \'Enviar Queja\';\n            }\n        }\n\n        // Manejar env√≠o del formulario\n        document.getElementById(\'quejaForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            showLoading(true);\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n            \n            try {\n                const formData = new FormData(this);\n                \n                // Si seleccion√≥ "Otro", usar el texto personalizado\n                if (formData.get(\'problema\') === \'Otro\' && formData.get(\'otroProblema\')) {\n                    formData.set(\'problema\', formData.get(\'otroProblema\'));\n                }\n                \n                const response = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: formData\n                });\n                \n                const result = await response.json();\n                \n                if (response.ok && result.success) {\n                    showMessage(`‚úÖ ${result.mensaje}`, \'success\');\n                    \n                    // Limpiar formulario despu√©s de env√≠o exitoso\n                    setTimeout(() => {\n                        resetForm();\n                    }, 3000);\n                } else {\n                    if (result.sugerencia) {\n                        showMessage(`‚ùå ${result.error}\\n\\nSugerencia: ${result.sugerencia}`, \'warning\');\n                    } else {\n                        showMessage(`‚ùå ${result.error || \'Error al enviar la queja\'}`, \'error\');\n                    }\n                }\n            } catch (error) {\n                console.error(\'Error:\', error);\n                showMessage(\'‚ùå Error de conexi√≥n. Por favor, intente nuevamente.\', \'error\');\n            } finally {\n                showLoading(false);\n            }\n        });\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Datos de departamentos y ciudades\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo", "Rionegro", "Sabaneta"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul", "Arauquita", "Puerto Rond√≥n", "Cravo Norte"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande", "Puerto Colombia", "Galapa", "Baranoa"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona", "El Carmen de Bol√≠var", "San Pablo", "Santa Rosa"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°", "Barbosa", "Moniquir√°", "Villa de Leyva"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada", "Riosucio", "Anserma", "Palestina"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico", "El Doncello", "La Monta√±ita", "Morelia"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena", "Monterrey", "Paz de Ariporo", "Man√≠"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada", "Pat√≠a", "Corinto", "Guapi", "Timb√≠o"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia", "El Copey", "La Jagua de Ibirico", "San Diego"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥", "Acand√≠", "Riosucio", "Bah√≠a Solano"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica", "Ci√©naga de Oro", "Planeta Rica", "Montel√≠bano"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°", "Ch√≠a", "Mosquera", "Fusagasug√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas", "Mapiripana", "San Felipe", "Puerto Colombia", "La Guadalupe"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar", "El Retorno", "Miraflores"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata", "Campoalegre", "San Agust√≠n", "Isnos"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure", "San Juan del Cesar", "Villanueva", "El Molino"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n", "Zona Bananera", "El Banco", "Plato", "Aracataca"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n", "Puerto L√≥pez", "Cumaral", "Restrepo"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres", "Samaniego", "La Cruz", "Barbacoas"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario", "Los Patios", "Pamplona", "Tib√∫", "El Zulia"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito", "Valle del Guamuez", "Puerto Caicedo", "Villagarz√≥n"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida", "Montenegro", "Quimbaya", "Circasia", "Filandia"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal", "La Virginia", "Bel√©n de Umbr√≠a", "Marsella"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n", "Piedecuesta", "Barrancabermeja", "Socorro", "M√°laga"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s", "San Marcos", "Tol√∫", "Majagual", "Galeras"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda", "L√≠bano", "Chaparral", "Mariquita"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura", "Tul√∫a", "Cartago", "Buga", "Jamund√≠"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫", "Pacoa", "Taraira", "Papunaua", "Yavarat√©"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera", "Santa Rosal√≠a", "Cumaribo"]\n        };\n\n        // Tipos de problemas por categor√≠a\n        const TIPOS_PROBLEMAS = {\n            primaria: [\n                "Negaci√≥n de cita m√©dica general",\n                "Demora en asignaci√≥n de citas",\n                "Negaci√≥n de atenci√≥n de urgencias",\n                "Mala calidad en la atenci√≥n m√©dica",\n                "Problemas con medicina preventiva",\n                "Negaci√≥n de procedimientos b√°sicos",\n                "Otro"\n            ],\n            complementaria: [\n                "Negaci√≥n de cita con especialistas",\n                "Demora en autorizaci√≥n de cirug√≠as",\n                "Negaci√≥n de ex√°menes diagn√≥sticos",\n                "Problemas con hospitalizaci√≥n",\n                "Negaci√≥n de terapias especializadas",\n                "Demora en resultados de laboratorio",\n                "Otro"\n            ],\n            medicamentos: [\n                "Negaci√≥n de medicamentos autorizados",\n                "Falta de medicamentos en farmacia",\n                "Demora en entrega de medicamentos",\n                "Suministro de medicamentos vencidos",\n                "Negaci√≥n de medicamentos especializados",\n                "Calidad deficiente de medicamentos",\n                "Problemas con medicamentos especializados",\n                "Otro"\n            ]\n        };\n\n        let currentCategory = \'\';\n        let currentUser = null;\n\n        // Inicializar la aplicaci√≥n\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            checkUserSession();\n        });\n\n        function initializeDepartments() {\n            const departamentoSelect = document.getElementById(\'departamento\');\n            Object.keys(DEPARTAMENTOS).forEach(dept => {\n                const option = document.createElement(\'option\');\n                option.value = dept;\n                option.textContent = dept;\n                departamentoSelect.appendChild(option);\n            });\n        }\n\n        function updateCities() {\n            const departamento = document.getElementById(\'departamento\').value;\n            const ciudadSelect = document.getElementById(\'ciudad\');\n            \n            ciudadSelect.innerHTML = \'<option value="">Seleccione ciudad/municipio</option>\';\n            \n            if (departamento && DEPARTAMENTOS[departamento]) {\n                DEPARTAMENTOS[departamento].forEach(ciudad => {\n                    const option = document.createElement(\'option\');\n                    option.value = ciudad;\n                    option.textContent = ciudad;\n                    ciudadSelect.appendChild(option);\n                });\n            }\n        }\n\n        function selectCategory(category) {\n            currentCategory = category;\n            \n            // Actualizar tipos de problemas\n            const problemaSelect = document.getElementById(\'problema\');\n            problemaSelect.innerHTML = \'<option value="">Seleccione el tipo de problema</option>\';\n            \n            TIPOS_PROBLEMAS[category].forEach(problema => {\n                const option = document.createElement(\'option\');\n                option.value = problema;\n                option.textContent = problema;\n                problemaSelect.appendChild(option);\n            });\n            \n            // Establecer clasificaci√≥n\n            document.querySelector(\'input[name="clasificacion"]\').value = category;\n            \n            // Mostrar formulario\n            document.getElementById(\'authSection\').classList.add(\'hidden\');\n            document.getElementById(\'formSection\').classList.remove(\'hidden\');\n            \n            showMessage(`Formulario para: ${category === \'primaria\' ? \'Atenci√≥n Primaria\' : category === \'complementaria\' ? \'Atenci√≥n Complementaria\' : \'Medicamentos\'}`, \'success\');\n        }\n\n        function toggleOtroInput() {\n            const problemaSelect = document.getElementById(\'problema\');\n            const otroGroup = document.getElementById(\'otroProblemaGroup\');\n            const otroInput = document.getElementById(\'otroProblema\');\n            \n            if (problemaSelect.value === \'Otro\') {\n                otroGroup.classList.remove(\'hidden\');\n                otroInput.required = true;\n            } else {\n                otroGroup.classList.add(\'hidden\');\n                otroInput.required = false;\n                otroInput.value = \'\';\n            }\n        }\n\n        function validateFiles() {\n            const fileInput = document.getElementById(\'soporte\');\n            const files = fileInput.files;\n            \n            if (files.length > 5) {\n                showMessage(\'M√°ximo 5 archivos permitidos\', \'error\');\n                fileInput.value = \'\';\n                return;\n            }\n            \n            for (let file of files) {\n                if (file.size > 5 * 1024 * 1024) {\n                    showMessage(`El archivo ${file.name} excede el tama√±o m√°ximo de 5MB`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n                \n                const allowedTypes = [\'application/pdf\', \'image/jpeg\', \'image/jpg\', \'image/png\'];\n                if (!allowedTypes.includes(file.type)) {\n                    showMessage(`El archivo ${file.name} no es un tipo permitido (PDF, JPG, PNG)`, \'error\');\n                    fileInput.value = \'\';\n                    return;\n                }\n            }\n        }\n\n        function checkUserSession() {\n            // Simular verificaci√≥n de sesi√≥n\n            // En una implementaci√≥n real, esto verificar√≠a una sesi√≥n o token\n        }\n\n        function resetForm() {\n            document.getElementById(\'quejaForm\').reset();\n            document.getElementById(\'authSection\').classList.remove(\'hidden\');\n            document.getElementById(\'formSection\').classList.add(\'hidden\');\n            document.getElementById(\'otroProblemaGroup\').classList.add(\'hidden\');\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            // Auto-hide success messages\n            if (type === \'success\') {\n                setTimeout(() => {\n                    messageArea.innerHTML = \'\';\n                }, 5000);\n            }\n        }\n\n        function showLoading(show) {\n            const button = document.querySelector(\'#quejaForm button[type="submit"]\');\n            if (show) {\n                button.disabled = true;\n                button.innerHTML = \'<span class="loading">Enviando queja...</span>\';\n            } else {\n                button.disabled = false;\n                button.innerHTML = \'Enviar Queja\';\n            }\n        }\n\n        // Manejar env√≠o del formulario\n        document.getElementById(\'quejaForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            showLoading(true);\n            document.getElementById(\'messageArea\').innerHTML = \'\';\n            \n            try {\n                const formData = new FormData(this);\n                \n                // Si seleccion√≥ "Otro", usar el texto personalizado\n                if (formData.get(\'problema\') === \'Otro\' && formData.get(\'otroProblema\')) {\n                    formData.set(\'problema\', formData.get(\'otroProblema\'));\n                }\n                \n                const response = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: formData\n                });\n                \n                const result = await response.json();\n                \n                if (response.ok && result.success) {\n                    showMessage(`‚úÖ ${result.mensaje}`, \'success\');\n                    \n                    // Limpiar formulario despu√©s de env√≠o exitoso\n                    setTimeout(() => {\n                        resetForm();\n                    }, 3000);\n                } else {\n                    if (result.sugerencia) {\n                        showMessage(`‚ùå ${result.error}\\n\\nSugerencia: ${result.sugerencia}`, \'warning\');\n                    } else {\n                        showMessage(`‚ùå ${result.error || \'Error al enviar la queja\'}`, \'error\');\n                    }\n                }\n            } catch (error) {\n                console.error(\'Error:\', error);\n                showMessage(\'‚ùå Error de conexi√≥n. Por favor, intente nuevamente.\', \'error\');\n            } finally {\n                showLoading(false);\n            }\n        });\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('CopiaSeguridad3.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = c05a81be0528109b46a169b674aef57be14af795c1a38521bb012a5b7f2f32d78ff859d762f0ccdf23def7c0e52cadfc6be0e3647e81724c5698548a2054cfe5_0
2025-06-15 15:48:30,669 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('admin.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 1166ff9f9ae71bfd6f195acac3def0efcf878a9b1f4a44e3e8ac04db1f93a2906148a0000a093ec9a73451fca1838838dfd2fe7859b6e3ade4cc0da027d47a16_0
2025-06-15 15:48:30,678 - semgrep.rule_match - DEBUG - match_key = ('\n        // Datos de departamentos\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera"]\n        };\n\n        let currentDestinatarios = {};\n        let currentVeedores = [];\n        let currentTipos = {\n            primaria: [],\n            complementaria: [],\n            medicamentos: []\n        };\n\n        // Inicializar\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            loadAllData();\n        });\n\n        function initializeDepartments() {\n            const selects = [\'departamentoSelect\', \'veedorDepartamento\'];\n            selects.forEach(selectId => {\n                const select = document.getElementById(selectId);\n                Object.keys(DEPARTAMENTOS).forEach(dept => {\n                    const option = document.createElement(\'option\');\n                    option.value = dept;\n                    option.textContent = dept;\n                    select.appendChild(option);\n                });\n            });\n        }\n\n        function showSection(sectionName) {\n            // Ocultar todas las secciones\n            document.querySelectorAll(\'.section\').forEach(section => {\n                section.classList.remove(\'active\');\n            });\n            \n            // Remover clase active de todos los botones\n            document.querySelectorAll(\'.nav-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Mostrar secci√≥n seleccionada\n            document.getElementById(sectionName).classList.add(\'active\');\n            \n            // Activar bot√≥n correspondiente\n            event.target.classList.add(\'active\');\n            \n            // Cargar datos espec√≠ficos de la secci√≥n\n            if (sectionName === \'estadisticas\') {\n                loadEstadisticas();\n            } else if (sectionName === \'tipos-quejas\') {\n                loadTiposQuejas();\n            }\n        }\n\n        function loadDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            const form = document.getElementById(\'destinatarioForm\');\n            \n            if (!departamento) {\n                form.style.display = \'none\';\n                return;\n            }\n            \n            form.style.display = \'block\';\n            \n            // Cargar datos existentes si los hay\n            if (currentDestinatarios[departamento]) {\n                const data = currentDestinatarios[departamento];\n                document.getElementById(\'correoP rincipal\').value = data.principal || \'\';\n                document.getElementById(\'correosCopia\').value = data.copia ? data.copia.join(\', \') : \'\';\n                document.getElementById(\'responsable\').value = data.responsable || \'\';\n            } else {\n                document.getElementById(\'destinatariosForm\').reset();\n            }\n        }\n\n        function loadAllData() {\n            // Cargar destinatarios\n            fetch(\'/api/admin/destinatarios\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentDestinatarios = data.destinatarios || {};\n                        updateDestinatariosList();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando destinatarios:\', error));\n\n            // Cargar veedores\n            loadVeedores();\n        }\n\n        function updateDestinatariosList() {\n            const list = document.getElementById(\'destinatariosList\');\n            list.innerHTML = \'\';\n            \n            Object.keys(currentDestinatarios).forEach(dept => {\n                const data = currentDestinatarios[dept];\n                const card = document.createElement(\'div\');\n                card.className = \'destinatario-card\';\n                card.innerHTML = `\n                    <div class="destinatario-header">\n                        <div class="destinatario-name">${dept}</div>\n                        <button class="btn btn-danger" onclick="eliminarDestinatarioDept(\'${dept}\')">Eliminar</button>\n                    </div>\n                    <p><strong>Principal:</strong> ${data.principal || \'No configurado\'}</p>\n                    <p><strong>Copia:</strong> ${data.copia ? data.copia.join(\', \') : \'No configurado\'}</p>\n                    <p><strong>Responsable:</strong> ${data.responsable || \'No configurado\'}</p>\n                `;\n                list.appendChild(card);\n            });\n        }\n\n        function loadVeedores() {\n            fetch(\'/api/admin/veedores\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentVeedores = data.veedores || [];\n                        updateVeedoresTable();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando veedores:\', error));\n        }\n\n        function updateVeedoresTable() {\n            const tbody = document.getElementById(\'veedoresTable\');\n            tbody.innerHTML = \'\';\n            \n            currentVeedores.forEach((veedor, index) => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${veedor.departamento}</td>\n                    <td>${veedor.nombre}</td>\n                    <td>${veedor.correo}</td>\n                    <td>${veedor.telefono || \'-\'}</td>\n                    <td>${veedor.cargo || \'-\'}</td>\n                    <td>\n                        <button class="btn" onclick="editarVeedor(${index})">Editar</button>\n                        <button class="btn btn-danger" onclick="eliminarVeedor(${index})">Eliminar</button>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            setTimeout(() => {\n                messageArea.innerHTML = \'\';\n            }, 5000);\n        }\n\n        // Formulario de destinatarios\n        document.getElementById(\'destinatariosForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) {\n                showMessage(\'Seleccione un departamento\', \'error\');\n                return;\n            }\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: departamento,\n                principal: formData.get(\'principal\'),\n                copia: formData.get(\'copia\').split(\',\').map(email => email.trim()).filter(email => email),\n                responsable: formData.get(\'responsable\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/destinatarios\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Destinatarios guardados exitosamente\', \'success\');\n                    currentDestinatarios[departamento] = {\n                        principal: data.principal,\n                        copia: data.copia,\n                        responsable: data.responsable\n                    };\n                    updateDestinatariosList();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        // Formulario de veedores\n        document.getElementById(\'veedorForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: formData.get(\'departamento\'),\n                nombre: formData.get(\'nombre\'),\n                cedula: formData.get(\'cedula\'),\n                correo: formData.get(\'correo\'),\n                telefono: formData.get(\'telefono\'),\n                cargo: formData.get(\'cargo\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/veedores\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Veedor guardado exitosamente\', \'success\');\n                    loadVeedores();\n                    this.reset();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        function eliminarDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) return;\n            \n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                            document.getElementById(\'destinatariosForm\').reset();\n                        }\n                    });\n            }\n        }\n\n        function eliminarDestinatarioDept(departamento) {\n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                        }\n                    });\n            }\n        }\n\n        function editarVeedor(index) {\n            const veedor = currentVeedores[index];\n            document.getElementById(\'veedorDepartamento\').value = veedor.departamento;\n            document.getElementById(\'veedorNombre\').value = veedor.nombre;\n            document.getElementById(\'veedorCedula\').value = veedor.cedula;\n            document.getElementById(\'veedorCorreo\').value = veedor.correo;\n            document.getElementById(\'veedorTelefono\').value = veedor.telefono || \'\';\n            document.getElementById(\'veedorCargo\').value = veedor.cargo || \'\';\n        }\n\n        function eliminarVeedor(index) {\n            const veedor = currentVeedores[index];\n            if (confirm(`¬øEst√° seguro de eliminar a ${veedor.nombre}?`)) {\n                fetch(`/api/admin/veedores/${veedor.cedula}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Veedor eliminado\', \'success\');\n                            loadVeedores();\n                        }\n                    });\n            }\n        }\n\n        function limpiarFormularioVeedor() {\n            document.getElementById(\'veedorForm\').reset();\n        }\n\n        // Funciones para estad√≠sticas\n        async function loadEstadisticas() {\n            try {\n                const response = await fetch(\'/api/admin/estadisticas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    updateEstadisticasDisplay(data.estadisticas);\n                    createCharts(data.estadisticas);\n                    updateQuejasTable(data.estadisticas.quejasRecientes);\n                }\n            } catch (error) {\n                console.error(\'Error cargando estad√≠sticas:\', error);\n            }\n        }\n\n        function updateEstadisticasDisplay(stats) {\n            document.getElementById(\'totalQuejas\').textContent = stats.totalQuejas;\n            document.getElementById(\'quejasMes\').textContent = stats.quejasMes;\n            document.getElementById(\'promedioDiario\').textContent = stats.promedioDiario.toFixed(1);\n            document.getElementById(\'totalUsuarios\').textContent = stats.totalUsuarios;\n        }\n\n        function createCharts(stats) {\n            // Gr√°fico de departamentos\n            createBarChart(\'departamentosChart\', \'Departamentos\', stats.porDepartamento);\n            \n            // Gr√°fico de tipos de atenci√≥n\n            createPieChart(\'tiposChart\', stats.porTipo);\n            \n            // Gr√°fico de tendencia\n            createLineChart(\'tendenciaChart\', stats.tendencia);\n        }\n\n        function createBarChart(canvasId, label, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            // Limpiar canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const labels = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const barWidth = canvas.width / labels.length * 0.8;\n            const barSpacing = canvas.width / labels.length * 0.2;\n            \n            labels.forEach((label, index) => {\n                const barHeight = (values[index] / maxValue) * (canvas.height - 60);\n                const x = index * (barWidth + barSpacing) + barSpacing/2;\n                const y = canvas.height - barHeight - 30;\n                \n                // Dibujar barra\n                ctx.fillStyle = \'#007bff\';\n                ctx.fillRect(x, y, barWidth, barHeight);\n                \n                // Dibujar valor\n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(values[index], x + barWidth/2, y - 5);\n                \n                // Dibujar etiqueta\n                ctx.save();\n                ctx.translate(x + barWidth/2, canvas.height - 10);\n                ctx.rotate(-Math.PI/6);\n                ctx.fillText(label.substring(0, 8), 0, 0);\n                ctx.restore();\n            });\n        }\n\n        function createPieChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const total = Object.values(data).reduce((sum, val) => sum + val, 0);\n            \n            if (total === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const centerX = canvas.width / 2;\n            const centerY = canvas.height / 2;\n            const radius = Math.min(centerX, centerY) - 40;\n            \n            let currentAngle = 0;\n            const colors = [\'#007bff\', \'#28a745\', \'#ffc107\', \'#dc3545\', \'#6f42c1\'];\n            \n            Object.entries(data).forEach(([label, value], index) => {\n                const sliceAngle = (value / total) * 2 * Math.PI;\n                \n                // Dibujar slice\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n                ctx.closePath();\n                ctx.fillStyle = colors[index % colors.length];\n                ctx.fill();\n                \n                // Dibujar etiqueta\n                const labelAngle = currentAngle + sliceAngle / 2;\n                const labelX = centerX + Math.cos(labelAngle) * (radius + 20);\n                const labelY = centerY + Math.sin(labelAngle) * (radius + 20);\n                \n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(`${label}: ${value}`, labelX, labelY);\n                \n                currentAngle += sliceAngle;\n            });\n        }\n\n        function createLineChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const dates = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0 || dates.length === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const stepX = canvas.width / (dates.length - 1);\n            const padding = 40;\n            \n            // Dibujar l√≠nea\n            ctx.beginPath();\n            ctx.strokeStyle = \'#007bff\';\n            ctx.lineWidth = 2;\n            \n            values.forEach((value, index) => {\n                const x = index * stepX;\n                const y = canvas.height - padding - (value / maxValue) * (canvas.height - 2 * padding);\n                \n                if (index === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n                \n                // Dibujar punto\n                ctx.fillStyle = \'#007bff\';\n                ctx.beginPath();\n                ctx.arc(x, y, 3, 0, 2 * Math.PI);\n                ctx.fill();\n            });\n            \n            ctx.stroke();\n            \n            // Dibujar etiquetas de fechas\n            ctx.fillStyle = \'#666\';\n            ctx.font = \'10px Arial\';\n            ctx.textAlign = \'center\';\n            dates.forEach((date, index) => {\n                const x = index * stepX;\n                if (index % Math.ceil(dates.length / 5) === 0) {\n                    ctx.fillText(date.substring(5), x, canvas.height - 5);\n                }\n            });\n        }\n\n        function updateQuejasTable(quejas) {\n            const tbody = document.getElementById(\'quejasTableBody\');\n            tbody.innerHTML = \'\';\n            \n            quejas.forEach(queja => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${new Date(queja.fecha).toLocaleDateString()}</td>\n                    <td>${queja.departamento}</td>\n                    <td>${queja.ciudad}</td>\n                    <td>${queja.clasificacion}</td>\n                    <td>${queja.problema.substring(0, 30)}...</td>\n                    <td>${queja.usuario}</td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        // Funciones para tipos de quejas\n        async function loadTiposQuejas() {\n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    currentTipos = data.tipos;\n                    updateTiposDisplay();\n                }\n            } catch (error) {\n                console.error(\'Error cargando tipos de quejas:\', error);\n            }\n        }\n\n        function updateTiposDisplay() {\n            [\'primaria\', \'complementaria\', \'medicamentos\'].forEach(categoria => {\n                const container = document.getElementById(`tipos${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`);\n                container.innerHTML = \'\';\n                \n                currentTipos[categoria].forEach((tipo, index) => {\n                    const item = document.createElement(\'div\');\n                    item.className = \'tipo-item\';\n                    item.innerHTML = `\n                        <div class="tipo-texto">${tipo}</div>\n                        <button class="btn-small" onclick="eliminarTipo(\'${categoria}\', ${index})">Eliminar</button>\n                    `;\n                    container.appendChild(item);\n                });\n            });\n        }\n\n        async function agregarTipo(categoria) {\n            const inputId = `nuevo${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`;\n            const input = document.getElementById(inputId);\n            const nuevoTipo = input.value.trim();\n            \n            if (!nuevoTipo) {\n                showMessage(\'Ingrese un tipo de problema\', \'error\');\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, tipo: nuevoTipo })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo agregado exitosamente\', \'success\');\n                    input.value = \'\';\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al agregar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n\n        async function eliminarTipo(categoria, index) {\n            const tipo = currentTipos[categoria][index];\n            if (!confirm(`¬øEst√° seguro de eliminar "${tipo}"?`)) {\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'DELETE\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, index })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo eliminado exitosamente\', \'success\');\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al eliminar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Datos de departamentos\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera"]\n        };\n\n        let currentDestinatarios = {};\n        let currentVeedores = [];\n        let currentTipos = {\n            primaria: [],\n            complementaria: [],\n            medicamentos: []\n        };\n\n        // Inicializar\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            loadAllData();\n        });\n\n        function initializeDepartments() {\n            const selects = [\'departamentoSelect\', \'veedorDepartamento\'];\n            selects.forEach(selectId => {\n                const select = document.getElementById(selectId);\n                Object.keys(DEPARTAMENTOS).forEach(dept => {\n                    const option = document.createElement(\'option\');\n                    option.value = dept;\n                    option.textContent = dept;\n                    select.appendChild(option);\n                });\n            });\n        }\n\n        function showSection(sectionName) {\n            // Ocultar todas las secciones\n            document.querySelectorAll(\'.section\').forEach(section => {\n                section.classList.remove(\'active\');\n            });\n            \n            // Remover clase active de todos los botones\n            document.querySelectorAll(\'.nav-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Mostrar secci√≥n seleccionada\n            document.getElementById(sectionName).classList.add(\'active\');\n            \n            // Activar bot√≥n correspondiente\n            event.target.classList.add(\'active\');\n            \n            // Cargar datos espec√≠ficos de la secci√≥n\n            if (sectionName === \'estadisticas\') {\n                loadEstadisticas();\n            } else if (sectionName === \'tipos-quejas\') {\n                loadTiposQuejas();\n            }\n        }\n\n        function loadDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            const form = document.getElementById(\'destinatarioForm\');\n            \n            if (!departamento) {\n                form.style.display = \'none\';\n                return;\n            }\n            \n            form.style.display = \'block\';\n            \n            // Cargar datos existentes si los hay\n            if (currentDestinatarios[departamento]) {\n                const data = currentDestinatarios[departamento];\n                document.getElementById(\'correoP rincipal\').value = data.principal || \'\';\n                document.getElementById(\'correosCopia\').value = data.copia ? data.copia.join(\', \') : \'\';\n                document.getElementById(\'responsable\').value = data.responsable || \'\';\n            } else {\n                document.getElementById(\'destinatariosForm\').reset();\n            }\n        }\n\n        function loadAllData() {\n            // Cargar destinatarios\n            fetch(\'/api/admin/destinatarios\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentDestinatarios = data.destinatarios || {};\n                        updateDestinatariosList();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando destinatarios:\', error));\n\n            // Cargar veedores\n            loadVeedores();\n        }\n\n        function updateDestinatariosList() {\n            const list = document.getElementById(\'destinatariosList\');\n            list.innerHTML = \'\';\n            \n            Object.keys(currentDestinatarios).forEach(dept => {\n                const data = currentDestinatarios[dept];\n                const card = document.createElement(\'div\');\n                card.className = \'destinatario-card\';\n                card.innerHTML = `\n                    <div class="destinatario-header">\n                        <div class="destinatario-name">${dept}</div>\n                        <button class="btn btn-danger" onclick="eliminarDestinatarioDept(\'${dept}\')">Eliminar</button>\n                    </div>\n                    <p><strong>Principal:</strong> ${data.principal || \'No configurado\'}</p>\n                    <p><strong>Copia:</strong> ${data.copia ? data.copia.join(\', \') : \'No configurado\'}</p>\n                    <p><strong>Responsable:</strong> ${data.responsable || \'No configurado\'}</p>\n                `;\n                list.appendChild(card);\n            });\n        }\n\n        function loadVeedores() {\n            fetch(\'/api/admin/veedores\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentVeedores = data.veedores || [];\n                        updateVeedoresTable();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando veedores:\', error));\n        }\n\n        function updateVeedoresTable() {\n            const tbody = document.getElementById(\'veedoresTable\');\n            tbody.innerHTML = \'\';\n            \n            currentVeedores.forEach((veedor, index) => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${veedor.departamento}</td>\n                    <td>${veedor.nombre}</td>\n                    <td>${veedor.correo}</td>\n                    <td>${veedor.telefono || \'-\'}</td>\n                    <td>${veedor.cargo || \'-\'}</td>\n                    <td>\n                        <button class="btn" onclick="editarVeedor(${index})">Editar</button>\n                        <button class="btn btn-danger" onclick="eliminarVeedor(${index})">Eliminar</button>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            setTimeout(() => {\n                messageArea.innerHTML = \'\';\n            }, 5000);\n        }\n\n        // Formulario de destinatarios\n        document.getElementById(\'destinatariosForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) {\n                showMessage(\'Seleccione un departamento\', \'error\');\n                return;\n            }\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: departamento,\n                principal: formData.get(\'principal\'),\n                copia: formData.get(\'copia\').split(\',\').map(email => email.trim()).filter(email => email),\n                responsable: formData.get(\'responsable\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/destinatarios\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Destinatarios guardados exitosamente\', \'success\');\n                    currentDestinatarios[departamento] = {\n                        principal: data.principal,\n                        copia: data.copia,\n                        responsable: data.responsable\n                    };\n                    updateDestinatariosList();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        // Formulario de veedores\n        document.getElementById(\'veedorForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: formData.get(\'departamento\'),\n                nombre: formData.get(\'nombre\'),\n                cedula: formData.get(\'cedula\'),\n                correo: formData.get(\'correo\'),\n                telefono: formData.get(\'telefono\'),\n                cargo: formData.get(\'cargo\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/veedores\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Veedor guardado exitosamente\', \'success\');\n                    loadVeedores();\n                    this.reset();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        function eliminarDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) return;\n            \n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                            document.getElementById(\'destinatariosForm\').reset();\n                        }\n                    });\n            }\n        }\n\n        function eliminarDestinatarioDept(departamento) {\n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                        }\n                    });\n            }\n        }\n\n        function editarVeedor(index) {\n            const veedor = currentVeedores[index];\n            document.getElementById(\'veedorDepartamento\').value = veedor.departamento;\n            document.getElementById(\'veedorNombre\').value = veedor.nombre;\n            document.getElementById(\'veedorCedula\').value = veedor.cedula;\n            document.getElementById(\'veedorCorreo\').value = veedor.correo;\n            document.getElementById(\'veedorTelefono\').value = veedor.telefono || \'\';\n            document.getElementById(\'veedorCargo\').value = veedor.cargo || \'\';\n        }\n\n        function eliminarVeedor(index) {\n            const veedor = currentVeedores[index];\n            if (confirm(`¬øEst√° seguro de eliminar a ${veedor.nombre}?`)) {\n                fetch(`/api/admin/veedores/${veedor.cedula}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Veedor eliminado\', \'success\');\n                            loadVeedores();\n                        }\n                    });\n            }\n        }\n\n        function limpiarFormularioVeedor() {\n            document.getElementById(\'veedorForm\').reset();\n        }\n\n        // Funciones para estad√≠sticas\n        async function loadEstadisticas() {\n            try {\n                const response = await fetch(\'/api/admin/estadisticas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    updateEstadisticasDisplay(data.estadisticas);\n                    createCharts(data.estadisticas);\n                    updateQuejasTable(data.estadisticas.quejasRecientes);\n                }\n            } catch (error) {\n                console.error(\'Error cargando estad√≠sticas:\', error);\n            }\n        }\n\n        function updateEstadisticasDisplay(stats) {\n            document.getElementById(\'totalQuejas\').textContent = stats.totalQuejas;\n            document.getElementById(\'quejasMes\').textContent = stats.quejasMes;\n            document.getElementById(\'promedioDiario\').textContent = stats.promedioDiario.toFixed(1);\n            document.getElementById(\'totalUsuarios\').textContent = stats.totalUsuarios;\n        }\n\n        function createCharts(stats) {\n            // Gr√°fico de departamentos\n            createBarChart(\'departamentosChart\', \'Departamentos\', stats.porDepartamento);\n            \n            // Gr√°fico de tipos de atenci√≥n\n            createPieChart(\'tiposChart\', stats.porTipo);\n            \n            // Gr√°fico de tendencia\n            createLineChart(\'tendenciaChart\', stats.tendencia);\n        }\n\n        function createBarChart(canvasId, label, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            // Limpiar canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const labels = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const barWidth = canvas.width / labels.length * 0.8;\n            const barSpacing = canvas.width / labels.length * 0.2;\n            \n            labels.forEach((label, index) => {\n                const barHeight = (values[index] / maxValue) * (canvas.height - 60);\n                const x = index * (barWidth + barSpacing) + barSpacing/2;\n                const y = canvas.height - barHeight - 30;\n                \n                // Dibujar barra\n                ctx.fillStyle = \'#007bff\';\n                ctx.fillRect(x, y, barWidth, barHeight);\n                \n                // Dibujar valor\n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(values[index], x + barWidth/2, y - 5);\n                \n                // Dibujar etiqueta\n                ctx.save();\n                ctx.translate(x + barWidth/2, canvas.height - 10);\n                ctx.rotate(-Math.PI/6);\n                ctx.fillText(label.substring(0, 8), 0, 0);\n                ctx.restore();\n            });\n        }\n\n        function createPieChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const total = Object.values(data).reduce((sum, val) => sum + val, 0);\n            \n            if (total === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const centerX = canvas.width / 2;\n            const centerY = canvas.height / 2;\n            const radius = Math.min(centerX, centerY) - 40;\n            \n            let currentAngle = 0;\n            const colors = [\'#007bff\', \'#28a745\', \'#ffc107\', \'#dc3545\', \'#6f42c1\'];\n            \n            Object.entries(data).forEach(([label, value], index) => {\n                const sliceAngle = (value / total) * 2 * Math.PI;\n                \n                // Dibujar slice\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n                ctx.closePath();\n                ctx.fillStyle = colors[index % colors.length];\n                ctx.fill();\n                \n                // Dibujar etiqueta\n                const labelAngle = currentAngle + sliceAngle / 2;\n                const labelX = centerX + Math.cos(labelAngle) * (radius + 20);\n                const labelY = centerY + Math.sin(labelAngle) * (radius + 20);\n                \n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(`${label}: ${value}`, labelX, labelY);\n                \n                currentAngle += sliceAngle;\n            });\n        }\n\n        function createLineChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const dates = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0 || dates.length === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const stepX = canvas.width / (dates.length - 1);\n            const padding = 40;\n            \n            // Dibujar l√≠nea\n            ctx.beginPath();\n            ctx.strokeStyle = \'#007bff\';\n            ctx.lineWidth = 2;\n            \n            values.forEach((value, index) => {\n                const x = index * stepX;\n                const y = canvas.height - padding - (value / maxValue) * (canvas.height - 2 * padding);\n                \n                if (index === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n                \n                // Dibujar punto\n                ctx.fillStyle = \'#007bff\';\n                ctx.beginPath();\n                ctx.arc(x, y, 3, 0, 2 * Math.PI);\n                ctx.fill();\n            });\n            \n            ctx.stroke();\n            \n            // Dibujar etiquetas de fechas\n            ctx.fillStyle = \'#666\';\n            ctx.font = \'10px Arial\';\n            ctx.textAlign = \'center\';\n            dates.forEach((date, index) => {\n                const x = index * stepX;\n                if (index % Math.ceil(dates.length / 5) === 0) {\n                    ctx.fillText(date.substring(5), x, canvas.height - 5);\n                }\n            });\n        }\n\n        function updateQuejasTable(quejas) {\n            const tbody = document.getElementById(\'quejasTableBody\');\n            tbody.innerHTML = \'\';\n            \n            quejas.forEach(queja => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${new Date(queja.fecha).toLocaleDateString()}</td>\n                    <td>${queja.departamento}</td>\n                    <td>${queja.ciudad}</td>\n                    <td>${queja.clasificacion}</td>\n                    <td>${queja.problema.substring(0, 30)}...</td>\n                    <td>${queja.usuario}</td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        // Funciones para tipos de quejas\n        async function loadTiposQuejas() {\n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    currentTipos = data.tipos;\n                    updateTiposDisplay();\n                }\n            } catch (error) {\n                console.error(\'Error cargando tipos de quejas:\', error);\n            }\n        }\n\n        function updateTiposDisplay() {\n            [\'primaria\', \'complementaria\', \'medicamentos\'].forEach(categoria => {\n                const container = document.getElementById(`tipos${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`);\n                container.innerHTML = \'\';\n                \n                currentTipos[categoria].forEach((tipo, index) => {\n                    const item = document.createElement(\'div\');\n                    item.className = \'tipo-item\';\n                    item.innerHTML = `\n                        <div class="tipo-texto">${tipo}</div>\n                        <button class="btn-small" onclick="eliminarTipo(\'${categoria}\', ${index})">Eliminar</button>\n                    `;\n                    container.appendChild(item);\n                });\n            });\n        }\n\n        async function agregarTipo(categoria) {\n            const inputId = `nuevo${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`;\n            const input = document.getElementById(inputId);\n            const nuevoTipo = input.value.trim();\n            \n            if (!nuevoTipo) {\n                showMessage(\'Ingrese un tipo de problema\', \'error\');\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, tipo: nuevoTipo })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo agregado exitosamente\', \'success\');\n                    input.value = \'\';\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al agregar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n\n        async function eliminarTipo(categoria, index) {\n            const tipo = currentTipos[categoria][index];\n            if (!confirm(`¬øEst√° seguro de eliminar "${tipo}"?`)) {\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'DELETE\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, index })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo eliminado exitosamente\', \'success\');\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al eliminar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n    </script>\n', PosixPath('admin.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 24936f5dec626be216bc435c4e47b7ddbb5d5c32120836752bf850cdd1b88c44f5e1f134acd48e9749d031f3c428e7e8eee8077bf8274f980819c5fa5021c865_0
2025-06-15 15:48:30,683 - semgrep.rule_match - DEBUG - match_key = ('\n        // Datos de departamentos\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera"]\n        };\n\n        let currentDestinatarios = {};\n        let currentVeedores = [];\n        let currentTipos = {\n            primaria: [],\n            complementaria: [],\n            medicamentos: []\n        };\n\n        // Inicializar\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            loadAllData();\n        });\n\n        function initializeDepartments() {\n            const selects = [\'departamentoSelect\', \'veedorDepartamento\'];\n            selects.forEach(selectId => {\n                const select = document.getElementById(selectId);\n                Object.keys(DEPARTAMENTOS).forEach(dept => {\n                    const option = document.createElement(\'option\');\n                    option.value = dept;\n                    option.textContent = dept;\n                    select.appendChild(option);\n                });\n            });\n        }\n\n        function showSection(sectionName) {\n            // Ocultar todas las secciones\n            document.querySelectorAll(\'.section\').forEach(section => {\n                section.classList.remove(\'active\');\n            });\n            \n            // Remover clase active de todos los botones\n            document.querySelectorAll(\'.nav-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Mostrar secci√≥n seleccionada\n            document.getElementById(sectionName).classList.add(\'active\');\n            \n            // Activar bot√≥n correspondiente\n            event.target.classList.add(\'active\');\n            \n            // Cargar datos espec√≠ficos de la secci√≥n\n            if (sectionName === \'estadisticas\') {\n                loadEstadisticas();\n            } else if (sectionName === \'tipos-quejas\') {\n                loadTiposQuejas();\n            }\n        }\n\n        function loadDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            const form = document.getElementById(\'destinatarioForm\');\n            \n            if (!departamento) {\n                form.style.display = \'none\';\n                return;\n            }\n            \n            form.style.display = \'block\';\n            \n            // Cargar datos existentes si los hay\n            if (currentDestinatarios[departamento]) {\n                const data = currentDestinatarios[departamento];\n                document.getElementById(\'correoP rincipal\').value = data.principal || \'\';\n                document.getElementById(\'correosCopia\').value = data.copia ? data.copia.join(\', \') : \'\';\n                document.getElementById(\'responsable\').value = data.responsable || \'\';\n            } else {\n                document.getElementById(\'destinatariosForm\').reset();\n            }\n        }\n\n        function loadAllData() {\n            // Cargar destinatarios\n            fetch(\'/api/admin/destinatarios\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentDestinatarios = data.destinatarios || {};\n                        updateDestinatariosList();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando destinatarios:\', error));\n\n            // Cargar veedores\n            loadVeedores();\n        }\n\n        function updateDestinatariosList() {\n            const list = document.getElementById(\'destinatariosList\');\n            list.innerHTML = \'\';\n            \n            Object.keys(currentDestinatarios).forEach(dept => {\n                const data = currentDestinatarios[dept];\n                const card = document.createElement(\'div\');\n                card.className = \'destinatario-card\';\n                card.innerHTML = `\n                    <div class="destinatario-header">\n                        <div class="destinatario-name">${dept}</div>\n                        <button class="btn btn-danger" onclick="eliminarDestinatarioDept(\'${dept}\')">Eliminar</button>\n                    </div>\n                    <p><strong>Principal:</strong> ${data.principal || \'No configurado\'}</p>\n                    <p><strong>Copia:</strong> ${data.copia ? data.copia.join(\', \') : \'No configurado\'}</p>\n                    <p><strong>Responsable:</strong> ${data.responsable || \'No configurado\'}</p>\n                `;\n                list.appendChild(card);\n            });\n        }\n\n        function loadVeedores() {\n            fetch(\'/api/admin/veedores\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentVeedores = data.veedores || [];\n                        updateVeedoresTable();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando veedores:\', error));\n        }\n\n        function updateVeedoresTable() {\n            const tbody = document.getElementById(\'veedoresTable\');\n            tbody.innerHTML = \'\';\n            \n            currentVeedores.forEach((veedor, index) => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${veedor.departamento}</td>\n                    <td>${veedor.nombre}</td>\n                    <td>${veedor.correo}</td>\n                    <td>${veedor.telefono || \'-\'}</td>\n                    <td>${veedor.cargo || \'-\'}</td>\n                    <td>\n                        <button class="btn" onclick="editarVeedor(${index})">Editar</button>\n                        <button class="btn btn-danger" onclick="eliminarVeedor(${index})">Eliminar</button>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            setTimeout(() => {\n                messageArea.innerHTML = \'\';\n            }, 5000);\n        }\n\n        // Formulario de destinatarios\n        document.getElementById(\'destinatariosForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) {\n                showMessage(\'Seleccione un departamento\', \'error\');\n                return;\n            }\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: departamento,\n                principal: formData.get(\'principal\'),\n                copia: formData.get(\'copia\').split(\',\').map(email => email.trim()).filter(email => email),\n                responsable: formData.get(\'responsable\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/destinatarios\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Destinatarios guardados exitosamente\', \'success\');\n                    currentDestinatarios[departamento] = {\n                        principal: data.principal,\n                        copia: data.copia,\n                        responsable: data.responsable\n                    };\n                    updateDestinatariosList();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        // Formulario de veedores\n        document.getElementById(\'veedorForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: formData.get(\'departamento\'),\n                nombre: formData.get(\'nombre\'),\n                cedula: formData.get(\'cedula\'),\n                correo: formData.get(\'correo\'),\n                telefono: formData.get(\'telefono\'),\n                cargo: formData.get(\'cargo\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/veedores\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Veedor guardado exitosamente\', \'success\');\n                    loadVeedores();\n                    this.reset();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        function eliminarDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) return;\n            \n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                            document.getElementById(\'destinatariosForm\').reset();\n                        }\n                    });\n            }\n        }\n\n        function eliminarDestinatarioDept(departamento) {\n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                        }\n                    });\n            }\n        }\n\n        function editarVeedor(index) {\n            const veedor = currentVeedores[index];\n            document.getElementById(\'veedorDepartamento\').value = veedor.departamento;\n            document.getElementById(\'veedorNombre\').value = veedor.nombre;\n            document.getElementById(\'veedorCedula\').value = veedor.cedula;\n            document.getElementById(\'veedorCorreo\').value = veedor.correo;\n            document.getElementById(\'veedorTelefono\').value = veedor.telefono || \'\';\n            document.getElementById(\'veedorCargo\').value = veedor.cargo || \'\';\n        }\n\n        function eliminarVeedor(index) {\n            const veedor = currentVeedores[index];\n            if (confirm(`¬øEst√° seguro de eliminar a ${veedor.nombre}?`)) {\n                fetch(`/api/admin/veedores/${veedor.cedula}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Veedor eliminado\', \'success\');\n                            loadVeedores();\n                        }\n                    });\n            }\n        }\n\n        function limpiarFormularioVeedor() {\n            document.getElementById(\'veedorForm\').reset();\n        }\n\n        // Funciones para estad√≠sticas\n        async function loadEstadisticas() {\n            try {\n                const response = await fetch(\'/api/admin/estadisticas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    updateEstadisticasDisplay(data.estadisticas);\n                    createCharts(data.estadisticas);\n                    updateQuejasTable(data.estadisticas.quejasRecientes);\n                }\n            } catch (error) {\n                console.error(\'Error cargando estad√≠sticas:\', error);\n            }\n        }\n\n        function updateEstadisticasDisplay(stats) {\n            document.getElementById(\'totalQuejas\').textContent = stats.totalQuejas;\n            document.getElementById(\'quejasMes\').textContent = stats.quejasMes;\n            document.getElementById(\'promedioDiario\').textContent = stats.promedioDiario.toFixed(1);\n            document.getElementById(\'totalUsuarios\').textContent = stats.totalUsuarios;\n        }\n\n        function createCharts(stats) {\n            // Gr√°fico de departamentos\n            createBarChart(\'departamentosChart\', \'Departamentos\', stats.porDepartamento);\n            \n            // Gr√°fico de tipos de atenci√≥n\n            createPieChart(\'tiposChart\', stats.porTipo);\n            \n            // Gr√°fico de tendencia\n            createLineChart(\'tendenciaChart\', stats.tendencia);\n        }\n\n        function createBarChart(canvasId, label, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            // Limpiar canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const labels = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const barWidth = canvas.width / labels.length * 0.8;\n            const barSpacing = canvas.width / labels.length * 0.2;\n            \n            labels.forEach((label, index) => {\n                const barHeight = (values[index] / maxValue) * (canvas.height - 60);\n                const x = index * (barWidth + barSpacing) + barSpacing/2;\n                const y = canvas.height - barHeight - 30;\n                \n                // Dibujar barra\n                ctx.fillStyle = \'#007bff\';\n                ctx.fillRect(x, y, barWidth, barHeight);\n                \n                // Dibujar valor\n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(values[index], x + barWidth/2, y - 5);\n                \n                // Dibujar etiqueta\n                ctx.save();\n                ctx.translate(x + barWidth/2, canvas.height - 10);\n                ctx.rotate(-Math.PI/6);\n                ctx.fillText(label.substring(0, 8), 0, 0);\n                ctx.restore();\n            });\n        }\n\n        function createPieChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const total = Object.values(data).reduce((sum, val) => sum + val, 0);\n            \n            if (total === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const centerX = canvas.width / 2;\n            const centerY = canvas.height / 2;\n            const radius = Math.min(centerX, centerY) - 40;\n            \n            let currentAngle = 0;\n            const colors = [\'#007bff\', \'#28a745\', \'#ffc107\', \'#dc3545\', \'#6f42c1\'];\n            \n            Object.entries(data).forEach(([label, value], index) => {\n                const sliceAngle = (value / total) * 2 * Math.PI;\n                \n                // Dibujar slice\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n                ctx.closePath();\n                ctx.fillStyle = colors[index % colors.length];\n                ctx.fill();\n                \n                // Dibujar etiqueta\n                const labelAngle = currentAngle + sliceAngle / 2;\n                const labelX = centerX + Math.cos(labelAngle) * (radius + 20);\n                const labelY = centerY + Math.sin(labelAngle) * (radius + 20);\n                \n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(`${label}: ${value}`, labelX, labelY);\n                \n                currentAngle += sliceAngle;\n            });\n        }\n\n        function createLineChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const dates = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0 || dates.length === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const stepX = canvas.width / (dates.length - 1);\n            const padding = 40;\n            \n            // Dibujar l√≠nea\n            ctx.beginPath();\n            ctx.strokeStyle = \'#007bff\';\n            ctx.lineWidth = 2;\n            \n            values.forEach((value, index) => {\n                const x = index * stepX;\n                const y = canvas.height - padding - (value / maxValue) * (canvas.height - 2 * padding);\n                \n                if (index === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n                \n                // Dibujar punto\n                ctx.fillStyle = \'#007bff\';\n                ctx.beginPath();\n                ctx.arc(x, y, 3, 0, 2 * Math.PI);\n                ctx.fill();\n            });\n            \n            ctx.stroke();\n            \n            // Dibujar etiquetas de fechas\n            ctx.fillStyle = \'#666\';\n            ctx.font = \'10px Arial\';\n            ctx.textAlign = \'center\';\n            dates.forEach((date, index) => {\n                const x = index * stepX;\n                if (index % Math.ceil(dates.length / 5) === 0) {\n                    ctx.fillText(date.substring(5), x, canvas.height - 5);\n                }\n            });\n        }\n\n        function updateQuejasTable(quejas) {\n            const tbody = document.getElementById(\'quejasTableBody\');\n            tbody.innerHTML = \'\';\n            \n            quejas.forEach(queja => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${new Date(queja.fecha).toLocaleDateString()}</td>\n                    <td>${queja.departamento}</td>\n                    <td>${queja.ciudad}</td>\n                    <td>${queja.clasificacion}</td>\n                    <td>${queja.problema.substring(0, 30)}...</td>\n                    <td>${queja.usuario}</td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        // Funciones para tipos de quejas\n        async function loadTiposQuejas() {\n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    currentTipos = data.tipos;\n                    updateTiposDisplay();\n                }\n            } catch (error) {\n                console.error(\'Error cargando tipos de quejas:\', error);\n            }\n        }\n\n        function updateTiposDisplay() {\n            [\'primaria\', \'complementaria\', \'medicamentos\'].forEach(categoria => {\n                const container = document.getElementById(`tipos${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`);\n                container.innerHTML = \'\';\n                \n                currentTipos[categoria].forEach((tipo, index) => {\n                    const item = document.createElement(\'div\');\n                    item.className = \'tipo-item\';\n                    item.innerHTML = `\n                        <div class="tipo-texto">${tipo}</div>\n                        <button class="btn-small" onclick="eliminarTipo(\'${categoria}\', ${index})">Eliminar</button>\n                    `;\n                    container.appendChild(item);\n                });\n            });\n        }\n\n        async function agregarTipo(categoria) {\n            const inputId = `nuevo${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`;\n            const input = document.getElementById(inputId);\n            const nuevoTipo = input.value.trim();\n            \n            if (!nuevoTipo) {\n                showMessage(\'Ingrese un tipo de problema\', \'error\');\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, tipo: nuevoTipo })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo agregado exitosamente\', \'success\');\n                    input.value = \'\';\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al agregar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n\n        async function eliminarTipo(categoria, index) {\n            const tipo = currentTipos[categoria][index];\n            if (!confirm(`¬øEst√° seguro de eliminar "${tipo}"?`)) {\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'DELETE\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, index })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo eliminado exitosamente\', \'success\');\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al eliminar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Datos de departamentos\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera"]\n        };\n\n        let currentDestinatarios = {};\n        let currentVeedores = [];\n        let currentTipos = {\n            primaria: [],\n            complementaria: [],\n            medicamentos: []\n        };\n\n        // Inicializar\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            loadAllData();\n        });\n\n        function initializeDepartments() {\n            const selects = [\'departamentoSelect\', \'veedorDepartamento\'];\n            selects.forEach(selectId => {\n                const select = document.getElementById(selectId);\n                Object.keys(DEPARTAMENTOS).forEach(dept => {\n                    const option = document.createElement(\'option\');\n                    option.value = dept;\n                    option.textContent = dept;\n                    select.appendChild(option);\n                });\n            });\n        }\n\n        function showSection(sectionName) {\n            // Ocultar todas las secciones\n            document.querySelectorAll(\'.section\').forEach(section => {\n                section.classList.remove(\'active\');\n            });\n            \n            // Remover clase active de todos los botones\n            document.querySelectorAll(\'.nav-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Mostrar secci√≥n seleccionada\n            document.getElementById(sectionName).classList.add(\'active\');\n            \n            // Activar bot√≥n correspondiente\n            event.target.classList.add(\'active\');\n            \n            // Cargar datos espec√≠ficos de la secci√≥n\n            if (sectionName === \'estadisticas\') {\n                loadEstadisticas();\n            } else if (sectionName === \'tipos-quejas\') {\n                loadTiposQuejas();\n            }\n        }\n\n        function loadDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            const form = document.getElementById(\'destinatarioForm\');\n            \n            if (!departamento) {\n                form.style.display = \'none\';\n                return;\n            }\n            \n            form.style.display = \'block\';\n            \n            // Cargar datos existentes si los hay\n            if (currentDestinatarios[departamento]) {\n                const data = currentDestinatarios[departamento];\n                document.getElementById(\'correoP rincipal\').value = data.principal || \'\';\n                document.getElementById(\'correosCopia\').value = data.copia ? data.copia.join(\', \') : \'\';\n                document.getElementById(\'responsable\').value = data.responsable || \'\';\n            } else {\n                document.getElementById(\'destinatariosForm\').reset();\n            }\n        }\n\n        function loadAllData() {\n            // Cargar destinatarios\n            fetch(\'/api/admin/destinatarios\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentDestinatarios = data.destinatarios || {};\n                        updateDestinatariosList();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando destinatarios:\', error));\n\n            // Cargar veedores\n            loadVeedores();\n        }\n\n        function updateDestinatariosList() {\n            const list = document.getElementById(\'destinatariosList\');\n            list.innerHTML = \'\';\n            \n            Object.keys(currentDestinatarios).forEach(dept => {\n                const data = currentDestinatarios[dept];\n                const card = document.createElement(\'div\');\n                card.className = \'destinatario-card\';\n                card.innerHTML = `\n                    <div class="destinatario-header">\n                        <div class="destinatario-name">${dept}</div>\n                        <button class="btn btn-danger" onclick="eliminarDestinatarioDept(\'${dept}\')">Eliminar</button>\n                    </div>\n                    <p><strong>Principal:</strong> ${data.principal || \'No configurado\'}</p>\n                    <p><strong>Copia:</strong> ${data.copia ? data.copia.join(\', \') : \'No configurado\'}</p>\n                    <p><strong>Responsable:</strong> ${data.responsable || \'No configurado\'}</p>\n                `;\n                list.appendChild(card);\n            });\n        }\n\n        function loadVeedores() {\n            fetch(\'/api/admin/veedores\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentVeedores = data.veedores || [];\n                        updateVeedoresTable();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando veedores:\', error));\n        }\n\n        function updateVeedoresTable() {\n            const tbody = document.getElementById(\'veedoresTable\');\n            tbody.innerHTML = \'\';\n            \n            currentVeedores.forEach((veedor, index) => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${veedor.departamento}</td>\n                    <td>${veedor.nombre}</td>\n                    <td>${veedor.correo}</td>\n                    <td>${veedor.telefono || \'-\'}</td>\n                    <td>${veedor.cargo || \'-\'}</td>\n                    <td>\n                        <button class="btn" onclick="editarVeedor(${index})">Editar</button>\n                        <button class="btn btn-danger" onclick="eliminarVeedor(${index})">Eliminar</button>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            setTimeout(() => {\n                messageArea.innerHTML = \'\';\n            }, 5000);\n        }\n\n        // Formulario de destinatarios\n        document.getElementById(\'destinatariosForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) {\n                showMessage(\'Seleccione un departamento\', \'error\');\n                return;\n            }\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: departamento,\n                principal: formData.get(\'principal\'),\n                copia: formData.get(\'copia\').split(\',\').map(email => email.trim()).filter(email => email),\n                responsable: formData.get(\'responsable\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/destinatarios\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Destinatarios guardados exitosamente\', \'success\');\n                    currentDestinatarios[departamento] = {\n                        principal: data.principal,\n                        copia: data.copia,\n                        responsable: data.responsable\n                    };\n                    updateDestinatariosList();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        // Formulario de veedores\n        document.getElementById(\'veedorForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: formData.get(\'departamento\'),\n                nombre: formData.get(\'nombre\'),\n                cedula: formData.get(\'cedula\'),\n                correo: formData.get(\'correo\'),\n                telefono: formData.get(\'telefono\'),\n                cargo: formData.get(\'cargo\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/veedores\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Veedor guardado exitosamente\', \'success\');\n                    loadVeedores();\n                    this.reset();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        function eliminarDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) return;\n            \n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                            document.getElementById(\'destinatariosForm\').reset();\n                        }\n                    });\n            }\n        }\n\n        function eliminarDestinatarioDept(departamento) {\n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                        }\n                    });\n            }\n        }\n\n        function editarVeedor(index) {\n            const veedor = currentVeedores[index];\n            document.getElementById(\'veedorDepartamento\').value = veedor.departamento;\n            document.getElementById(\'veedorNombre\').value = veedor.nombre;\n            document.getElementById(\'veedorCedula\').value = veedor.cedula;\n            document.getElementById(\'veedorCorreo\').value = veedor.correo;\n            document.getElementById(\'veedorTelefono\').value = veedor.telefono || \'\';\n            document.getElementById(\'veedorCargo\').value = veedor.cargo || \'\';\n        }\n\n        function eliminarVeedor(index) {\n            const veedor = currentVeedores[index];\n            if (confirm(`¬øEst√° seguro de eliminar a ${veedor.nombre}?`)) {\n                fetch(`/api/admin/veedores/${veedor.cedula}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Veedor eliminado\', \'success\');\n                            loadVeedores();\n                        }\n                    });\n            }\n        }\n\n        function limpiarFormularioVeedor() {\n            document.getElementById(\'veedorForm\').reset();\n        }\n\n        // Funciones para estad√≠sticas\n        async function loadEstadisticas() {\n            try {\n                const response = await fetch(\'/api/admin/estadisticas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    updateEstadisticasDisplay(data.estadisticas);\n                    createCharts(data.estadisticas);\n                    updateQuejasTable(data.estadisticas.quejasRecientes);\n                }\n            } catch (error) {\n                console.error(\'Error cargando estad√≠sticas:\', error);\n            }\n        }\n\n        function updateEstadisticasDisplay(stats) {\n            document.getElementById(\'totalQuejas\').textContent = stats.totalQuejas;\n            document.getElementById(\'quejasMes\').textContent = stats.quejasMes;\n            document.getElementById(\'promedioDiario\').textContent = stats.promedioDiario.toFixed(1);\n            document.getElementById(\'totalUsuarios\').textContent = stats.totalUsuarios;\n        }\n\n        function createCharts(stats) {\n            // Gr√°fico de departamentos\n            createBarChart(\'departamentosChart\', \'Departamentos\', stats.porDepartamento);\n            \n            // Gr√°fico de tipos de atenci√≥n\n            createPieChart(\'tiposChart\', stats.porTipo);\n            \n            // Gr√°fico de tendencia\n            createLineChart(\'tendenciaChart\', stats.tendencia);\n        }\n\n        function createBarChart(canvasId, label, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            // Limpiar canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const labels = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const barWidth = canvas.width / labels.length * 0.8;\n            const barSpacing = canvas.width / labels.length * 0.2;\n            \n            labels.forEach((label, index) => {\n                const barHeight = (values[index] / maxValue) * (canvas.height - 60);\n                const x = index * (barWidth + barSpacing) + barSpacing/2;\n                const y = canvas.height - barHeight - 30;\n                \n                // Dibujar barra\n                ctx.fillStyle = \'#007bff\';\n                ctx.fillRect(x, y, barWidth, barHeight);\n                \n                // Dibujar valor\n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(values[index], x + barWidth/2, y - 5);\n                \n                // Dibujar etiqueta\n                ctx.save();\n                ctx.translate(x + barWidth/2, canvas.height - 10);\n                ctx.rotate(-Math.PI/6);\n                ctx.fillText(label.substring(0, 8), 0, 0);\n                ctx.restore();\n            });\n        }\n\n        function createPieChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const total = Object.values(data).reduce((sum, val) => sum + val, 0);\n            \n            if (total === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const centerX = canvas.width / 2;\n            const centerY = canvas.height / 2;\n            const radius = Math.min(centerX, centerY) - 40;\n            \n            let currentAngle = 0;\n            const colors = [\'#007bff\', \'#28a745\', \'#ffc107\', \'#dc3545\', \'#6f42c1\'];\n            \n            Object.entries(data).forEach(([label, value], index) => {\n                const sliceAngle = (value / total) * 2 * Math.PI;\n                \n                // Dibujar slice\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n                ctx.closePath();\n                ctx.fillStyle = colors[index % colors.length];\n                ctx.fill();\n                \n                // Dibujar etiqueta\n                const labelAngle = currentAngle + sliceAngle / 2;\n                const labelX = centerX + Math.cos(labelAngle) * (radius + 20);\n                const labelY = centerY + Math.sin(labelAngle) * (radius + 20);\n                \n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(`${label}: ${value}`, labelX, labelY);\n                \n                currentAngle += sliceAngle;\n            });\n        }\n\n        function createLineChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const dates = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0 || dates.length === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const stepX = canvas.width / (dates.length - 1);\n            const padding = 40;\n            \n            // Dibujar l√≠nea\n            ctx.beginPath();\n            ctx.strokeStyle = \'#007bff\';\n            ctx.lineWidth = 2;\n            \n            values.forEach((value, index) => {\n                const x = index * stepX;\n                const y = canvas.height - padding - (value / maxValue) * (canvas.height - 2 * padding);\n                \n                if (index === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n                \n                // Dibujar punto\n                ctx.fillStyle = \'#007bff\';\n                ctx.beginPath();\n                ctx.arc(x, y, 3, 0, 2 * Math.PI);\n                ctx.fill();\n            });\n            \n            ctx.stroke();\n            \n            // Dibujar etiquetas de fechas\n            ctx.fillStyle = \'#666\';\n            ctx.font = \'10px Arial\';\n            ctx.textAlign = \'center\';\n            dates.forEach((date, index) => {\n                const x = index * stepX;\n                if (index % Math.ceil(dates.length / 5) === 0) {\n                    ctx.fillText(date.substring(5), x, canvas.height - 5);\n                }\n            });\n        }\n\n        function updateQuejasTable(quejas) {\n            const tbody = document.getElementById(\'quejasTableBody\');\n            tbody.innerHTML = \'\';\n            \n            quejas.forEach(queja => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${new Date(queja.fecha).toLocaleDateString()}</td>\n                    <td>${queja.departamento}</td>\n                    <td>${queja.ciudad}</td>\n                    <td>${queja.clasificacion}</td>\n                    <td>${queja.problema.substring(0, 30)}...</td>\n                    <td>${queja.usuario}</td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        // Funciones para tipos de quejas\n        async function loadTiposQuejas() {\n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    currentTipos = data.tipos;\n                    updateTiposDisplay();\n                }\n            } catch (error) {\n                console.error(\'Error cargando tipos de quejas:\', error);\n            }\n        }\n\n        function updateTiposDisplay() {\n            [\'primaria\', \'complementaria\', \'medicamentos\'].forEach(categoria => {\n                const container = document.getElementById(`tipos${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`);\n                container.innerHTML = \'\';\n                \n                currentTipos[categoria].forEach((tipo, index) => {\n                    const item = document.createElement(\'div\');\n                    item.className = \'tipo-item\';\n                    item.innerHTML = `\n                        <div class="tipo-texto">${tipo}</div>\n                        <button class="btn-small" onclick="eliminarTipo(\'${categoria}\', ${index})">Eliminar</button>\n                    `;\n                    container.appendChild(item);\n                });\n            });\n        }\n\n        async function agregarTipo(categoria) {\n            const inputId = `nuevo${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`;\n            const input = document.getElementById(inputId);\n            const nuevoTipo = input.value.trim();\n            \n            if (!nuevoTipo) {\n                showMessage(\'Ingrese un tipo de problema\', \'error\');\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, tipo: nuevoTipo })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo agregado exitosamente\', \'success\');\n                    input.value = \'\';\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al agregar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n\n        async function eliminarTipo(categoria, index) {\n            const tipo = currentTipos[categoria][index];\n            if (!confirm(`¬øEst√° seguro de eliminar "${tipo}"?`)) {\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'DELETE\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, index })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo eliminado exitosamente\', \'success\');\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al eliminar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n    </script>\n', PosixPath('admin.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 24936f5dec626be216bc435c4e47b7ddbb5d5c32120836752bf850cdd1b88c44f5e1f134acd48e9749d031f3c428e7e8eee8077bf8274f980819c5fa5021c865_0
2025-06-15 15:48:30,690 - semgrep.rule_match - DEBUG - match_key = ('\n        // Datos de departamentos\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera"]\n        };\n\n        let currentDestinatarios = {};\n        let currentVeedores = [];\n        let currentTipos = {\n            primaria: [],\n            complementaria: [],\n            medicamentos: []\n        };\n\n        // Inicializar\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            loadAllData();\n        });\n\n        function initializeDepartments() {\n            const selects = [\'departamentoSelect\', \'veedorDepartamento\'];\n            selects.forEach(selectId => {\n                const select = document.getElementById(selectId);\n                Object.keys(DEPARTAMENTOS).forEach(dept => {\n                    const option = document.createElement(\'option\');\n                    option.value = dept;\n                    option.textContent = dept;\n                    select.appendChild(option);\n                });\n            });\n        }\n\n        function showSection(sectionName) {\n            // Ocultar todas las secciones\n            document.querySelectorAll(\'.section\').forEach(section => {\n                section.classList.remove(\'active\');\n            });\n            \n            // Remover clase active de todos los botones\n            document.querySelectorAll(\'.nav-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Mostrar secci√≥n seleccionada\n            document.getElementById(sectionName).classList.add(\'active\');\n            \n            // Activar bot√≥n correspondiente\n            event.target.classList.add(\'active\');\n            \n            // Cargar datos espec√≠ficos de la secci√≥n\n            if (sectionName === \'estadisticas\') {\n                loadEstadisticas();\n            } else if (sectionName === \'tipos-quejas\') {\n                loadTiposQuejas();\n            }\n        }\n\n        function loadDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            const form = document.getElementById(\'destinatarioForm\');\n            \n            if (!departamento) {\n                form.style.display = \'none\';\n                return;\n            }\n            \n            form.style.display = \'block\';\n            \n            // Cargar datos existentes si los hay\n            if (currentDestinatarios[departamento]) {\n                const data = currentDestinatarios[departamento];\n                document.getElementById(\'correoP rincipal\').value = data.principal || \'\';\n                document.getElementById(\'correosCopia\').value = data.copia ? data.copia.join(\', \') : \'\';\n                document.getElementById(\'responsable\').value = data.responsable || \'\';\n            } else {\n                document.getElementById(\'destinatariosForm\').reset();\n            }\n        }\n\n        function loadAllData() {\n            // Cargar destinatarios\n            fetch(\'/api/admin/destinatarios\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentDestinatarios = data.destinatarios || {};\n                        updateDestinatariosList();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando destinatarios:\', error));\n\n            // Cargar veedores\n            loadVeedores();\n        }\n\n        function updateDestinatariosList() {\n            const list = document.getElementById(\'destinatariosList\');\n            list.innerHTML = \'\';\n            \n            Object.keys(currentDestinatarios).forEach(dept => {\n                const data = currentDestinatarios[dept];\n                const card = document.createElement(\'div\');\n                card.className = \'destinatario-card\';\n                card.innerHTML = `\n                    <div class="destinatario-header">\n                        <div class="destinatario-name">${dept}</div>\n                        <button class="btn btn-danger" onclick="eliminarDestinatarioDept(\'${dept}\')">Eliminar</button>\n                    </div>\n                    <p><strong>Principal:</strong> ${data.principal || \'No configurado\'}</p>\n                    <p><strong>Copia:</strong> ${data.copia ? data.copia.join(\', \') : \'No configurado\'}</p>\n                    <p><strong>Responsable:</strong> ${data.responsable || \'No configurado\'}</p>\n                `;\n                list.appendChild(card);\n            });\n        }\n\n        function loadVeedores() {\n            fetch(\'/api/admin/veedores\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentVeedores = data.veedores || [];\n                        updateVeedoresTable();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando veedores:\', error));\n        }\n\n        function updateVeedoresTable() {\n            const tbody = document.getElementById(\'veedoresTable\');\n            tbody.innerHTML = \'\';\n            \n            currentVeedores.forEach((veedor, index) => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${veedor.departamento}</td>\n                    <td>${veedor.nombre}</td>\n                    <td>${veedor.correo}</td>\n                    <td>${veedor.telefono || \'-\'}</td>\n                    <td>${veedor.cargo || \'-\'}</td>\n                    <td>\n                        <button class="btn" onclick="editarVeedor(${index})">Editar</button>\n                        <button class="btn btn-danger" onclick="eliminarVeedor(${index})">Eliminar</button>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            setTimeout(() => {\n                messageArea.innerHTML = \'\';\n            }, 5000);\n        }\n\n        // Formulario de destinatarios\n        document.getElementById(\'destinatariosForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) {\n                showMessage(\'Seleccione un departamento\', \'error\');\n                return;\n            }\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: departamento,\n                principal: formData.get(\'principal\'),\n                copia: formData.get(\'copia\').split(\',\').map(email => email.trim()).filter(email => email),\n                responsable: formData.get(\'responsable\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/destinatarios\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Destinatarios guardados exitosamente\', \'success\');\n                    currentDestinatarios[departamento] = {\n                        principal: data.principal,\n                        copia: data.copia,\n                        responsable: data.responsable\n                    };\n                    updateDestinatariosList();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        // Formulario de veedores\n        document.getElementById(\'veedorForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: formData.get(\'departamento\'),\n                nombre: formData.get(\'nombre\'),\n                cedula: formData.get(\'cedula\'),\n                correo: formData.get(\'correo\'),\n                telefono: formData.get(\'telefono\'),\n                cargo: formData.get(\'cargo\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/veedores\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Veedor guardado exitosamente\', \'success\');\n                    loadVeedores();\n                    this.reset();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        function eliminarDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) return;\n            \n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                            document.getElementById(\'destinatariosForm\').reset();\n                        }\n                    });\n            }\n        }\n\n        function eliminarDestinatarioDept(departamento) {\n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                        }\n                    });\n            }\n        }\n\n        function editarVeedor(index) {\n            const veedor = currentVeedores[index];\n            document.getElementById(\'veedorDepartamento\').value = veedor.departamento;\n            document.getElementById(\'veedorNombre\').value = veedor.nombre;\n            document.getElementById(\'veedorCedula\').value = veedor.cedula;\n            document.getElementById(\'veedorCorreo\').value = veedor.correo;\n            document.getElementById(\'veedorTelefono\').value = veedor.telefono || \'\';\n            document.getElementById(\'veedorCargo\').value = veedor.cargo || \'\';\n        }\n\n        function eliminarVeedor(index) {\n            const veedor = currentVeedores[index];\n            if (confirm(`¬øEst√° seguro de eliminar a ${veedor.nombre}?`)) {\n                fetch(`/api/admin/veedores/${veedor.cedula}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Veedor eliminado\', \'success\');\n                            loadVeedores();\n                        }\n                    });\n            }\n        }\n\n        function limpiarFormularioVeedor() {\n            document.getElementById(\'veedorForm\').reset();\n        }\n\n        // Funciones para estad√≠sticas\n        async function loadEstadisticas() {\n            try {\n                const response = await fetch(\'/api/admin/estadisticas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    updateEstadisticasDisplay(data.estadisticas);\n                    createCharts(data.estadisticas);\n                    updateQuejasTable(data.estadisticas.quejasRecientes);\n                }\n            } catch (error) {\n                console.error(\'Error cargando estad√≠sticas:\', error);\n            }\n        }\n\n        function updateEstadisticasDisplay(stats) {\n            document.getElementById(\'totalQuejas\').textContent = stats.totalQuejas;\n            document.getElementById(\'quejasMes\').textContent = stats.quejasMes;\n            document.getElementById(\'promedioDiario\').textContent = stats.promedioDiario.toFixed(1);\n            document.getElementById(\'totalUsuarios\').textContent = stats.totalUsuarios;\n        }\n\n        function createCharts(stats) {\n            // Gr√°fico de departamentos\n            createBarChart(\'departamentosChart\', \'Departamentos\', stats.porDepartamento);\n            \n            // Gr√°fico de tipos de atenci√≥n\n            createPieChart(\'tiposChart\', stats.porTipo);\n            \n            // Gr√°fico de tendencia\n            createLineChart(\'tendenciaChart\', stats.tendencia);\n        }\n\n        function createBarChart(canvasId, label, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            // Limpiar canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const labels = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const barWidth = canvas.width / labels.length * 0.8;\n            const barSpacing = canvas.width / labels.length * 0.2;\n            \n            labels.forEach((label, index) => {\n                const barHeight = (values[index] / maxValue) * (canvas.height - 60);\n                const x = index * (barWidth + barSpacing) + barSpacing/2;\n                const y = canvas.height - barHeight - 30;\n                \n                // Dibujar barra\n                ctx.fillStyle = \'#007bff\';\n                ctx.fillRect(x, y, barWidth, barHeight);\n                \n                // Dibujar valor\n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(values[index], x + barWidth/2, y - 5);\n                \n                // Dibujar etiqueta\n                ctx.save();\n                ctx.translate(x + barWidth/2, canvas.height - 10);\n                ctx.rotate(-Math.PI/6);\n                ctx.fillText(label.substring(0, 8), 0, 0);\n                ctx.restore();\n            });\n        }\n\n        function createPieChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const total = Object.values(data).reduce((sum, val) => sum + val, 0);\n            \n            if (total === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const centerX = canvas.width / 2;\n            const centerY = canvas.height / 2;\n            const radius = Math.min(centerX, centerY) - 40;\n            \n            let currentAngle = 0;\n            const colors = [\'#007bff\', \'#28a745\', \'#ffc107\', \'#dc3545\', \'#6f42c1\'];\n            \n            Object.entries(data).forEach(([label, value], index) => {\n                const sliceAngle = (value / total) * 2 * Math.PI;\n                \n                // Dibujar slice\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n                ctx.closePath();\n                ctx.fillStyle = colors[index % colors.length];\n                ctx.fill();\n                \n                // Dibujar etiqueta\n                const labelAngle = currentAngle + sliceAngle / 2;\n                const labelX = centerX + Math.cos(labelAngle) * (radius + 20);\n                const labelY = centerY + Math.sin(labelAngle) * (radius + 20);\n                \n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(`${label}: ${value}`, labelX, labelY);\n                \n                currentAngle += sliceAngle;\n            });\n        }\n\n        function createLineChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const dates = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0 || dates.length === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const stepX = canvas.width / (dates.length - 1);\n            const padding = 40;\n            \n            // Dibujar l√≠nea\n            ctx.beginPath();\n            ctx.strokeStyle = \'#007bff\';\n            ctx.lineWidth = 2;\n            \n            values.forEach((value, index) => {\n                const x = index * stepX;\n                const y = canvas.height - padding - (value / maxValue) * (canvas.height - 2 * padding);\n                \n                if (index === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n                \n                // Dibujar punto\n                ctx.fillStyle = \'#007bff\';\n                ctx.beginPath();\n                ctx.arc(x, y, 3, 0, 2 * Math.PI);\n                ctx.fill();\n            });\n            \n            ctx.stroke();\n            \n            // Dibujar etiquetas de fechas\n            ctx.fillStyle = \'#666\';\n            ctx.font = \'10px Arial\';\n            ctx.textAlign = \'center\';\n            dates.forEach((date, index) => {\n                const x = index * stepX;\n                if (index % Math.ceil(dates.length / 5) === 0) {\n                    ctx.fillText(date.substring(5), x, canvas.height - 5);\n                }\n            });\n        }\n\n        function updateQuejasTable(quejas) {\n            const tbody = document.getElementById(\'quejasTableBody\');\n            tbody.innerHTML = \'\';\n            \n            quejas.forEach(queja => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${new Date(queja.fecha).toLocaleDateString()}</td>\n                    <td>${queja.departamento}</td>\n                    <td>${queja.ciudad}</td>\n                    <td>${queja.clasificacion}</td>\n                    <td>${queja.problema.substring(0, 30)}...</td>\n                    <td>${queja.usuario}</td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        // Funciones para tipos de quejas\n        async function loadTiposQuejas() {\n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    currentTipos = data.tipos;\n                    updateTiposDisplay();\n                }\n            } catch (error) {\n                console.error(\'Error cargando tipos de quejas:\', error);\n            }\n        }\n\n        function updateTiposDisplay() {\n            [\'primaria\', \'complementaria\', \'medicamentos\'].forEach(categoria => {\n                const container = document.getElementById(`tipos${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`);\n                container.innerHTML = \'\';\n                \n                currentTipos[categoria].forEach((tipo, index) => {\n                    const item = document.createElement(\'div\');\n                    item.className = \'tipo-item\';\n                    item.innerHTML = `\n                        <div class="tipo-texto">${tipo}</div>\n                        <button class="btn-small" onclick="eliminarTipo(\'${categoria}\', ${index})">Eliminar</button>\n                    `;\n                    container.appendChild(item);\n                });\n            });\n        }\n\n        async function agregarTipo(categoria) {\n            const inputId = `nuevo${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`;\n            const input = document.getElementById(inputId);\n            const nuevoTipo = input.value.trim();\n            \n            if (!nuevoTipo) {\n                showMessage(\'Ingrese un tipo de problema\', \'error\');\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, tipo: nuevoTipo })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo agregado exitosamente\', \'success\');\n                    input.value = \'\';\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al agregar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n\n        async function eliminarTipo(categoria, index) {\n            const tipo = currentTipos[categoria][index];\n            if (!confirm(`¬øEst√° seguro de eliminar "${tipo}"?`)) {\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'DELETE\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, index })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo eliminado exitosamente\', \'success\');\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al eliminar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Datos de departamentos\n        const DEPARTAMENTOS = {\n            "Amazonas": ["Leticia", "Puerto Nari√±o"],\n            "Antioquia": ["Medell√≠n", "Bello", "Itag√º√≠", "Envigado", "Apartad√≥", "Turbo"],\n            "Arauca": ["Arauca", "Tame", "Saravena", "Fortul"],\n            "Atl√°ntico": ["Barranquilla", "Soledad", "Malambo", "Sabanagrande"],\n            "Bogot√° D.C.": ["Bogot√° D.C."],\n            "Bol√≠var": ["Cartagena", "Magangu√©", "Turbaco", "Arjona"],\n            "Boyac√°": ["Tunja", "Duitama", "Sogamoso", "Chiquinquir√°"],\n            "Caldas": ["Manizales", "Villamar√≠a", "Chinchin√°", "La Dorada"],\n            "Caquet√°": ["Florencia", "San Vicente del Cagu√°n", "Puerto Rico"],\n            "Casanare": ["Yopal", "Aguazul", "Villanueva", "Tauramena"],\n            "Cauca": ["Popay√°n", "Santander de Quilichao", "Puerto Tejada"],\n            "Cesar": ["Valledupar", "Aguachica", "Codazzi", "Bosconia"],\n            "Choc√≥": ["Quibd√≥", "Istmina", "Condoto", "Tad√≥"],\n            "C√≥rdoba": ["Monter√≠a", "Ceret√©", "Sahag√∫n", "Lorica"],\n            "Cundinamarca": ["Soacha", "Girardot", "Zipaquir√°", "Facatativ√°"],\n            "Guain√≠a": ["In√≠rida", "Barranco Minas"],\n            "Guaviare": ["San Jos√© del Guaviare", "Calamar"],\n            "Huila": ["Neiva", "Pitalito", "Garz√≥n", "La Plata"],\n            "La Guajira": ["Riohacha", "Maicao", "Uribia", "Manaure"],\n            "Magdalena": ["Santa Marta", "Ci√©naga", "Fundaci√≥n"],\n            "Meta": ["Villavicencio", "Acac√≠as", "Granada", "San Mart√≠n"],\n            "Nari√±o": ["Pasto", "Tumaco", "Ipiales", "T√∫querres"],\n            "Norte de Santander": ["C√∫cuta", "Oca√±a", "Villa del Rosario"],\n            "Putumayo": ["Mocoa", "Puerto As√≠s", "Orito"],\n            "Quind√≠o": ["Armenia", "Calarc√°", "La Tebaida"],\n            "Risaralda": ["Pereira", "Dosquebradas", "Santa Rosa de Cabal"],\n            "San Andr√©s": ["San Andr√©s", "Providencia"],\n            "Santander": ["Bucaramanga", "Floridablanca", "Gir√≥n"],\n            "Sucre": ["Sincelejo", "Corozal", "Sampu√©s"],\n            "Tolima": ["Ibagu√©", "Espinal", "Melgar", "Honda"],\n            "Valle del Cauca": ["Cali", "Palmira", "Buenaventura"],\n            "Vaup√©s": ["Mit√∫", "Carur√∫"],\n            "Vichada": ["Puerto Carre√±o", "La Primavera"]\n        };\n\n        let currentDestinatarios = {};\n        let currentVeedores = [];\n        let currentTipos = {\n            primaria: [],\n            complementaria: [],\n            medicamentos: []\n        };\n\n        // Inicializar\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            initializeDepartments();\n            loadAllData();\n        });\n\n        function initializeDepartments() {\n            const selects = [\'departamentoSelect\', \'veedorDepartamento\'];\n            selects.forEach(selectId => {\n                const select = document.getElementById(selectId);\n                Object.keys(DEPARTAMENTOS).forEach(dept => {\n                    const option = document.createElement(\'option\');\n                    option.value = dept;\n                    option.textContent = dept;\n                    select.appendChild(option);\n                });\n            });\n        }\n\n        function showSection(sectionName) {\n            // Ocultar todas las secciones\n            document.querySelectorAll(\'.section\').forEach(section => {\n                section.classList.remove(\'active\');\n            });\n            \n            // Remover clase active de todos los botones\n            document.querySelectorAll(\'.nav-btn\').forEach(btn => {\n                btn.classList.remove(\'active\');\n            });\n            \n            // Mostrar secci√≥n seleccionada\n            document.getElementById(sectionName).classList.add(\'active\');\n            \n            // Activar bot√≥n correspondiente\n            event.target.classList.add(\'active\');\n            \n            // Cargar datos espec√≠ficos de la secci√≥n\n            if (sectionName === \'estadisticas\') {\n                loadEstadisticas();\n            } else if (sectionName === \'tipos-quejas\') {\n                loadTiposQuejas();\n            }\n        }\n\n        function loadDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            const form = document.getElementById(\'destinatarioForm\');\n            \n            if (!departamento) {\n                form.style.display = \'none\';\n                return;\n            }\n            \n            form.style.display = \'block\';\n            \n            // Cargar datos existentes si los hay\n            if (currentDestinatarios[departamento]) {\n                const data = currentDestinatarios[departamento];\n                document.getElementById(\'correoP rincipal\').value = data.principal || \'\';\n                document.getElementById(\'correosCopia\').value = data.copia ? data.copia.join(\', \') : \'\';\n                document.getElementById(\'responsable\').value = data.responsable || \'\';\n            } else {\n                document.getElementById(\'destinatariosForm\').reset();\n            }\n        }\n\n        function loadAllData() {\n            // Cargar destinatarios\n            fetch(\'/api/admin/destinatarios\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentDestinatarios = data.destinatarios || {};\n                        updateDestinatariosList();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando destinatarios:\', error));\n\n            // Cargar veedores\n            loadVeedores();\n        }\n\n        function updateDestinatariosList() {\n            const list = document.getElementById(\'destinatariosList\');\n            list.innerHTML = \'\';\n            \n            Object.keys(currentDestinatarios).forEach(dept => {\n                const data = currentDestinatarios[dept];\n                const card = document.createElement(\'div\');\n                card.className = \'destinatario-card\';\n                card.innerHTML = `\n                    <div class="destinatario-header">\n                        <div class="destinatario-name">${dept}</div>\n                        <button class="btn btn-danger" onclick="eliminarDestinatarioDept(\'${dept}\')">Eliminar</button>\n                    </div>\n                    <p><strong>Principal:</strong> ${data.principal || \'No configurado\'}</p>\n                    <p><strong>Copia:</strong> ${data.copia ? data.copia.join(\', \') : \'No configurado\'}</p>\n                    <p><strong>Responsable:</strong> ${data.responsable || \'No configurado\'}</p>\n                `;\n                list.appendChild(card);\n            });\n        }\n\n        function loadVeedores() {\n            fetch(\'/api/admin/veedores\')\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        currentVeedores = data.veedores || [];\n                        updateVeedoresTable();\n                    }\n                })\n                .catch(error => console.error(\'Error cargando veedores:\', error));\n        }\n\n        function updateVeedoresTable() {\n            const tbody = document.getElementById(\'veedoresTable\');\n            tbody.innerHTML = \'\';\n            \n            currentVeedores.forEach((veedor, index) => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${veedor.departamento}</td>\n                    <td>${veedor.nombre}</td>\n                    <td>${veedor.correo}</td>\n                    <td>${veedor.telefono || \'-\'}</td>\n                    <td>${veedor.cargo || \'-\'}</td>\n                    <td>\n                        <button class="btn" onclick="editarVeedor(${index})">Editar</button>\n                        <button class="btn btn-danger" onclick="eliminarVeedor(${index})">Eliminar</button>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById(\'messageArea\');\n            messageArea.innerHTML = `<div class="alert alert-${type}">${message}</div>`;\n            \n            setTimeout(() => {\n                messageArea.innerHTML = \'\';\n            }, 5000);\n        }\n\n        // Formulario de destinatarios\n        document.getElementById(\'destinatariosForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) {\n                showMessage(\'Seleccione un departamento\', \'error\');\n                return;\n            }\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: departamento,\n                principal: formData.get(\'principal\'),\n                copia: formData.get(\'copia\').split(\',\').map(email => email.trim()).filter(email => email),\n                responsable: formData.get(\'responsable\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/destinatarios\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Destinatarios guardados exitosamente\', \'success\');\n                    currentDestinatarios[departamento] = {\n                        principal: data.principal,\n                        copia: data.copia,\n                        responsable: data.responsable\n                    };\n                    updateDestinatariosList();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        // Formulario de veedores\n        document.getElementById(\'veedorForm\').addEventListener(\'submit\', async function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const data = {\n                departamento: formData.get(\'departamento\'),\n                nombre: formData.get(\'nombre\'),\n                cedula: formData.get(\'cedula\'),\n                correo: formData.get(\'correo\'),\n                telefono: formData.get(\'telefono\'),\n                cargo: formData.get(\'cargo\')\n            };\n            \n            try {\n                const response = await fetch(\'/api/admin/veedores\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify(data)\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Veedor guardado exitosamente\', \'success\');\n                    loadVeedores();\n                    this.reset();\n                } else {\n                    showMessage(result.error || \'Error al guardar\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        });\n\n        function eliminarDestinatarios() {\n            const departamento = document.getElementById(\'departamentoSelect\').value;\n            if (!departamento) return;\n            \n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                            document.getElementById(\'destinatariosForm\').reset();\n                        }\n                    });\n            }\n        }\n\n        function eliminarDestinatarioDept(departamento) {\n            if (confirm(`¬øEst√° seguro de eliminar la configuraci√≥n de ${departamento}?`)) {\n                fetch(`/api/admin/destinatarios/${departamento}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Configuraci√≥n eliminada\', \'success\');\n                            delete currentDestinatarios[departamento];\n                            updateDestinatariosList();\n                        }\n                    });\n            }\n        }\n\n        function editarVeedor(index) {\n            const veedor = currentVeedores[index];\n            document.getElementById(\'veedorDepartamento\').value = veedor.departamento;\n            document.getElementById(\'veedorNombre\').value = veedor.nombre;\n            document.getElementById(\'veedorCedula\').value = veedor.cedula;\n            document.getElementById(\'veedorCorreo\').value = veedor.correo;\n            document.getElementById(\'veedorTelefono\').value = veedor.telefono || \'\';\n            document.getElementById(\'veedorCargo\').value = veedor.cargo || \'\';\n        }\n\n        function eliminarVeedor(index) {\n            const veedor = currentVeedores[index];\n            if (confirm(`¬øEst√° seguro de eliminar a ${veedor.nombre}?`)) {\n                fetch(`/api/admin/veedores/${veedor.cedula}`, { method: \'DELETE\' })\n                    .then(response => response.json())\n                    .then(result => {\n                        if (result.success) {\n                            showMessage(\'Veedor eliminado\', \'success\');\n                            loadVeedores();\n                        }\n                    });\n            }\n        }\n\n        function limpiarFormularioVeedor() {\n            document.getElementById(\'veedorForm\').reset();\n        }\n\n        // Funciones para estad√≠sticas\n        async function loadEstadisticas() {\n            try {\n                const response = await fetch(\'/api/admin/estadisticas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    updateEstadisticasDisplay(data.estadisticas);\n                    createCharts(data.estadisticas);\n                    updateQuejasTable(data.estadisticas.quejasRecientes);\n                }\n            } catch (error) {\n                console.error(\'Error cargando estad√≠sticas:\', error);\n            }\n        }\n\n        function updateEstadisticasDisplay(stats) {\n            document.getElementById(\'totalQuejas\').textContent = stats.totalQuejas;\n            document.getElementById(\'quejasMes\').textContent = stats.quejasMes;\n            document.getElementById(\'promedioDiario\').textContent = stats.promedioDiario.toFixed(1);\n            document.getElementById(\'totalUsuarios\').textContent = stats.totalUsuarios;\n        }\n\n        function createCharts(stats) {\n            // Gr√°fico de departamentos\n            createBarChart(\'departamentosChart\', \'Departamentos\', stats.porDepartamento);\n            \n            // Gr√°fico de tipos de atenci√≥n\n            createPieChart(\'tiposChart\', stats.porTipo);\n            \n            // Gr√°fico de tendencia\n            createLineChart(\'tendenciaChart\', stats.tendencia);\n        }\n\n        function createBarChart(canvasId, label, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            // Limpiar canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const labels = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const barWidth = canvas.width / labels.length * 0.8;\n            const barSpacing = canvas.width / labels.length * 0.2;\n            \n            labels.forEach((label, index) => {\n                const barHeight = (values[index] / maxValue) * (canvas.height - 60);\n                const x = index * (barWidth + barSpacing) + barSpacing/2;\n                const y = canvas.height - barHeight - 30;\n                \n                // Dibujar barra\n                ctx.fillStyle = \'#007bff\';\n                ctx.fillRect(x, y, barWidth, barHeight);\n                \n                // Dibujar valor\n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(values[index], x + barWidth/2, y - 5);\n                \n                // Dibujar etiqueta\n                ctx.save();\n                ctx.translate(x + barWidth/2, canvas.height - 10);\n                ctx.rotate(-Math.PI/6);\n                ctx.fillText(label.substring(0, 8), 0, 0);\n                ctx.restore();\n            });\n        }\n\n        function createPieChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const total = Object.values(data).reduce((sum, val) => sum + val, 0);\n            \n            if (total === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const centerX = canvas.width / 2;\n            const centerY = canvas.height / 2;\n            const radius = Math.min(centerX, centerY) - 40;\n            \n            let currentAngle = 0;\n            const colors = [\'#007bff\', \'#28a745\', \'#ffc107\', \'#dc3545\', \'#6f42c1\'];\n            \n            Object.entries(data).forEach(([label, value], index) => {\n                const sliceAngle = (value / total) * 2 * Math.PI;\n                \n                // Dibujar slice\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n                ctx.closePath();\n                ctx.fillStyle = colors[index % colors.length];\n                ctx.fill();\n                \n                // Dibujar etiqueta\n                const labelAngle = currentAngle + sliceAngle / 2;\n                const labelX = centerX + Math.cos(labelAngle) * (radius + 20);\n                const labelY = centerY + Math.sin(labelAngle) * (radius + 20);\n                \n                ctx.fillStyle = \'#333\';\n                ctx.font = \'12px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(`${label}: ${value}`, labelX, labelY);\n                \n                currentAngle += sliceAngle;\n            });\n        }\n\n        function createLineChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext(\'2d\');\n            \n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            const dates = Object.keys(data);\n            const values = Object.values(data);\n            const maxValue = Math.max(...values);\n            \n            if (maxValue === 0 || dates.length === 0) {\n                ctx.fillStyle = \'#666\';\n                ctx.font = \'16px Arial\';\n                ctx.textAlign = \'center\';\n                ctx.fillText(\'No hay datos disponibles\', canvas.width/2, canvas.height/2);\n                return;\n            }\n            \n            const stepX = canvas.width / (dates.length - 1);\n            const padding = 40;\n            \n            // Dibujar l√≠nea\n            ctx.beginPath();\n            ctx.strokeStyle = \'#007bff\';\n            ctx.lineWidth = 2;\n            \n            values.forEach((value, index) => {\n                const x = index * stepX;\n                const y = canvas.height - padding - (value / maxValue) * (canvas.height - 2 * padding);\n                \n                if (index === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n                \n                // Dibujar punto\n                ctx.fillStyle = \'#007bff\';\n                ctx.beginPath();\n                ctx.arc(x, y, 3, 0, 2 * Math.PI);\n                ctx.fill();\n            });\n            \n            ctx.stroke();\n            \n            // Dibujar etiquetas de fechas\n            ctx.fillStyle = \'#666\';\n            ctx.font = \'10px Arial\';\n            ctx.textAlign = \'center\';\n            dates.forEach((date, index) => {\n                const x = index * stepX;\n                if (index % Math.ceil(dates.length / 5) === 0) {\n                    ctx.fillText(date.substring(5), x, canvas.height - 5);\n                }\n            });\n        }\n\n        function updateQuejasTable(quejas) {\n            const tbody = document.getElementById(\'quejasTableBody\');\n            tbody.innerHTML = \'\';\n            \n            quejas.forEach(queja => {\n                const row = document.createElement(\'tr\');\n                row.innerHTML = `\n                    <td>${new Date(queja.fecha).toLocaleDateString()}</td>\n                    <td>${queja.departamento}</td>\n                    <td>${queja.ciudad}</td>\n                    <td>${queja.clasificacion}</td>\n                    <td>${queja.problema.substring(0, 30)}...</td>\n                    <td>${queja.usuario}</td>\n                `;\n                tbody.appendChild(row);\n            });\n        }\n\n        // Funciones para tipos de quejas\n        async function loadTiposQuejas() {\n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\');\n                const data = await response.json();\n                \n                if (data.success) {\n                    currentTipos = data.tipos;\n                    updateTiposDisplay();\n                }\n            } catch (error) {\n                console.error(\'Error cargando tipos de quejas:\', error);\n            }\n        }\n\n        function updateTiposDisplay() {\n            [\'primaria\', \'complementaria\', \'medicamentos\'].forEach(categoria => {\n                const container = document.getElementById(`tipos${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`);\n                container.innerHTML = \'\';\n                \n                currentTipos[categoria].forEach((tipo, index) => {\n                    const item = document.createElement(\'div\');\n                    item.className = \'tipo-item\';\n                    item.innerHTML = `\n                        <div class="tipo-texto">${tipo}</div>\n                        <button class="btn-small" onclick="eliminarTipo(\'${categoria}\', ${index})">Eliminar</button>\n                    `;\n                    container.appendChild(item);\n                });\n            });\n        }\n\n        async function agregarTipo(categoria) {\n            const inputId = `nuevo${categoria.charAt(0).toUpperCase() + categoria.slice(1)}`;\n            const input = document.getElementById(inputId);\n            const nuevoTipo = input.value.trim();\n            \n            if (!nuevoTipo) {\n                showMessage(\'Ingrese un tipo de problema\', \'error\');\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, tipo: nuevoTipo })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo agregado exitosamente\', \'success\');\n                    input.value = \'\';\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al agregar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n\n        async function eliminarTipo(categoria, index) {\n            const tipo = currentTipos[categoria][index];\n            if (!confirm(`¬øEst√° seguro de eliminar "${tipo}"?`)) {\n                return;\n            }\n            \n            try {\n                const response = await fetch(\'/api/admin/tipos-quejas\', {\n                    method: \'DELETE\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ categoria, index })\n                });\n                \n                const result = await response.json();\n                if (result.success) {\n                    showMessage(\'Tipo eliminado exitosamente\', \'success\');\n                    loadTiposQuejas();\n                } else {\n                    showMessage(result.error || \'Error al eliminar tipo\', \'error\');\n                }\n            } catch (error) {\n                showMessage(\'Error de conexi√≥n\', \'error\');\n            }\n        }\n    </script>\n', PosixPath('admin.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 24936f5dec626be216bc435c4e47b7ddbb5d5c32120836752bf850cdd1b88c44f5e1f134acd48e9749d031f3c428e7e8eee8077bf8274f980819c5fa5021c865_0
2025-06-15 15:48:30,698 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('copiaSeguridad1.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 2524da3ba402494ae0de78f4abc0251ff8cc3df936e30228004c37393f44a88365bc74b5c504d8f55cda315b390d049d48be1821e1644942576d2317a2cd66e9_0
2025-06-15 15:48:30,710 - semgrep.rule_match - DEBUG - match_key = ('\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            const tipoTexto = tipo === \'primaria\' ? \'Atenci√≥n Primaria\' : \'Atenci√≥n Complementaria\';\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            const tipoTexto = tipo === \'primaria\' ? \'Atenci√≥n Primaria\' : \'Atenci√≥n Complementaria\';\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('copiaSeguridad1.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6bdc5edc6fae45587d32105db9f7991fb472f5edca38cc33b6a143ec5bc259b293c0e8262198b95968d539f7c368ffdf6959d5943271eab6e0622d75b990bef0_0
2025-06-15 15:48:30,719 - semgrep.rule_match - DEBUG - match_key = ('\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            const tipoTexto = tipo === \'primaria\' ? \'Atenci√≥n Primaria\' : \'Atenci√≥n Complementaria\';\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            const tipoTexto = tipo === \'primaria\' ? \'Atenci√≥n Primaria\' : \'Atenci√≥n Complementaria\';\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('copiaSeguridad1.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6bdc5edc6fae45587d32105db9f7991fb472f5edca38cc33b6a143ec5bc259b293c0e8262198b95968d539f7c368ffdf6959d5943271eab6e0622d75b990bef0_0
2025-06-15 15:48:30,728 - semgrep.rule_match - DEBUG - match_key = ('\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            const tipoTexto = tipo === \'primaria\' ? \'Atenci√≥n Primaria\' : \'Atenci√≥n Complementaria\';\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        let archivosAdjuntos = [];\n        \n        function showPage(pageId) {\n            // Ocultar todas las p√°ginas\n            const pages = document.querySelectorAll(\'.page\');\n            pages.forEach(page => {\n                page.classList.remove(\'active\');\n            });\n            \n            // Mostrar la p√°gina seleccionada\n            document.getElementById(pageId).classList.add(\'active\');\n            \n            // Cargar contenido espec√≠fico si es necesario\n            if (pageId === \'veedores\') {\n                cargarVeedores();\n            }\n        }\n\n        async function cargarVeedores() {\n            try {\n                const veedores = await apiRequest(\'/api/veedores\');\n                let veedoresHTML = \'\';\n                \n                veedores.forEach(veedor => {\n                    veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                });\n                \n                document.getElementById(\'veedoresContent\').innerHTML = veedoresHTML;\n            } catch (error) {\n                console.error(\'Error cargando veedores:\', error);\n                document.getElementById(\'veedoresContent\').innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n            }\n        }\n\n        async function mostrarFormularioQueja(tipo) {\n            const tipoTexto = tipo === \'primaria\' ? \'Atenci√≥n Primaria\' : \'Atenci√≥n Complementaria\';\n            \n            try {\n                // Cargar departamentos y tipos de queja\n                const departamentos = await apiRequest(\'/api/departamentos\');\n                const tiposQueja = await apiRequest(`/api/tipos-queja/${tipo}`);\n                \n                // Generar opciones\n                const departamentosOptions = departamentos.map(dep => \n                    `<option value="${dep}">${dep}</option>`\n                ).join(\'\');\n                \n                const tiposQuejaOptions = tiposQueja.map(tipoQ => \n                    `<option value="${tipoQ}">${tipoQ}</option>`\n                ).join(\'\');\n                \n                const nombreCompleto = usuarioActual ? `${usuarioActual.nombre} ${usuarioActual.apellido}` : \'\';\n                const cedula = usuarioActual ? usuarioActual.cedula : \'\';\n                const correo = usuarioActual ? usuarioActual.correo : \'\';\n                const celular = usuarioActual ? usuarioActual.celular : \'\';\n                \n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL DE SALUD</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos:</p>\n                                <p><strong>Finalidad:</strong> Sus datos ser√°n utilizados para procesar, gestionar y dar seguimiento a su queja de salud.</p>\n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados, procesados y utilizados √∫nicamente para atender su solicitud.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre, c√©dula, correo, tel√©fono, tipo de usuario y detalles de la queja.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n                \n                // Configurar eventos\n                configurarEventosFormulario();\n            } catch (error) {\n                console.error(\'Error cargando formulario:\', error);\n                document.getElementById(\'quejaContent\').innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n            }\n        }\n\n        function mostrarSeleccionTipo() {\n            document.getElementById(\'quejaContent\').innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n            `;\n        }\n\n        function configurarEventosFormulario() {\n            // Configurar el evento de cambio de departamento\n            document.getElementById(\'departamento\').addEventListener(\'change\', async (e) => {\n                const departamento = e.target.value;\n                const ciudadSelect = document.getElementById(\'ciudad\');\n                \n                if (departamento) {\n                    try {\n                        const municipios = await apiRequest(`/api/municipios/${encodeURIComponent(departamento)}`);\n                        \n                        ciudadSelect.innerHTML = \'<option value="">Seleccione municipio</option>\';\n                        ciudadSelect.disabled = false;\n                        \n                        municipios.forEach(municipio => {\n                            ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                        });\n                        \n                        // Agregar opci√≥n "Otro"\n                        ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n                        \n                        // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                        ciudadSelect.addEventListener(\'change\', function() {\n                            const ciudadOtroInput = document.getElementById(\'ciudadOtro\');\n                            if (this.value === \'otro\') {\n                                ciudadOtroInput.style.display = \'block\';\n                                ciudadOtroInput.required = true;\n                                this.required = false;\n                            } else {\n                                ciudadOtroInput.style.display = \'none\';\n                                ciudadOtroInput.required = false;\n                                this.required = true;\n                                ciudadOtroInput.value = \'\';\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\'Error cargando municipios:\', error);\n                        ciudadSelect.innerHTML = \'<option value="">Error cargando municipios</option>\';\n                    }\n                } else {\n                    ciudadSelect.innerHTML = \'<option value="">Primero seleccione departamento</option>\';\n                    ciudadSelect.disabled = true;\n                }\n            });\n\n            // Configurar manejo de archivos\n            const fileUpload = document.getElementById(\'fileUpload\');\n            const fileInput = document.getElementById(\'fileInput\');\n            \n            fileUpload.addEventListener(\'click\', () => fileInput.click());\n            fileUpload.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.add(\'dragover\');\n            });\n            fileUpload.addEventListener(\'dragleave\', () => {\n                fileUpload.classList.remove(\'dragover\');\n            });\n            fileUpload.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                fileUpload.classList.remove(\'dragover\');\n                handleFiles(e.dataTransfer.files);\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                handleFiles(e.target.files);\n            });\n\n            // Configurar env√≠o del formulario\n            document.getElementById(\'quejaForm\').addEventListener(\'submit\', async (e) => {\n                await enviarQuejaAutorizada(e);\n            });\n        }\n\n        function handleFiles(files) {\n            for (let file of files) {\n                if (validateFile(file)) {\n                    archivosAdjuntos.push(file);\n                    updateFileList();\n                }\n            }\n        }\n\n        function validateFile(file) {\n            const allowedTypes = [\'application/pdf\', \'application/msword\', \n                                 \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\',\n                                 \'image/jpeg\', \'image/jpg\', \'image/png\'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                alert(\'Tipo de archivo no permitido: \' + file.name);\n                return false;\n            }\n            if (file.size > maxSize) {\n                alert(\'El archivo es muy grande (m√°ximo 5MB): \' + file.name);\n                return false;\n            }\n            return true;\n        }\n\n        function updateFileList() {\n            const fileList = document.getElementById(\'fileList\');\n            fileList.innerHTML = \'\';\n            \n            archivosAdjuntos.forEach((file, index) => {\n                const fileItem = document.createElement(\'div\');\n                fileItem.className = \'file-item\';\n                fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                fileList.appendChild(fileItem);\n            });\n        }\n\n        function removeFile(index) {\n            archivosAdjuntos.splice(index, 1);\n            updateFileList();\n        }\n\n        // Sistema de filtros de contenido inapropiado\n        function validarContenidoQueja(problema, detalle) {\n            const palabrasOfensivas = [\n                "idiota", "est√∫pido", "estupido", "imb√©cil", "imbecil", "tonto",\n                "in√∫til", "inutil", "incompetente", "basura", "maldito", "maldita",\n                "pendejo", "pendeja", "hijo de", "hijode", "marica", "maricas", "maric√≥n", "maricon",\n                "puta", "puto", "putita", "putilla", "cabron", "cabr√≥n", "gonorrea", "gonorreita",\n                "carajo", "culo", "culero", "culera", "mierda", "jodido", "jodida",\n                "inepto", "inepta", "ineptos", "ineptas", "vieja", "viejo", "viejas", "viejos",\n                "chismosa", "chismoso", "mediquillos", "mediquillo", "mediquilla", "mediquetes",\n                "perro", "perra", "animal", "bestia", "bruto", "bruta", "burro", "burra",\n                "malo", "mala", "malos", "malas", "porquer√≠a", "porqueria", "lacra", "rastrero",\n                "asqueroso", "asquerosa", "maltratador", "maltratadora", "doctorcito", "doctorcitos",\n                "medicastro", "medicastros", "matasanos", "matasano", "charlat√°n", "charlatana"\n            ];\n            \n            const expresionesProblematicas = [\n                /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                /\\besa\\s+(vieja|viejo)\\b/gi\n            ];\n            \n            const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n            const erroresEncontrados = [];\n            let sugerencia = `${problema} ${detalle}`;\n            \n            // Verificar palabras ofensivas\n            for (const palabra of palabrasOfensivas) {\n                const regex = new RegExp(`\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\')}\\\\b`, \'gi\');\n                if (regex.test(textoCompleto)) {\n                    erroresEncontrados.push(`Lenguaje inapropiado: "${palabra}"`);\n                    sugerencia = sugerencia.replace(regex, \'[t√©rmino apropiado]\');\n                }\n            }\n            \n            // Verificar expresiones problem√°ticas\n            for (const expresion of expresionesProblematicas) {\n                if (expresion.test(textoCompleto)) {\n                    erroresEncontrados.push(\'Expresi√≥n despectiva hacia profesionales de salud\');\n                    sugerencia = sugerencia.replace(expresion, \'[expresi√≥n respetuosa]\');\n                }\n            }\n            \n            // Casos espec√≠ficos de mejora\n            if (textoCompleto.includes(\'esa vieja\') && textoCompleto.includes(\'m√©dica\')) {\n                erroresEncontrados.push(\'Expresi√≥n despectiva por edad y g√©nero\');\n                sugerencia = \'Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.\';\n            }\n            \n            if (textoCompleto.includes(\'mediquillos\') || textoCompleto.includes(\'mediquillo\')) {\n                erroresEncontrados.push(\'T√©rmino despectivo hacia profesionales m√©dicos\');\n                sugerencia = \'No estoy satisfecho con el trato recibido por parte del personal m√©dico.\';\n            }\n            \n            if (textoCompleto.includes(\'como a perro\') || textoCompleto.includes(\'como perro\')) {\n                erroresEncontrados.push(\'Comparaci√≥n despectiva sobre trato recibido\');\n                sugerencia = \'Considero que el trato recibido careci√≥ de calidez humana.\';\n            }\n            \n            return {\n                esValido: erroresEncontrados.length === 0,\n                errores: erroresEncontrados,\n                sugerencia: sugerencia\n            };\n        }\n\n        async function enviarQueja(e) {\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            data.paraBeneficiario = document.querySelector(\'input[name="paraBeneficiario"]\').checked;\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'paraBeneficiario\', data.paraBeneficiario);\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        // Variables globales para sesi√≥n de usuario\n        let usuarioActual = null;\n\n        // Funci√≥n para registrar usuario\n        async function registrarUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar confirmaci√≥n de contrase√±a\n            if (data.clave !== data.confirmarClave) {\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Las contrase√±as no coinciden</div>\';\n                return;\n            }\n            \n            // Remover confirmaci√≥n de contrase√±a del env√≠o\n            delete data.confirmarClave;\n            \n            try {\n                const result = await apiRequest(\'/api/register\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'registroMessage\');\n                if (result.success) {\n                    messageDiv.innerHTML = \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                    setTimeout(() => {\n                        showPage(\'login\');\n                    }, 2000);\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al registrar usuario\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error registrando usuario:\', error);\n                document.getElementById(\'registroMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para hacer login\n        async function loginUsuario(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            try {\n                const result = await apiRequest(\'/api/login\', {\n                    method: \'POST\',\n                    body: JSON.stringify(data)\n                });\n                \n                const messageDiv = document.getElementById(\'loginMessage\');\n                if (result.success) {\n                    usuarioActual = result.usuario;\n                    actualizarInfoUsuario();\n                    showPage(\'sistema-autorizado\');\n                    cargarMisQuejas();\n                } else {\n                    messageDiv.innerHTML = `<div class="error">${result.error || \'Error al iniciar sesi√≥n\'}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error en login:\', error);\n                document.getElementById(\'loginMessage\').innerHTML = \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n            }\n        }\n\n        // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n        function actualizarInfoUsuario() {\n            if (usuarioActual) {\n                const tipoUsuarioLabel = {\n                    \'docente_activo\': \'Docente Activo\',\n                    \'docente_pensionado\': \'Docente Pensionado\',\n                    \'beneficiario\': \'Beneficiario\'\n                };\n                \n                document.getElementById(\'usuarioInfo\').textContent = \n                    `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n            }\n        }\n\n        // Funci√≥n para cargar las quejas del usuario\n        async function cargarMisQuejas() {\n            if (!usuarioActual) return;\n            \n            try {\n                const result = await apiRequest(`/api/quejas/${usuarioActual.id}`);\n                const listadoDiv = document.getElementById(\'listadoQuejas\');\n                \n                if (result.quejas && result.quejas.length > 0) {\n                    let html = \'\';\n                    result.quejas.forEach(queja => {\n                        const fecha = new Date(queja.fechaCreacion).toLocaleDateString(\'es-CO\');\n                        html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                    });\n                    listadoDiv.innerHTML = html;\n                } else {\n                    listadoDiv.innerHTML = \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                }\n            } catch (error) {\n                console.error(\'Error cargando quejas:\', error);\n                document.getElementById(\'listadoQuejas\').innerHTML = \'<div class="error">Error al cargar las quejas</div>\';\n            }\n        }\n\n        // Funci√≥n para cerrar sesi√≥n\n        function cerrarSesion() {\n            if (confirm(\'¬øEst√° seguro que desea cerrar sesi√≥n?\')) {\n                usuarioActual = null;\n                showPage(\'inicio\');\n                // Limpiar formularios\n                document.querySelectorAll(\'form\').forEach(form => form.reset());\n                document.querySelectorAll(\'.error, .success\').forEach(msg => msg.remove());\n            }\n        }\n\n        // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n        async function enviarQuejaAutorizada(e) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            \n            // Validar que se haya aceptado la pol√≠tica de datos\n            const aceptoPolitica = document.querySelector(\'input[name="aceptoPolitica"]\').checked;\n            if (!aceptoPolitica) {\n                const messageDiv = document.getElementById(\'quejaMessage\');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                return;\n            }\n            \n            data.aceptoPolitica = aceptoPolitica;\n            data.tipoUsuario = document.querySelector(\'select[name="tipoUsuario"]\').value;\n            \n            // Manejar municipio personalizado si se seleccion√≥ "Otro"\n            const ciudadSelect = document.querySelector(\'select[name="ciudad"]\');\n            const ciudadOtroInput = document.querySelector(\'input[name="ciudadOtro"]\');\n            \n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                data.ciudad = ciudadOtroInput.value.trim();\n            }\n            \n            // Validar contenido antes de enviar\n            const validacion = validarContenidoQueja(data.problema, data.detalle);\n            const messageDiv = document.getElementById(\'quejaMessage\');\n            \n            if (!validacion.esValido) {\n                const errores = validacion.errores.join(\'<br>‚Ä¢ \');\n                messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                return;\n            }\n            \n            // Crear FormData para env√≠o con archivos\n            const submitFormData = new FormData(e.target);\n            submitFormData.set(\'aceptoPolitica\', aceptoPolitica);\n            submitFormData.set(\'tipoUsuario\', data.tipoUsuario);\n            \n            // Manejar municipio personalizado\n            if (ciudadSelect.value === \'otro\' && ciudadOtroInput.value.trim()) {\n                submitFormData.set(\'ciudad\', ciudadOtroInput.value.trim());\n            }\n            \n            // Agregar archivos adjuntos\n            if (archivosAdjuntos.length > 0) {\n                archivosAdjuntos.forEach(file => {\n                    submitFormData.append(\'soporte\', file);\n                });\n            }\n            \n            try {\n                const result = await fetch(\'/api/quejas\', {\n                    method: \'POST\',\n                    body: submitFormData\n                }).then(res => res.json());\n                \n                if (result.success) {\n                    const mensaje = result.mensaje || \'Queja registrada exitosamente\';\n                    messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                    e.target.reset();\n                    archivosAdjuntos = [];\n                    updateFileList();\n                    // Actualizar lista de quejas\n                    cargarMisQuejas();\n                } else {\n                    let errorMessage = result.error || \'Error al registrar la queja\';\n                    if (result.sugerencia) {\n                        errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                    }\n                    if (result.mensaje) {\n                        errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                    }\n                    messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                }\n            } catch (error) {\n                console.error(\'Error enviando queja:\', error);\n                messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n            }\n        }\n\n        function cerrarApp() {\n            if (confirm(\'¬øEst√° seguro que desea salir del sistema?\')) {\n                window.close();\n            }\n        }\n\n        async function apiRequest(url, options = {}) {\n            try {\n                const response = await fetch(url, {\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                        ...options.headers\n                    },\n                    ...options\n                });\n                return await response.json();\n            } catch (error) {\n                console.error(\'Error en la petici√≥n:\', error);\n                return { error: \'Error de conexi√≥n con el servidor\' };\n            }\n        }\n    </script>\n', PosixPath('copiaSeguridad1.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6bdc5edc6fae45587d32105db9f7991fb472f5edca38cc33b6a143ec5bc259b293c0e8262198b95968d539f7c368ffdf6959d5943271eab6e0622d75b990bef0_0
2025-06-15 15:48:30,729 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password') match_id = 450a10a46795f7adfd882215015f08974b9f2ff25f598e09817c8b33bf9bb673b36b43cc25052f7bc699bb50457780cf964200e5a601715ec02534e424ff54e4_0
2025-06-15 15:48:30,729 - semgrep.rule_match - DEBUG - match_key = ('(?i)(?:administrator_login_password|password)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:\'|\\"|\\s|=|\\x60){0,5}("[a-z0-9=_\\-]{8,20}")(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$)', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password') match_id = 5e7994bf433f5e669bbe6ae289423bcc4425d1046df92b39807b4544286826bc6711bfe07a23a7b1952bc4ab782703c3be72d16131d32cab9fdf1b11a56e365f_0
2025-06-15 15:48:30,730 - semgrep.rule_match - DEBUG - match_key = ('(?i)(?:administrator_login_password|password)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:\'|\\"|\\s|=|\\x60){0,5}("[a-z0-9=_\\-]{8,20}")(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$)', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password') match_id = 5e7994bf433f5e669bbe6ae289423bcc4425d1046df92b39807b4544286826bc6711bfe07a23a7b1952bc4ab782703c3be72d16131d32cab9fdf1b11a56e365f_0
2025-06-15 15:48:30,730 - semgrep.rule_match - DEBUG - match_key = ('(?i)(?:administrator_login_password|password)(?:[0-9a-z\\-_\\t .]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:{1,3}=|\\|\\|:|<=|=>|:|\\?=)(?:\'|\\"|\\s|=|\\x60){0,5}("[a-z0-9=_\\-]{8,20}")(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$)', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.hashicorp-tf-password') match_id = 5e7994bf433f5e669bbe6ae289423bcc4425d1046df92b39807b4544286826bc6711bfe07a23a7b1952bc4ab782703c3be72d16131d32cab9fdf1b11a56e365f_0
2025-06-15 15:48:30,730 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = b9726a31b1e9c87329b68f640cdf48ea900b95ae78e46aefaa606c8179c1b7304412ecb1f7a0a620dede085e19909fbb1e10dbb978003941941ef8ad11568647_0
2025-06-15 15:48:30,731 - semgrep.rule_match - DEBUG - match_key = ('jhpxfxlrzzghztqj jhpxfxlrzzghztqj (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) jhpxfxlrzzghztqj (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) jhpxfxlrzzghztqj entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 1a90724ddb332298c7a99f701c85f2919d8123660cfa93900fb19daef9f00f6f58ebb1b9ea758ce43c28a53570fafb1442eae4518d940419bf556dd77e235d32_0
2025-06-15 15:48:30,732 - semgrep.rule_match - DEBUG - match_key = ('jhpxfxlrzzghztqj jhpxfxlrzzghztqj (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) jhpxfxlrzzghztqj (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) jhpxfxlrzzghztqj entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 1a90724ddb332298c7a99f701c85f2919d8123660cfa93900fb19daef9f00f6f58ebb1b9ea758ce43c28a53570fafb1442eae4518d940419bf556dd77e235d32_0
2025-06-15 15:48:30,732 - semgrep.rule_match - DEBUG - match_key = ('jhpxfxlrzzghztqj jhpxfxlrzzghztqj (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) jhpxfxlrzzghztqj (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) jhpxfxlrzzghztqj entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 1a90724ddb332298c7a99f701c85f2919d8123660cfa93900fb19daef9f00f6f58ebb1b9ea758ce43c28a53570fafb1442eae4518d940419bf556dd77e235d32_0
2025-06-15 15:48:30,733 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.problem-based-packs.insecure-transport.js-node.bypass-tls-verification') match_id = 3f28d88bbf8615dd92553e2fefd87a6574276a259a40b3f76e8ab07460ebe134cb02de7e084a1f3510f0a2e2d8d39f01f8d024b2050cd6066cc47a4947f1699f_0
2025-06-15 15:48:30,733 - semgrep.rule_match - DEBUG - match_key = ('process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;\n {rejectUnauthorized:false}\n', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.problem-based-packs.insecure-transport.js-node.bypass-tls-verification') match_id = 4366496f7615b4472e0ebb9f6016518c5a3d62149a288f331f72eb81c051364c3a76db8b47f83e89df3f1938c1f53b75398843a02bcf33f22f7d45978a4910fa_0
2025-06-15 15:48:30,734 - semgrep.rule_match - DEBUG - match_key = ('process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;\n {rejectUnauthorized:false}\n', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.problem-based-packs.insecure-transport.js-node.bypass-tls-verification') match_id = 4366496f7615b4472e0ebb9f6016518c5a3d62149a288f331f72eb81c051364c3a76db8b47f83e89df3f1938c1f53b75398843a02bcf33f22f7d45978a4910fa_0
2025-06-15 15:48:30,734 - semgrep.rule_match - DEBUG - match_key = ('process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;\n {rejectUnauthorized:false}\n', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.problem-based-packs.insecure-transport.js-node.bypass-tls-verification') match_id = 4366496f7615b4472e0ebb9f6016518c5a3d62149a288f331f72eb81c051364c3a76db8b47f83e89df3f1938c1f53b75398843a02bcf33f22f7d45978a4910fa_0
2025-06-15 15:48:30,735 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename') match_id = d510cb8b4a14dec3526fbf46d61b967d0bda7240cd7b6d468635d83df97e9acd83cd91096bafbeda819809b0176684cfbe1dad7148d4dacef4643ab052468b14_0
2025-06-15 15:48:30,736 - semgrep.rule_match - DEBUG - match_key = ('quejaData function ... (..., quejaData,...) {...} rutaArchivo fs = require(\'fs\')\n...\n fs = require(\'fs/promises\')\n...\n import fs from \'fs\'\n...\n import fs from \'fs/promises\'\n...\n import * as fs from \'fs\'\n...\n import * as fs from \'fs/promises\'\n...\n fs. ... .$METHOD("...", ...) fs. ... .access(rutaArchivo,...) fs. ... .accessSync(rutaArchivo, ...) fs. ... .appendFile(rutaArchivo,...) fs. ... .appendFileSync(rutaArchivo, ...) fs. ... .chmod(rutaArchivo,...) fs. ... .chmodSync(rutaArchivo, ...) fs. ... .chown(rutaArchivo,...) fs. ... .chownSync(rutaArchivo, ...) fs. ... .close(rutaArchivo,...) fs. ... .closeSync(rutaArchivo, ...) fs. ... .copyFile(rutaArchivo,...) fs. ... .copyFile($SMTH, rutaArchivo,...) fs. ... .copyFileSync(rutaArchivo, ...) fs. ... .copyFileSync($SMTH, rutaArchivo, ...) fs. ... .cp(rutaArchivo, ...) fs. ... .cp($SMTH, rutaArchivo, ...) fs. ... .cpSync(rutaArchivo, ...) fs. ... .cpSync($SMTH, rutaArchivo, ...) fs. ... .createReadStream(rutaArchivo,...) fs. ... .createWriteStream(rutaArchivo,...) fs. ... .exists(rutaArchivo, ...) fs. ... .existsSync(rutaArchivo, ...) fs. ... .fchmod(rutaArchivo, ...) fs. ... .fchmodSync(rutaArchivo, ...) fs. ... .fchown(rutaArchivo, ...) fs. ... .fchownSync(rutaArchivo, ...) fs. ... .fdatasync(rutaArchivo, ...) fs. ... .fdatasyncSync(rutaArchivo, ...) fs. ... .fstat(rutaArchivo, ...) fs. ... .fstatSync(rutaArchivo, ...) fs. ... .fsync(rutaArchivo, ...) fs. ... .fsyncSync(rutaArchivo, ...) fs. ... .ftruncate(rutaArchivo, ...) fs. ... .ftruncateSync(rutaArchivo, ...) fs. ... .futimes(rutaArchivo, ...) fs. ... .futimesSync(rutaArchivo, ...) fs. ... .lchmod(rutaArchivo, ...) fs. ... .lchmodSync(rutaArchivo, ...) fs. ... .lchown(rutaArchivo, ...) fs. ... .lchownSync(rutaArchivo, ...) fs. ... .link(rutaArchivo, ...) fs. ... .link($SMTH, rutaArchivo, ...) fs. ... .linkSync(rutaArchivo, ...) fs. ... .linkSync($SMTH, rutaArchivo, ...) fs. ... .lstat(rutaArchivo, ...) fs. ... .lstatSync(rutaArchivo, ...) fs. ... .lutimes(rutaArchivo, ...) fs. ... .lutimesSync(rutaArchivo, ...) fs. ... .mkdir(rutaArchivo, ...) fs. ... .mkdirSync(rutaArchivo, ...) fs. ... .mkdtemp(rutaArchivo, ...) fs. ... .mkdtempSync(rutaArchivo, ...) fs. ... .open(rutaArchivo, ...) fs. ... .openSync(rutaArchivo, ...) fs. ... .opendir(rutaArchivo, ...) fs. ... .opendirSync(rutaArchivo, ...) fs. ... .read(rutaArchivo, ...) fs. ... .read(rutaArchivo, ...) fs. ... .readFile(rutaArchivo, ...) fs. ... .readFileSync(rutaArchivo, ...) fs. ... .readSync(rutaArchivo, ...) fs. ... .readSync(rutaArchivo, ...) fs. ... .readdir(rutaArchivo, ...) fs. ... .readdirSync(rutaArchivo, ...) fs. ... .readlink(rutaArchivo, ...) fs. ... .readlinkSync(rutaArchivo, ...) fs. ... .readv(rutaArchivo, ...) fs. ... .readvSync(rutaArchivo, ...) fs. ... .realpath(rutaArchivo, ...) fs. ... .realpath.native(rutaArchivo, ...) fs. ... .realpathSync.native(rutaArchivo, ...) fs. ... .realpathync(rutaArchivo, ...) fs. ... .rename(rutaArchivo, ...) fs. ... .rename($SMTH, rutaArchivo, ...) fs. ... .renameSync(rutaArchivo, ...) fs. ... .renameSync($SMTH, rutaArchivo, ...) fs. ... .rm(rutaArchivo, ...) fs. ... .rmSync(rutaArchivo, ...) fs. ... .rmdir(rutaArchivo, ...) fs. ... .rmdirSync(rutaArchivo, ...) fs. ... .stat(rutaArchivo, ...) fs. ... .statSync(rutaArchivo, ...) fs. ... .symlink(rutaArchivo, ...) fs. ... .symlink($SMTH, rutaArchivo, ...) fs. ... .symlinkSync(rutaArchivo, ...) fs. ... .symlinkSync($SMTH, rutaArchivo, ...) fs. ... .truncate(rutaArchivo, ...) fs. ... .truncateSync(rutaArchivo, ...) fs. ... .unlink(rutaArchivo, ...) fs. ... .unlinkSync(rutaArchivo, ...) fs. ... .unwatchFile(rutaArchivo, ...) fs. ... .utimes(rutaArchivo, ...) fs. ... .utimesSync(rutaArchivo, ...) fs. ... .watch(rutaArchivo, ...) fs. ... .watchFile(rutaArchivo, ...) fs. ... .write(rutaArchivo, ...) fs. ... .writeFile(rutaArchivo, ...) fs. ... .writeFileSync(rutaArchivo, ...) fs. ... .writeSync(rutaArchivo, ...) fs. ... .writev(rutaArchivo, ...) fs. ... .writevSync(rutaArchivo, ...) rutaArchivo $METHOD("...", ...) access(rutaArchivo,...) accessSync(rutaArchivo, ...) appendFile(rutaArchivo,...) appendFileSync(rutaArchivo, ...) chmod(rutaArchivo,...) chmodSync(rutaArchivo, ...) chown(rutaArchivo,...) chownSync(rutaArchivo, ...) close(rutaArchivo,...) closeSync(rutaArchivo, ...) copyFile(rutaArchivo,...) copyFile($SMTH, rutaArchivo,...) copyFileSync(rutaArchivo, ...) copyFileSync($SMTH, rutaArchivo, ...) cp(rutaArchivo, ...) cp($SMTH, rutaArchivo, ...) cpSync(rutaArchivo, ...) cpSync($SMTH, rutaArchivo, ...) createReadStream(rutaArchivo,...) createWriteStream(rutaArchivo,...) exists(rutaArchivo, ...) existsSync(rutaArchivo, ...) fchmod(rutaArchivo, ...) fchmodSync(rutaArchivo, ...) fchown(rutaArchivo, ...) fchownSync(rutaArchivo, ...) fdatasync(rutaArchivo, ...) fdatasyncSync(rutaArchivo, ...) fstat(rutaArchivo, ...) fstatSync(rutaArchivo, ...) fsync(rutaArchivo, ...) fsyncSync(rutaArchivo, ...) ftruncate(rutaArchivo, ...) ftruncateSync(rutaArchivo, ...) futimes(rutaArchivo, ...) futimesSync(rutaArchivo, ...) lchmod(rutaArchivo, ...) lchmodSync(rutaArchivo, ...) lchown(rutaArchivo, ...) lchownSync(rutaArchivo, ...) link(rutaArchivo, ...) link($SMTH, rutaArchivo, ...) linkSync(rutaArchivo, ...) linkSync($SMTH, rutaArchivo, ...) lstat(rutaArchivo, ...) lstatSync(rutaArchivo, ...) lutimes(rutaArchivo, ...) lutimesSync(rutaArchivo, ...) mkdir(rutaArchivo, ...) mkdirSync(rutaArchivo, ...) mkdtemp(rutaArchivo, ...) mkdtempSync(rutaArchivo, ...) open(rutaArchivo, ...) openSync(rutaArchivo, ...) opendir(rutaArchivo, ...) opendirSync(rutaArchivo, ...) read(rutaArchivo, ...) read(rutaArchivo, ...) readFile(rutaArchivo, ...) readFileSync(rutaArchivo, ...) readSync(rutaArchivo, ...) readSync(rutaArchivo, ...) readdir(rutaArchivo, ...) readdirSync(rutaArchivo, ...) readlink(rutaArchivo, ...) readlinkSync(rutaArchivo, ...) readv(rutaArchivo, ...) readvSync(rutaArchivo, ...) realpath(rutaArchivo, ...) realpath.native(rutaArchivo, ...) realpathSync.native(rutaArchivo, ...) realpathync(rutaArchivo, ...) rename(rutaArchivo, ...) rename($SMTH, rutaArchivo, ...) renameSync(rutaArchivo, ...) renameSync($SMTH, rutaArchivo, ...) rm(rutaArchivo, ...) rmSync(rutaArchivo, ...) rmdir(rutaArchivo, ...) rmdirSync(rutaArchivo, ...) stat(rutaArchivo, ...) statSync(rutaArchivo, ...) symlink(rutaArchivo, ...) symlink($SMTH, rutaArchivo, ...) symlinkSync(rutaArchivo, ...) symlinkSync($SMTH, rutaArchivo, ...) truncate(rutaArchivo, ...) truncateSync(rutaArchivo, ...) unlink(rutaArchivo, ...) unlinkSync(rutaArchivo, ...) unwatchFile(rutaArchivo, ...) utimes(rutaArchivo, ...) utimesSync(rutaArchivo, ...) watch(rutaArchivo, ...) watchFile(rutaArchivo, ...) write(rutaArchivo, ...) writeFile(rutaArchivo, ...) writeFileSync(rutaArchivo, ...) writeSync(rutaArchivo, ...) writev(rutaArchivo, ...) writevSync(rutaArchivo, ...) import \'fs\'\n...\n import \'fs/promises\'\n...\n', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename') match_id = fd2a8130b31b24679016c46396afcf04a48e348e4a6dd226bac60bea195dd9f449651204fc233807b77861e1583607bb0eb27eb450cd06d00025827b4380bd42_0
2025-06-15 15:48:30,737 - semgrep.rule_match - DEBUG - match_key = ('quejaData function ... (..., quejaData,...) {...} rutaArchivo fs = require(\'fs\')\n...\n fs = require(\'fs/promises\')\n...\n import fs from \'fs\'\n...\n import fs from \'fs/promises\'\n...\n import * as fs from \'fs\'\n...\n import * as fs from \'fs/promises\'\n...\n fs. ... .$METHOD("...", ...) fs. ... .access(rutaArchivo,...) fs. ... .accessSync(rutaArchivo, ...) fs. ... .appendFile(rutaArchivo,...) fs. ... .appendFileSync(rutaArchivo, ...) fs. ... .chmod(rutaArchivo,...) fs. ... .chmodSync(rutaArchivo, ...) fs. ... .chown(rutaArchivo,...) fs. ... .chownSync(rutaArchivo, ...) fs. ... .close(rutaArchivo,...) fs. ... .closeSync(rutaArchivo, ...) fs. ... .copyFile(rutaArchivo,...) fs. ... .copyFile($SMTH, rutaArchivo,...) fs. ... .copyFileSync(rutaArchivo, ...) fs. ... .copyFileSync($SMTH, rutaArchivo, ...) fs. ... .cp(rutaArchivo, ...) fs. ... .cp($SMTH, rutaArchivo, ...) fs. ... .cpSync(rutaArchivo, ...) fs. ... .cpSync($SMTH, rutaArchivo, ...) fs. ... .createReadStream(rutaArchivo,...) fs. ... .createWriteStream(rutaArchivo,...) fs. ... .exists(rutaArchivo, ...) fs. ... .existsSync(rutaArchivo, ...) fs. ... .fchmod(rutaArchivo, ...) fs. ... .fchmodSync(rutaArchivo, ...) fs. ... .fchown(rutaArchivo, ...) fs. ... .fchownSync(rutaArchivo, ...) fs. ... .fdatasync(rutaArchivo, ...) fs. ... .fdatasyncSync(rutaArchivo, ...) fs. ... .fstat(rutaArchivo, ...) fs. ... .fstatSync(rutaArchivo, ...) fs. ... .fsync(rutaArchivo, ...) fs. ... .fsyncSync(rutaArchivo, ...) fs. ... .ftruncate(rutaArchivo, ...) fs. ... .ftruncateSync(rutaArchivo, ...) fs. ... .futimes(rutaArchivo, ...) fs. ... .futimesSync(rutaArchivo, ...) fs. ... .lchmod(rutaArchivo, ...) fs. ... .lchmodSync(rutaArchivo, ...) fs. ... .lchown(rutaArchivo, ...) fs. ... .lchownSync(rutaArchivo, ...) fs. ... .link(rutaArchivo, ...) fs. ... .link($SMTH, rutaArchivo, ...) fs. ... .linkSync(rutaArchivo, ...) fs. ... .linkSync($SMTH, rutaArchivo, ...) fs. ... .lstat(rutaArchivo, ...) fs. ... .lstatSync(rutaArchivo, ...) fs. ... .lutimes(rutaArchivo, ...) fs. ... .lutimesSync(rutaArchivo, ...) fs. ... .mkdir(rutaArchivo, ...) fs. ... .mkdirSync(rutaArchivo, ...) fs. ... .mkdtemp(rutaArchivo, ...) fs. ... .mkdtempSync(rutaArchivo, ...) fs. ... .open(rutaArchivo, ...) fs. ... .openSync(rutaArchivo, ...) fs. ... .opendir(rutaArchivo, ...) fs. ... .opendirSync(rutaArchivo, ...) fs. ... .read(rutaArchivo, ...) fs. ... .read(rutaArchivo, ...) fs. ... .readFile(rutaArchivo, ...) fs. ... .readFileSync(rutaArchivo, ...) fs. ... .readSync(rutaArchivo, ...) fs. ... .readSync(rutaArchivo, ...) fs. ... .readdir(rutaArchivo, ...) fs. ... .readdirSync(rutaArchivo, ...) fs. ... .readlink(rutaArchivo, ...) fs. ... .readlinkSync(rutaArchivo, ...) fs. ... .readv(rutaArchivo, ...) fs. ... .readvSync(rutaArchivo, ...) fs. ... .realpath(rutaArchivo, ...) fs. ... .realpath.native(rutaArchivo, ...) fs. ... .realpathSync.native(rutaArchivo, ...) fs. ... .realpathync(rutaArchivo, ...) fs. ... .rename(rutaArchivo, ...) fs. ... .rename($SMTH, rutaArchivo, ...) fs. ... .renameSync(rutaArchivo, ...) fs. ... .renameSync($SMTH, rutaArchivo, ...) fs. ... .rm(rutaArchivo, ...) fs. ... .rmSync(rutaArchivo, ...) fs. ... .rmdir(rutaArchivo, ...) fs. ... .rmdirSync(rutaArchivo, ...) fs. ... .stat(rutaArchivo, ...) fs. ... .statSync(rutaArchivo, ...) fs. ... .symlink(rutaArchivo, ...) fs. ... .symlink($SMTH, rutaArchivo, ...) fs. ... .symlinkSync(rutaArchivo, ...) fs. ... .symlinkSync($SMTH, rutaArchivo, ...) fs. ... .truncate(rutaArchivo, ...) fs. ... .truncateSync(rutaArchivo, ...) fs. ... .unlink(rutaArchivo, ...) fs. ... .unlinkSync(rutaArchivo, ...) fs. ... .unwatchFile(rutaArchivo, ...) fs. ... .utimes(rutaArchivo, ...) fs. ... .utimesSync(rutaArchivo, ...) fs. ... .watch(rutaArchivo, ...) fs. ... .watchFile(rutaArchivo, ...) fs. ... .write(rutaArchivo, ...) fs. ... .writeFile(rutaArchivo, ...) fs. ... .writeFileSync(rutaArchivo, ...) fs. ... .writeSync(rutaArchivo, ...) fs. ... .writev(rutaArchivo, ...) fs. ... .writevSync(rutaArchivo, ...) rutaArchivo $METHOD("...", ...) access(rutaArchivo,...) accessSync(rutaArchivo, ...) appendFile(rutaArchivo,...) appendFileSync(rutaArchivo, ...) chmod(rutaArchivo,...) chmodSync(rutaArchivo, ...) chown(rutaArchivo,...) chownSync(rutaArchivo, ...) close(rutaArchivo,...) closeSync(rutaArchivo, ...) copyFile(rutaArchivo,...) copyFile($SMTH, rutaArchivo,...) copyFileSync(rutaArchivo, ...) copyFileSync($SMTH, rutaArchivo, ...) cp(rutaArchivo, ...) cp($SMTH, rutaArchivo, ...) cpSync(rutaArchivo, ...) cpSync($SMTH, rutaArchivo, ...) createReadStream(rutaArchivo,...) createWriteStream(rutaArchivo,...) exists(rutaArchivo, ...) existsSync(rutaArchivo, ...) fchmod(rutaArchivo, ...) fchmodSync(rutaArchivo, ...) fchown(rutaArchivo, ...) fchownSync(rutaArchivo, ...) fdatasync(rutaArchivo, ...) fdatasyncSync(rutaArchivo, ...) fstat(rutaArchivo, ...) fstatSync(rutaArchivo, ...) fsync(rutaArchivo, ...) fsyncSync(rutaArchivo, ...) ftruncate(rutaArchivo, ...) ftruncateSync(rutaArchivo, ...) futimes(rutaArchivo, ...) futimesSync(rutaArchivo, ...) lchmod(rutaArchivo, ...) lchmodSync(rutaArchivo, ...) lchown(rutaArchivo, ...) lchownSync(rutaArchivo, ...) link(rutaArchivo, ...) link($SMTH, rutaArchivo, ...) linkSync(rutaArchivo, ...) linkSync($SMTH, rutaArchivo, ...) lstat(rutaArchivo, ...) lstatSync(rutaArchivo, ...) lutimes(rutaArchivo, ...) lutimesSync(rutaArchivo, ...) mkdir(rutaArchivo, ...) mkdirSync(rutaArchivo, ...) mkdtemp(rutaArchivo, ...) mkdtempSync(rutaArchivo, ...) open(rutaArchivo, ...) openSync(rutaArchivo, ...) opendir(rutaArchivo, ...) opendirSync(rutaArchivo, ...) read(rutaArchivo, ...) read(rutaArchivo, ...) readFile(rutaArchivo, ...) readFileSync(rutaArchivo, ...) readSync(rutaArchivo, ...) readSync(rutaArchivo, ...) readdir(rutaArchivo, ...) readdirSync(rutaArchivo, ...) readlink(rutaArchivo, ...) readlinkSync(rutaArchivo, ...) readv(rutaArchivo, ...) readvSync(rutaArchivo, ...) realpath(rutaArchivo, ...) realpath.native(rutaArchivo, ...) realpathSync.native(rutaArchivo, ...) realpathync(rutaArchivo, ...) rename(rutaArchivo, ...) rename($SMTH, rutaArchivo, ...) renameSync(rutaArchivo, ...) renameSync($SMTH, rutaArchivo, ...) rm(rutaArchivo, ...) rmSync(rutaArchivo, ...) rmdir(rutaArchivo, ...) rmdirSync(rutaArchivo, ...) stat(rutaArchivo, ...) statSync(rutaArchivo, ...) symlink(rutaArchivo, ...) symlink($SMTH, rutaArchivo, ...) symlinkSync(rutaArchivo, ...) symlinkSync($SMTH, rutaArchivo, ...) truncate(rutaArchivo, ...) truncateSync(rutaArchivo, ...) unlink(rutaArchivo, ...) unlinkSync(rutaArchivo, ...) unwatchFile(rutaArchivo, ...) utimes(rutaArchivo, ...) utimesSync(rutaArchivo, ...) watch(rutaArchivo, ...) watchFile(rutaArchivo, ...) write(rutaArchivo, ...) writeFile(rutaArchivo, ...) writeFileSync(rutaArchivo, ...) writeSync(rutaArchivo, ...) writev(rutaArchivo, ...) writevSync(rutaArchivo, ...) import \'fs\'\n...\n import \'fs/promises\'\n...\n', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename') match_id = fd2a8130b31b24679016c46396afcf04a48e348e4a6dd226bac60bea195dd9f449651204fc233807b77861e1583607bb0eb27eb450cd06d00025827b4380bd42_0
2025-06-15 15:48:30,738 - semgrep.rule_match - DEBUG - match_key = ('quejaData function ... (..., quejaData,...) {...} rutaArchivo fs = require(\'fs\')\n...\n fs = require(\'fs/promises\')\n...\n import fs from \'fs\'\n...\n import fs from \'fs/promises\'\n...\n import * as fs from \'fs\'\n...\n import * as fs from \'fs/promises\'\n...\n fs. ... .$METHOD("...", ...) fs. ... .access(rutaArchivo,...) fs. ... .accessSync(rutaArchivo, ...) fs. ... .appendFile(rutaArchivo,...) fs. ... .appendFileSync(rutaArchivo, ...) fs. ... .chmod(rutaArchivo,...) fs. ... .chmodSync(rutaArchivo, ...) fs. ... .chown(rutaArchivo,...) fs. ... .chownSync(rutaArchivo, ...) fs. ... .close(rutaArchivo,...) fs. ... .closeSync(rutaArchivo, ...) fs. ... .copyFile(rutaArchivo,...) fs. ... .copyFile($SMTH, rutaArchivo,...) fs. ... .copyFileSync(rutaArchivo, ...) fs. ... .copyFileSync($SMTH, rutaArchivo, ...) fs. ... .cp(rutaArchivo, ...) fs. ... .cp($SMTH, rutaArchivo, ...) fs. ... .cpSync(rutaArchivo, ...) fs. ... .cpSync($SMTH, rutaArchivo, ...) fs. ... .createReadStream(rutaArchivo,...) fs. ... .createWriteStream(rutaArchivo,...) fs. ... .exists(rutaArchivo, ...) fs. ... .existsSync(rutaArchivo, ...) fs. ... .fchmod(rutaArchivo, ...) fs. ... .fchmodSync(rutaArchivo, ...) fs. ... .fchown(rutaArchivo, ...) fs. ... .fchownSync(rutaArchivo, ...) fs. ... .fdatasync(rutaArchivo, ...) fs. ... .fdatasyncSync(rutaArchivo, ...) fs. ... .fstat(rutaArchivo, ...) fs. ... .fstatSync(rutaArchivo, ...) fs. ... .fsync(rutaArchivo, ...) fs. ... .fsyncSync(rutaArchivo, ...) fs. ... .ftruncate(rutaArchivo, ...) fs. ... .ftruncateSync(rutaArchivo, ...) fs. ... .futimes(rutaArchivo, ...) fs. ... .futimesSync(rutaArchivo, ...) fs. ... .lchmod(rutaArchivo, ...) fs. ... .lchmodSync(rutaArchivo, ...) fs. ... .lchown(rutaArchivo, ...) fs. ... .lchownSync(rutaArchivo, ...) fs. ... .link(rutaArchivo, ...) fs. ... .link($SMTH, rutaArchivo, ...) fs. ... .linkSync(rutaArchivo, ...) fs. ... .linkSync($SMTH, rutaArchivo, ...) fs. ... .lstat(rutaArchivo, ...) fs. ... .lstatSync(rutaArchivo, ...) fs. ... .lutimes(rutaArchivo, ...) fs. ... .lutimesSync(rutaArchivo, ...) fs. ... .mkdir(rutaArchivo, ...) fs. ... .mkdirSync(rutaArchivo, ...) fs. ... .mkdtemp(rutaArchivo, ...) fs. ... .mkdtempSync(rutaArchivo, ...) fs. ... .open(rutaArchivo, ...) fs. ... .openSync(rutaArchivo, ...) fs. ... .opendir(rutaArchivo, ...) fs. ... .opendirSync(rutaArchivo, ...) fs. ... .read(rutaArchivo, ...) fs. ... .read(rutaArchivo, ...) fs. ... .readFile(rutaArchivo, ...) fs. ... .readFileSync(rutaArchivo, ...) fs. ... .readSync(rutaArchivo, ...) fs. ... .readSync(rutaArchivo, ...) fs. ... .readdir(rutaArchivo, ...) fs. ... .readdirSync(rutaArchivo, ...) fs. ... .readlink(rutaArchivo, ...) fs. ... .readlinkSync(rutaArchivo, ...) fs. ... .readv(rutaArchivo, ...) fs. ... .readvSync(rutaArchivo, ...) fs. ... .realpath(rutaArchivo, ...) fs. ... .realpath.native(rutaArchivo, ...) fs. ... .realpathSync.native(rutaArchivo, ...) fs. ... .realpathync(rutaArchivo, ...) fs. ... .rename(rutaArchivo, ...) fs. ... .rename($SMTH, rutaArchivo, ...) fs. ... .renameSync(rutaArchivo, ...) fs. ... .renameSync($SMTH, rutaArchivo, ...) fs. ... .rm(rutaArchivo, ...) fs. ... .rmSync(rutaArchivo, ...) fs. ... .rmdir(rutaArchivo, ...) fs. ... .rmdirSync(rutaArchivo, ...) fs. ... .stat(rutaArchivo, ...) fs. ... .statSync(rutaArchivo, ...) fs. ... .symlink(rutaArchivo, ...) fs. ... .symlink($SMTH, rutaArchivo, ...) fs. ... .symlinkSync(rutaArchivo, ...) fs. ... .symlinkSync($SMTH, rutaArchivo, ...) fs. ... .truncate(rutaArchivo, ...) fs. ... .truncateSync(rutaArchivo, ...) fs. ... .unlink(rutaArchivo, ...) fs. ... .unlinkSync(rutaArchivo, ...) fs. ... .unwatchFile(rutaArchivo, ...) fs. ... .utimes(rutaArchivo, ...) fs. ... .utimesSync(rutaArchivo, ...) fs. ... .watch(rutaArchivo, ...) fs. ... .watchFile(rutaArchivo, ...) fs. ... .write(rutaArchivo, ...) fs. ... .writeFile(rutaArchivo, ...) fs. ... .writeFileSync(rutaArchivo, ...) fs. ... .writeSync(rutaArchivo, ...) fs. ... .writev(rutaArchivo, ...) fs. ... .writevSync(rutaArchivo, ...) rutaArchivo $METHOD("...", ...) access(rutaArchivo,...) accessSync(rutaArchivo, ...) appendFile(rutaArchivo,...) appendFileSync(rutaArchivo, ...) chmod(rutaArchivo,...) chmodSync(rutaArchivo, ...) chown(rutaArchivo,...) chownSync(rutaArchivo, ...) close(rutaArchivo,...) closeSync(rutaArchivo, ...) copyFile(rutaArchivo,...) copyFile($SMTH, rutaArchivo,...) copyFileSync(rutaArchivo, ...) copyFileSync($SMTH, rutaArchivo, ...) cp(rutaArchivo, ...) cp($SMTH, rutaArchivo, ...) cpSync(rutaArchivo, ...) cpSync($SMTH, rutaArchivo, ...) createReadStream(rutaArchivo,...) createWriteStream(rutaArchivo,...) exists(rutaArchivo, ...) existsSync(rutaArchivo, ...) fchmod(rutaArchivo, ...) fchmodSync(rutaArchivo, ...) fchown(rutaArchivo, ...) fchownSync(rutaArchivo, ...) fdatasync(rutaArchivo, ...) fdatasyncSync(rutaArchivo, ...) fstat(rutaArchivo, ...) fstatSync(rutaArchivo, ...) fsync(rutaArchivo, ...) fsyncSync(rutaArchivo, ...) ftruncate(rutaArchivo, ...) ftruncateSync(rutaArchivo, ...) futimes(rutaArchivo, ...) futimesSync(rutaArchivo, ...) lchmod(rutaArchivo, ...) lchmodSync(rutaArchivo, ...) lchown(rutaArchivo, ...) lchownSync(rutaArchivo, ...) link(rutaArchivo, ...) link($SMTH, rutaArchivo, ...) linkSync(rutaArchivo, ...) linkSync($SMTH, rutaArchivo, ...) lstat(rutaArchivo, ...) lstatSync(rutaArchivo, ...) lutimes(rutaArchivo, ...) lutimesSync(rutaArchivo, ...) mkdir(rutaArchivo, ...) mkdirSync(rutaArchivo, ...) mkdtemp(rutaArchivo, ...) mkdtempSync(rutaArchivo, ...) open(rutaArchivo, ...) openSync(rutaArchivo, ...) opendir(rutaArchivo, ...) opendirSync(rutaArchivo, ...) read(rutaArchivo, ...) read(rutaArchivo, ...) readFile(rutaArchivo, ...) readFileSync(rutaArchivo, ...) readSync(rutaArchivo, ...) readSync(rutaArchivo, ...) readdir(rutaArchivo, ...) readdirSync(rutaArchivo, ...) readlink(rutaArchivo, ...) readlinkSync(rutaArchivo, ...) readv(rutaArchivo, ...) readvSync(rutaArchivo, ...) realpath(rutaArchivo, ...) realpath.native(rutaArchivo, ...) realpathSync.native(rutaArchivo, ...) realpathync(rutaArchivo, ...) rename(rutaArchivo, ...) rename($SMTH, rutaArchivo, ...) renameSync(rutaArchivo, ...) renameSync($SMTH, rutaArchivo, ...) rm(rutaArchivo, ...) rmSync(rutaArchivo, ...) rmdir(rutaArchivo, ...) rmdirSync(rutaArchivo, ...) stat(rutaArchivo, ...) statSync(rutaArchivo, ...) symlink(rutaArchivo, ...) symlink($SMTH, rutaArchivo, ...) symlinkSync(rutaArchivo, ...) symlinkSync($SMTH, rutaArchivo, ...) truncate(rutaArchivo, ...) truncateSync(rutaArchivo, ...) unlink(rutaArchivo, ...) unlinkSync(rutaArchivo, ...) unwatchFile(rutaArchivo, ...) utimes(rutaArchivo, ...) utimesSync(rutaArchivo, ...) watch(rutaArchivo, ...) watchFile(rutaArchivo, ...) write(rutaArchivo, ...) writeFile(rutaArchivo, ...) writeFileSync(rutaArchivo, ...) writeSync(rutaArchivo, ...) writev(rutaArchivo, ...) writevSync(rutaArchivo, ...) import \'fs\'\n...\n import \'fs/promises\'\n...\n', PosixPath('email-service.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename') match_id = fd2a8130b31b24679016c46396afcf04a48e348e4a6dd226bac60bea195dd9f449651204fc233807b77861e1583607bb0eb27eb450cd06d00025827b4380bd42_0
2025-06-15 15:48:30,746 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('index.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = c27920f51c23680263b09c7614ae07a663100ccc5aa166fd3c8858735bfbb209bc1094cdd0a50fbb5a7aa8ef9a2fa80ea154df59e2737a5b4009299cbaa20412_0
2025-06-15 15:48:30,757 - semgrep.rule_match - DEBUG - match_key = ('\n            let archivosAdjuntos = [];\n\n            function showPage(pageId) {\n                // Ocultar todas las p√°ginas\n                const pages = document.querySelectorAll(".page");\n                pages.forEach((page) => {\n                    page.classList.remove("active");\n                });\n\n                // Mostrar la p√°gina seleccionada\n                document.getElementById(pageId).classList.add("active");\n\n                // Cargar contenido espec√≠fico si es necesario\n                if (pageId === "veedores") {\n                    cargarVeedores();\n                }\n            }\n\n            async function cargarVeedores() {\n                try {\n                    const veedores = await apiRequest("/api/veedores");\n                    let veedoresHTML = "";\n\n                    veedores.forEach((veedor) => {\n                        veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                    });\n\n                    document.getElementById("veedoresContent").innerHTML =\n                        veedoresHTML;\n                } catch (error) {\n                    console.error("Error cargando veedores:", error);\n                    document.getElementById("veedoresContent").innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n                }\n            }\n\n            async function mostrarFormularioQueja(tipo) {\n                let tipoTexto;\n                if (tipo === "primaria") {\n                    tipoTexto = "Atenci√≥n Primaria";\n                } else if (tipo === "complementaria") {\n                    tipoTexto = "Atenci√≥n Complementaria";\n                } else if (tipo === "medicamentos") {\n                    tipoTexto = "Medicamentos";\n                }\n\n                try {\n                    // Cargar departamentos y tipos de queja\n                    const departamentos =\n                        await apiRequest("/api/departamentos");\n                    const tiposQueja = await apiRequest(\n                        `/api/tipos-queja/${tipo}`,\n                    );\n\n                    // Generar opciones\n                    const departamentosOptions = departamentos\n                        .map((dep) => `<option value="${dep}">${dep}</option>`)\n                        .join("");\n\n                    const tiposQuejaOptions = tiposQueja\n                        .map(\n                            (tipoQ) =>\n                                `<option value="${tipoQ}">${tipoQ}</option>`,\n                        )\n                        .join("");\n\n                    const nombreCompleto = usuarioActual\n                        ? `${usuarioActual.nombre} ${usuarioActual.apellido}`\n                        : "";\n                    const cedula = usuarioActual ? usuarioActual.cedula : "";\n                    const correo = usuarioActual ? usuarioActual.correo : "";\n                    const celular = usuarioActual ? usuarioActual.celular : "";\n\n                    document.getElementById("quejaContent").innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL POR EL DERECHO A LA SALUD DEL MAGISTERIO</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos sobre el tratamiento de sus datos personales:</p>\n                                \n                                <p><strong>Finalidad espec√≠fica:</strong> Sus datos personales ser√°n utilizados exclusivamente para los siguientes fines relacionados con las actividades de la Veedur√≠a Nacional por el Derecho a la Salud del Magisterio:</p>\n                                <ul style="margin-left: 20px; text-align: left;">\n                                    <li>Procesar, gestionar y realizar seguimiento integral a su queja de salud</li>\n                                    <li>Invitarle a reuniones, asambleas y encuentros de veedur√≠a</li>\n                                    <li>Convocarle a capacitaciones y talleres sobre derechos en salud</li>\n                                    <li>Invitarle a foros, seminarios y eventos educativos del magisterio</li>\n                                    <li>Mantenerle informado sobre actividades que fortalezcan la veedur√≠a ciudadana</li>\n                                    <li>Comunicarle avances, resultados y acciones derivadas de su queja</li>\n                                </ul>\n                                \n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados de forma segura y procesados √∫nicamente para los fines mencionados, sin compartirse con terceros ajenos a la organizaci√≥n.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando directamente a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre completo, n√∫mero de c√©dula, correo electr√≥nico, tel√©fono celular, tipo de usuario y detalles espec√≠ficos de su queja de salud.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales para los fines espec√≠ficos de la veedur√≠a descritos anteriormente.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n\n                    // Configurar eventos\n                    configurarEventosFormulario();\n                } catch (error) {\n                    console.error("Error cargando formulario:", error);\n                    document.getElementById("quejaContent").innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n                }\n            }\n\n            function mostrarSeleccionTipo() {\n                document.getElementById("quejaContent").innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n            }\n\n            function configurarEventosFormulario() {\n                // Configurar el evento de cambio de tipo de problema\n                document\n                    .getElementById("problema")\n                    .addEventListener("change", function () {\n                        const problemaOtroGroup =\n                            document.getElementById("problemaOtroGroup");\n                        const problemaOtroInput =\n                            document.getElementById("problemaOtro");\n\n                        if (this.value === "otro") {\n                            problemaOtroGroup.style.display = "block";\n                            problemaOtroInput.required = true;\n                            this.required = false;\n                        } else {\n                            problemaOtroGroup.style.display = "none";\n                            problemaOtroInput.required = false;\n                            problemaOtroInput.value = "";\n                            this.required = true;\n                        }\n                    });\n\n                // Configurar el evento de cambio de departamento\n                document\n                    .getElementById("departamento")\n                    .addEventListener("change", async (e) => {\n                        const departamento = e.target.value;\n                        const ciudadSelect = document.getElementById("ciudad");\n\n                        if (departamento) {\n                            try {\n                                const municipios = await apiRequest(\n                                    `/api/municipios/${encodeURIComponent(departamento)}`,\n                                );\n\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Seleccione municipio</option>\';\n                                ciudadSelect.disabled = false;\n\n                                municipios.forEach((municipio) => {\n                                    ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                                });\n\n                                // Agregar opci√≥n "Otro"\n                                ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n\n                                // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                                ciudadSelect.addEventListener(\n                                    "change",\n                                    function () {\n                                        const ciudadOtroInput =\n                                            document.getElementById(\n                                                "ciudadOtro",\n                                            );\n                                        if (this.value === "otro") {\n                                            ciudadOtroInput.style.display =\n                                                "block";\n                                            ciudadOtroInput.required = true;\n                                            this.required = false;\n                                        } else {\n                                            ciudadOtroInput.style.display =\n                                                "none";\n                                            ciudadOtroInput.required = false;\n                                            this.required = true;\n                                            ciudadOtroInput.value = "";\n                                        }\n                                    },\n                                );\n                            } catch (error) {\n                                console.error(\n                                    "Error cargando municipios:",\n                                    error,\n                                );\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Error cargando municipios</option>\';\n                            }\n                        } else {\n                            ciudadSelect.innerHTML =\n                                \'<option value="">Primero seleccione departamento</option>\';\n                            ciudadSelect.disabled = true;\n                        }\n                    });\n\n                // Configurar manejo de archivos\n                const fileUpload = document.getElementById("fileUpload");\n                const fileInput = document.getElementById("fileInput");\n\n                fileUpload.addEventListener("click", () => fileInput.click());\n                fileUpload.addEventListener("dragover", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.add("dragover");\n                });\n                fileUpload.addEventListener("dragleave", () => {\n                    fileUpload.classList.remove("dragover");\n                });\n                fileUpload.addEventListener("drop", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.remove("dragover");\n                    handleFiles(e.dataTransfer.files);\n                });\n\n                fileInput.addEventListener("change", (e) => {\n                    handleFiles(e.target.files);\n                });\n\n                // Configurar env√≠o del formulario\n                document\n                    .getElementById("quejaForm")\n                    .addEventListener("submit", async (e) => {\n                        await enviarQuejaAutorizada(e);\n                    });\n            }\n\n            function handleFiles(files) {\n                for (let file of files) {\n                    if (validateFile(file)) {\n                        archivosAdjuntos.push(file);\n                        updateFileList();\n                    }\n                }\n            }\n\n            function validateFile(file) {\n                const allowedTypes = [\n                    "application/pdf",\n                    "application/msword",\n                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",\n                    "image/jpeg",\n                    "image/jpg",\n                    "image/png",\n                ];\n                const maxSize = 5 * 1024 * 1024; // 5MB\n\n                if (!allowedTypes.includes(file.type)) {\n                    alert("Tipo de archivo no permitido: " + file.name);\n                    return false;\n                }\n                if (file.size > maxSize) {\n                    alert(\n                        "El archivo es muy grande (m√°ximo 5MB): " + file.name,\n                    );\n                    return false;\n                }\n                return true;\n            }\n\n            function updateFileList() {\n                const fileList = document.getElementById("fileList");\n                fileList.innerHTML = "";\n\n                archivosAdjuntos.forEach((file, index) => {\n                    const fileItem = document.createElement("div");\n                    fileItem.className = "file-item";\n                    fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                    fileList.appendChild(fileItem);\n                });\n            }\n\n            function removeFile(index) {\n                archivosAdjuntos.splice(index, 1);\n                updateFileList();\n            }\n\n            // Sistema de filtros de contenido inapropiado\n            function validarContenidoQueja(problema, detalle) {\n                const palabrasOfensivas = [\n                    "idiota",\n                    "est√∫pido",\n                    "estupido",\n                    "imb√©cil",\n                    "imbecil",\n                    "tonto",\n                    "in√∫til",\n                    "inutil",\n                    "incompetente",\n                    "basura",\n                    "maldito",\n                    "maldita",\n                    "pendejo",\n                    "pendeja",\n                    "hijo de",\n                    "hijode",\n                    "marica",\n                    "maricas",\n                    "maric√≥n",\n                    "maricon",\n                    "puta",\n                    "puto",\n                    "putita",\n                    "putilla",\n                    "cabron",\n                    "cabr√≥n",\n                    "gonorrea",\n                    "gonorreita",\n                    "carajo",\n                    "culo",\n                    "culero",\n                    "culera",\n                    "mierda",\n                    "jodido",\n                    "jodida",\n                    "inepto",\n                    "inepta",\n                    "ineptos",\n                    "ineptas",\n                    "vieja",\n                    "viejo",\n                    "viejas",\n                    "viejos",\n                    "chismosa",\n                    "chismoso",\n                    "mediquillos",\n                    "mediquillo",\n                    "mediquilla",\n                    "mediquetes",\n                    "perro",\n                    "perra",\n                    "animal",\n                    "bestia",\n                    "bruto",\n                    "bruta",\n                    "burro",\n                    "burra",\n                    "malo",\n                    "mala",\n                    "malos",\n                    "malas",\n                    "porquer√≠a",\n                    "porqueria",\n                    "lacra",\n                    "rastrero",\n                    "asqueroso",\n                    "asquerosa",\n                    "maltratador",\n                    "maltratadora",\n                    "doctorcito",\n                    "doctorcitos",\n                    "medicastro",\n                    "medicastros",\n                    "matasanos",\n                    "matasano",\n                    "charlat√°n",\n                    "charlatana",\n                ];\n\n                const expresionesProblematicas = [\n                    /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                    /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                    /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                    /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                    /\\besa\\s+(vieja|viejo)\\b/gi,\n                ];\n\n                const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n                const erroresEncontrados = [];\n                let sugerencia = `${problema} ${detalle}`;\n\n                // Verificar palabras ofensivas\n                for (const palabra of palabrasOfensivas) {\n                    const regex = new RegExp(\n                        `\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&")}\\\\b`,\n                        "gi",\n                    );\n                    if (regex.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            `Lenguaje inapropiado: "${palabra}"`,\n                        );\n                        sugerencia = sugerencia.replace(\n                            regex,\n                            "[t√©rmino apropiado]",\n                        );\n                    }\n                }\n\n                // Verificar expresiones problem√°ticas\n                for (const expresion of expresionesProblematicas) {\n                    if (expresion.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            "Expresi√≥n despectiva hacia profesionales de salud",\n                        );\n                        sugerencia = sugerencia.replace(\n                            expresion,\n                            "[expresi√≥n respetuosa]",\n                        );\n                    }\n                }\n\n                // Casos espec√≠ficos de mejora\n                if (\n                    textoCompleto.includes("esa vieja") &&\n                    textoCompleto.includes("m√©dica")\n                ) {\n                    erroresEncontrados.push(\n                        "Expresi√≥n despectiva por edad y g√©nero",\n                    );\n                    sugerencia =\n                        "Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.";\n                }\n\n                if (\n                    textoCompleto.includes("mediquillos") ||\n                    textoCompleto.includes("mediquillo")\n                ) {\n                    erroresEncontrados.push(\n                        "T√©rmino despectivo hacia profesionales m√©dicos",\n                    );\n                    sugerencia =\n                        "No estoy satisfecho con el trato recibido por parte del personal m√©dico.";\n                }\n\n                if (\n                    textoCompleto.includes("como a perro") ||\n                    textoCompleto.includes("como perro")\n                ) {\n                    erroresEncontrados.push(\n                        "Comparaci√≥n despectiva sobre trato recibido",\n                    );\n                    sugerencia =\n                        "Considero que el trato recibido careci√≥ de calidez humana.";\n                }\n\n                return {\n                    esValido: erroresEncontrados.length === 0,\n                    errores: erroresEncontrados,\n                    sugerencia: sugerencia,\n                };\n            }\n\n            async function enviarQueja(e) {\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n                data.paraBeneficiario = document.querySelector(\n                    \'input[name="paraBeneficiario"]\',\n                ).checked;\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    data.problema = problemaOtroInput.value.trim();\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("paraBeneficiario", data.paraBeneficiario);\n\n                // Establecer el problema correcto (personalizado si es "otro")\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            // Variables globales para sesi√≥n de usuario\n            let usuarioActual = null;\n\n            // Funci√≥n para registrar usuario\n            async function registrarUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar confirmaci√≥n de contrase√±a\n                if (data.clave !== data.confirmarClave) {\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Las contrase√±as no coinciden</div>\';\n                    return;\n                }\n\n                // Remover confirmaci√≥n de contrase√±a del env√≠o\n                delete data.confirmarClave;\n\n                try {\n                    const result = await apiRequest("/api/register", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv =\n                        document.getElementById("registroMessage");\n                    if (result.success) {\n                        messageDiv.innerHTML =\n                            \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                        setTimeout(() => {\n                            showPage("login");\n                        }, 2000);\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al registrar usuario"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error registrando usuario:", error);\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para hacer login\n            async function loginUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                try {\n                    const result = await apiRequest("/api/login", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv = document.getElementById("loginMessage");\n                    if (result.success) {\n                        usuarioActual = result.usuario;\n                        actualizarInfoUsuario();\n                        showPage("sistema-autorizado");\n                        cargarMisQuejas();\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al iniciar sesi√≥n"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error en login:", error);\n                    document.getElementById("loginMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n            function actualizarInfoUsuario() {\n                if (usuarioActual) {\n                    const tipoUsuarioLabel = {\n                        docente_activo: "Docente Activo",\n                        docente_pensionado: "Docente Pensionado",\n                        beneficiario: "Beneficiario",\n                    };\n\n                    document.getElementById("usuarioInfo").textContent =\n                        `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n                }\n            }\n\n            // Funci√≥n para cargar las quejas del usuario\n            async function cargarMisQuejas() {\n                if (!usuarioActual) return;\n\n                try {\n                    const result = await apiRequest(\n                        `/api/quejas/${usuarioActual.id}`,\n                    );\n                    const listadoDiv = document.getElementById("listadoQuejas");\n\n                    if (result.quejas && result.quejas.length > 0) {\n                        let html = "";\n                        result.quejas.forEach((queja) => {\n                            const fecha = new Date(\n                                queja.fechaCreacion,\n                            ).toLocaleDateString("es-CO");\n                            html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                        });\n                        listadoDiv.innerHTML = html;\n                    } else {\n                        listadoDiv.innerHTML =\n                            \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                    }\n                } catch (error) {\n                    console.error("Error cargando quejas:", error);\n                    document.getElementById("listadoQuejas").innerHTML =\n                        \'<div class="error">Error al cargar las quejas</div>\';\n                }\n            }\n\n            // Funci√≥n para cerrar sesi√≥n\n            function cerrarSesion() {\n                if (confirm("¬øEst√° seguro que desea cerrar sesi√≥n?")) {\n                    usuarioActual = null;\n                    showPage("inicio");\n                    // Limpiar formularios\n                    document\n                        .querySelectorAll("form")\n                        .forEach((form) => form.reset());\n                    document\n                        .querySelectorAll(".error, .success")\n                        .forEach((msg) => msg.remove());\n                }\n            }\n\n            // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n            async function enviarQuejaAutorizada(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar que se haya aceptado la pol√≠tica de datos\n                const aceptoPolitica = document.querySelector(\n                    \'input[name="aceptoPolitica"]\',\n                ).checked;\n                if (!aceptoPolitica) {\n                    const messageDiv = document.getElementById("quejaMessage");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                    return;\n                }\n\n                data.aceptoPolitica = aceptoPolitica;\n                data.tipoUsuario = document.querySelector(\n                    \'select[name="tipoUsuario"]\',\n                ).value;\n\n                // Manejar municipio personalizado si se seleccion√≥ "Otro"\n                const ciudadSelect = document.querySelector(\n                    \'select[name="ciudad"]\',\n                );\n                const ciudadOtroInput = document.querySelector(\n                    \'input[name="ciudadOtro"]\',\n                );\n\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    data.ciudad = ciudadOtroInput.value.trim();\n                }\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("aceptoPolitica", aceptoPolitica);\n                submitFormData.set("tipoUsuario", data.tipoUsuario);\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Manejar municipio personalizado\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    submitFormData.set("ciudad", ciudadOtroInput.value.trim());\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                        // Actualizar lista de quejas\n                        cargarMisQuejas();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            function cerrarApp() {\n                if (confirm("¬øEst√° seguro que desea salir del sistema?")) {\n                    window.close();\n                }\n            }\n\n            async function apiRequest(url, options = {}) {\n                try {\n                    const response = await fetch(url, {\n                        headers: {\n                            "Content-Type": "application/json",\n                            ...options.headers,\n                        },\n                        ...options,\n                    });\n                    return await response.json();\n                } catch (error) {\n                    console.error("Error en la petici√≥n:", error);\n                    return { error: "Error de conexi√≥n con el servidor" };\n                }\n            }\n         $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n            let archivosAdjuntos = [];\n\n            function showPage(pageId) {\n                // Ocultar todas las p√°ginas\n                const pages = document.querySelectorAll(".page");\n                pages.forEach((page) => {\n                    page.classList.remove("active");\n                });\n\n                // Mostrar la p√°gina seleccionada\n                document.getElementById(pageId).classList.add("active");\n\n                // Cargar contenido espec√≠fico si es necesario\n                if (pageId === "veedores") {\n                    cargarVeedores();\n                }\n            }\n\n            async function cargarVeedores() {\n                try {\n                    const veedores = await apiRequest("/api/veedores");\n                    let veedoresHTML = "";\n\n                    veedores.forEach((veedor) => {\n                        veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                    });\n\n                    document.getElementById("veedoresContent").innerHTML =\n                        veedoresHTML;\n                } catch (error) {\n                    console.error("Error cargando veedores:", error);\n                    document.getElementById("veedoresContent").innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n                }\n            }\n\n            async function mostrarFormularioQueja(tipo) {\n                let tipoTexto;\n                if (tipo === "primaria") {\n                    tipoTexto = "Atenci√≥n Primaria";\n                } else if (tipo === "complementaria") {\n                    tipoTexto = "Atenci√≥n Complementaria";\n                } else if (tipo === "medicamentos") {\n                    tipoTexto = "Medicamentos";\n                }\n\n                try {\n                    // Cargar departamentos y tipos de queja\n                    const departamentos =\n                        await apiRequest("/api/departamentos");\n                    const tiposQueja = await apiRequest(\n                        `/api/tipos-queja/${tipo}`,\n                    );\n\n                    // Generar opciones\n                    const departamentosOptions = departamentos\n                        .map((dep) => `<option value="${dep}">${dep}</option>`)\n                        .join("");\n\n                    const tiposQuejaOptions = tiposQueja\n                        .map(\n                            (tipoQ) =>\n                                `<option value="${tipoQ}">${tipoQ}</option>`,\n                        )\n                        .join("");\n\n                    const nombreCompleto = usuarioActual\n                        ? `${usuarioActual.nombre} ${usuarioActual.apellido}`\n                        : "";\n                    const cedula = usuarioActual ? usuarioActual.cedula : "";\n                    const correo = usuarioActual ? usuarioActual.correo : "";\n                    const celular = usuarioActual ? usuarioActual.celular : "";\n\n                    document.getElementById("quejaContent").innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL POR EL DERECHO A LA SALUD DEL MAGISTERIO</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos sobre el tratamiento de sus datos personales:</p>\n                                \n                                <p><strong>Finalidad espec√≠fica:</strong> Sus datos personales ser√°n utilizados exclusivamente para los siguientes fines relacionados con las actividades de la Veedur√≠a Nacional por el Derecho a la Salud del Magisterio:</p>\n                                <ul style="margin-left: 20px; text-align: left;">\n                                    <li>Procesar, gestionar y realizar seguimiento integral a su queja de salud</li>\n                                    <li>Invitarle a reuniones, asambleas y encuentros de veedur√≠a</li>\n                                    <li>Convocarle a capacitaciones y talleres sobre derechos en salud</li>\n                                    <li>Invitarle a foros, seminarios y eventos educativos del magisterio</li>\n                                    <li>Mantenerle informado sobre actividades que fortalezcan la veedur√≠a ciudadana</li>\n                                    <li>Comunicarle avances, resultados y acciones derivadas de su queja</li>\n                                </ul>\n                                \n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados de forma segura y procesados √∫nicamente para los fines mencionados, sin compartirse con terceros ajenos a la organizaci√≥n.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando directamente a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre completo, n√∫mero de c√©dula, correo electr√≥nico, tel√©fono celular, tipo de usuario y detalles espec√≠ficos de su queja de salud.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales para los fines espec√≠ficos de la veedur√≠a descritos anteriormente.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n\n                    // Configurar eventos\n                    configurarEventosFormulario();\n                } catch (error) {\n                    console.error("Error cargando formulario:", error);\n                    document.getElementById("quejaContent").innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n                }\n            }\n\n            function mostrarSeleccionTipo() {\n                document.getElementById("quejaContent").innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n            }\n\n            function configurarEventosFormulario() {\n                // Configurar el evento de cambio de tipo de problema\n                document\n                    .getElementById("problema")\n                    .addEventListener("change", function () {\n                        const problemaOtroGroup =\n                            document.getElementById("problemaOtroGroup");\n                        const problemaOtroInput =\n                            document.getElementById("problemaOtro");\n\n                        if (this.value === "otro") {\n                            problemaOtroGroup.style.display = "block";\n                            problemaOtroInput.required = true;\n                            this.required = false;\n                        } else {\n                            problemaOtroGroup.style.display = "none";\n                            problemaOtroInput.required = false;\n                            problemaOtroInput.value = "";\n                            this.required = true;\n                        }\n                    });\n\n                // Configurar el evento de cambio de departamento\n                document\n                    .getElementById("departamento")\n                    .addEventListener("change", async (e) => {\n                        const departamento = e.target.value;\n                        const ciudadSelect = document.getElementById("ciudad");\n\n                        if (departamento) {\n                            try {\n                                const municipios = await apiRequest(\n                                    `/api/municipios/${encodeURIComponent(departamento)}`,\n                                );\n\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Seleccione municipio</option>\';\n                                ciudadSelect.disabled = false;\n\n                                municipios.forEach((municipio) => {\n                                    ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                                });\n\n                                // Agregar opci√≥n "Otro"\n                                ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n\n                                // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                                ciudadSelect.addEventListener(\n                                    "change",\n                                    function () {\n                                        const ciudadOtroInput =\n                                            document.getElementById(\n                                                "ciudadOtro",\n                                            );\n                                        if (this.value === "otro") {\n                                            ciudadOtroInput.style.display =\n                                                "block";\n                                            ciudadOtroInput.required = true;\n                                            this.required = false;\n                                        } else {\n                                            ciudadOtroInput.style.display =\n                                                "none";\n                                            ciudadOtroInput.required = false;\n                                            this.required = true;\n                                            ciudadOtroInput.value = "";\n                                        }\n                                    },\n                                );\n                            } catch (error) {\n                                console.error(\n                                    "Error cargando municipios:",\n                                    error,\n                                );\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Error cargando municipios</option>\';\n                            }\n                        } else {\n                            ciudadSelect.innerHTML =\n                                \'<option value="">Primero seleccione departamento</option>\';\n                            ciudadSelect.disabled = true;\n                        }\n                    });\n\n                // Configurar manejo de archivos\n                const fileUpload = document.getElementById("fileUpload");\n                const fileInput = document.getElementById("fileInput");\n\n                fileUpload.addEventListener("click", () => fileInput.click());\n                fileUpload.addEventListener("dragover", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.add("dragover");\n                });\n                fileUpload.addEventListener("dragleave", () => {\n                    fileUpload.classList.remove("dragover");\n                });\n                fileUpload.addEventListener("drop", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.remove("dragover");\n                    handleFiles(e.dataTransfer.files);\n                });\n\n                fileInput.addEventListener("change", (e) => {\n                    handleFiles(e.target.files);\n                });\n\n                // Configurar env√≠o del formulario\n                document\n                    .getElementById("quejaForm")\n                    .addEventListener("submit", async (e) => {\n                        await enviarQuejaAutorizada(e);\n                    });\n            }\n\n            function handleFiles(files) {\n                for (let file of files) {\n                    if (validateFile(file)) {\n                        archivosAdjuntos.push(file);\n                        updateFileList();\n                    }\n                }\n            }\n\n            function validateFile(file) {\n                const allowedTypes = [\n                    "application/pdf",\n                    "application/msword",\n                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",\n                    "image/jpeg",\n                    "image/jpg",\n                    "image/png",\n                ];\n                const maxSize = 5 * 1024 * 1024; // 5MB\n\n                if (!allowedTypes.includes(file.type)) {\n                    alert("Tipo de archivo no permitido: " + file.name);\n                    return false;\n                }\n                if (file.size > maxSize) {\n                    alert(\n                        "El archivo es muy grande (m√°ximo 5MB): " + file.name,\n                    );\n                    return false;\n                }\n                return true;\n            }\n\n            function updateFileList() {\n                const fileList = document.getElementById("fileList");\n                fileList.innerHTML = "";\n\n                archivosAdjuntos.forEach((file, index) => {\n                    const fileItem = document.createElement("div");\n                    fileItem.className = "file-item";\n                    fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                    fileList.appendChild(fileItem);\n                });\n            }\n\n            function removeFile(index) {\n                archivosAdjuntos.splice(index, 1);\n                updateFileList();\n            }\n\n            // Sistema de filtros de contenido inapropiado\n            function validarContenidoQueja(problema, detalle) {\n                const palabrasOfensivas = [\n                    "idiota",\n                    "est√∫pido",\n                    "estupido",\n                    "imb√©cil",\n                    "imbecil",\n                    "tonto",\n                    "in√∫til",\n                    "inutil",\n                    "incompetente",\n                    "basura",\n                    "maldito",\n                    "maldita",\n                    "pendejo",\n                    "pendeja",\n                    "hijo de",\n                    "hijode",\n                    "marica",\n                    "maricas",\n                    "maric√≥n",\n                    "maricon",\n                    "puta",\n                    "puto",\n                    "putita",\n                    "putilla",\n                    "cabron",\n                    "cabr√≥n",\n                    "gonorrea",\n                    "gonorreita",\n                    "carajo",\n                    "culo",\n                    "culero",\n                    "culera",\n                    "mierda",\n                    "jodido",\n                    "jodida",\n                    "inepto",\n                    "inepta",\n                    "ineptos",\n                    "ineptas",\n                    "vieja",\n                    "viejo",\n                    "viejas",\n                    "viejos",\n                    "chismosa",\n                    "chismoso",\n                    "mediquillos",\n                    "mediquillo",\n                    "mediquilla",\n                    "mediquetes",\n                    "perro",\n                    "perra",\n                    "animal",\n                    "bestia",\n                    "bruto",\n                    "bruta",\n                    "burro",\n                    "burra",\n                    "malo",\n                    "mala",\n                    "malos",\n                    "malas",\n                    "porquer√≠a",\n                    "porqueria",\n                    "lacra",\n                    "rastrero",\n                    "asqueroso",\n                    "asquerosa",\n                    "maltratador",\n                    "maltratadora",\n                    "doctorcito",\n                    "doctorcitos",\n                    "medicastro",\n                    "medicastros",\n                    "matasanos",\n                    "matasano",\n                    "charlat√°n",\n                    "charlatana",\n                ];\n\n                const expresionesProblematicas = [\n                    /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                    /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                    /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                    /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                    /\\besa\\s+(vieja|viejo)\\b/gi,\n                ];\n\n                const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n                const erroresEncontrados = [];\n                let sugerencia = `${problema} ${detalle}`;\n\n                // Verificar palabras ofensivas\n                for (const palabra of palabrasOfensivas) {\n                    const regex = new RegExp(\n                        `\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&")}\\\\b`,\n                        "gi",\n                    );\n                    if (regex.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            `Lenguaje inapropiado: "${palabra}"`,\n                        );\n                        sugerencia = sugerencia.replace(\n                            regex,\n                            "[t√©rmino apropiado]",\n                        );\n                    }\n                }\n\n                // Verificar expresiones problem√°ticas\n                for (const expresion of expresionesProblematicas) {\n                    if (expresion.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            "Expresi√≥n despectiva hacia profesionales de salud",\n                        );\n                        sugerencia = sugerencia.replace(\n                            expresion,\n                            "[expresi√≥n respetuosa]",\n                        );\n                    }\n                }\n\n                // Casos espec√≠ficos de mejora\n                if (\n                    textoCompleto.includes("esa vieja") &&\n                    textoCompleto.includes("m√©dica")\n                ) {\n                    erroresEncontrados.push(\n                        "Expresi√≥n despectiva por edad y g√©nero",\n                    );\n                    sugerencia =\n                        "Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.";\n                }\n\n                if (\n                    textoCompleto.includes("mediquillos") ||\n                    textoCompleto.includes("mediquillo")\n                ) {\n                    erroresEncontrados.push(\n                        "T√©rmino despectivo hacia profesionales m√©dicos",\n                    );\n                    sugerencia =\n                        "No estoy satisfecho con el trato recibido por parte del personal m√©dico.";\n                }\n\n                if (\n                    textoCompleto.includes("como a perro") ||\n                    textoCompleto.includes("como perro")\n                ) {\n                    erroresEncontrados.push(\n                        "Comparaci√≥n despectiva sobre trato recibido",\n                    );\n                    sugerencia =\n                        "Considero que el trato recibido careci√≥ de calidez humana.";\n                }\n\n                return {\n                    esValido: erroresEncontrados.length === 0,\n                    errores: erroresEncontrados,\n                    sugerencia: sugerencia,\n                };\n            }\n\n            async function enviarQueja(e) {\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n                data.paraBeneficiario = document.querySelector(\n                    \'input[name="paraBeneficiario"]\',\n                ).checked;\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    data.problema = problemaOtroInput.value.trim();\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("paraBeneficiario", data.paraBeneficiario);\n\n                // Establecer el problema correcto (personalizado si es "otro")\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            // Variables globales para sesi√≥n de usuario\n            let usuarioActual = null;\n\n            // Funci√≥n para registrar usuario\n            async function registrarUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar confirmaci√≥n de contrase√±a\n                if (data.clave !== data.confirmarClave) {\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Las contrase√±as no coinciden</div>\';\n                    return;\n                }\n\n                // Remover confirmaci√≥n de contrase√±a del env√≠o\n                delete data.confirmarClave;\n\n                try {\n                    const result = await apiRequest("/api/register", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv =\n                        document.getElementById("registroMessage");\n                    if (result.success) {\n                        messageDiv.innerHTML =\n                            \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                        setTimeout(() => {\n                            showPage("login");\n                        }, 2000);\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al registrar usuario"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error registrando usuario:", error);\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para hacer login\n            async function loginUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                try {\n                    const result = await apiRequest("/api/login", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv = document.getElementById("loginMessage");\n                    if (result.success) {\n                        usuarioActual = result.usuario;\n                        actualizarInfoUsuario();\n                        showPage("sistema-autorizado");\n                        cargarMisQuejas();\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al iniciar sesi√≥n"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error en login:", error);\n                    document.getElementById("loginMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n            function actualizarInfoUsuario() {\n                if (usuarioActual) {\n                    const tipoUsuarioLabel = {\n                        docente_activo: "Docente Activo",\n                        docente_pensionado: "Docente Pensionado",\n                        beneficiario: "Beneficiario",\n                    };\n\n                    document.getElementById("usuarioInfo").textContent =\n                        `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n                }\n            }\n\n            // Funci√≥n para cargar las quejas del usuario\n            async function cargarMisQuejas() {\n                if (!usuarioActual) return;\n\n                try {\n                    const result = await apiRequest(\n                        `/api/quejas/${usuarioActual.id}`,\n                    );\n                    const listadoDiv = document.getElementById("listadoQuejas");\n\n                    if (result.quejas && result.quejas.length > 0) {\n                        let html = "";\n                        result.quejas.forEach((queja) => {\n                            const fecha = new Date(\n                                queja.fechaCreacion,\n                            ).toLocaleDateString("es-CO");\n                            html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                        });\n                        listadoDiv.innerHTML = html;\n                    } else {\n                        listadoDiv.innerHTML =\n                            \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                    }\n                } catch (error) {\n                    console.error("Error cargando quejas:", error);\n                    document.getElementById("listadoQuejas").innerHTML =\n                        \'<div class="error">Error al cargar las quejas</div>\';\n                }\n            }\n\n            // Funci√≥n para cerrar sesi√≥n\n            function cerrarSesion() {\n                if (confirm("¬øEst√° seguro que desea cerrar sesi√≥n?")) {\n                    usuarioActual = null;\n                    showPage("inicio");\n                    // Limpiar formularios\n                    document\n                        .querySelectorAll("form")\n                        .forEach((form) => form.reset());\n                    document\n                        .querySelectorAll(".error, .success")\n                        .forEach((msg) => msg.remove());\n                }\n            }\n\n            // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n            async function enviarQuejaAutorizada(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar que se haya aceptado la pol√≠tica de datos\n                const aceptoPolitica = document.querySelector(\n                    \'input[name="aceptoPolitica"]\',\n                ).checked;\n                if (!aceptoPolitica) {\n                    const messageDiv = document.getElementById("quejaMessage");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                    return;\n                }\n\n                data.aceptoPolitica = aceptoPolitica;\n                data.tipoUsuario = document.querySelector(\n                    \'select[name="tipoUsuario"]\',\n                ).value;\n\n                // Manejar municipio personalizado si se seleccion√≥ "Otro"\n                const ciudadSelect = document.querySelector(\n                    \'select[name="ciudad"]\',\n                );\n                const ciudadOtroInput = document.querySelector(\n                    \'input[name="ciudadOtro"]\',\n                );\n\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    data.ciudad = ciudadOtroInput.value.trim();\n                }\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("aceptoPolitica", aceptoPolitica);\n                submitFormData.set("tipoUsuario", data.tipoUsuario);\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Manejar municipio personalizado\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    submitFormData.set("ciudad", ciudadOtroInput.value.trim());\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                        // Actualizar lista de quejas\n                        cargarMisQuejas();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            function cerrarApp() {\n                if (confirm("¬øEst√° seguro que desea salir del sistema?")) {\n                    window.close();\n                }\n            }\n\n            async function apiRequest(url, options = {}) {\n                try {\n                    const response = await fetch(url, {\n                        headers: {\n                            "Content-Type": "application/json",\n                            ...options.headers,\n                        },\n                        ...options,\n                    });\n                    return await response.json();\n                } catch (error) {\n                    console.error("Error en la petici√≥n:", error);\n                    return { error: "Error de conexi√≥n con el servidor" };\n                }\n            }\n        </script>\n', PosixPath('index.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6913aeeb3dc35d7c97c0adb2118c3890769e6d4f6ca7fa453b38916833d09cbd50d8b9860637fc3610497afba203884dd3b8c8a435b9a4ca71e2cf0dcdeb8ac8_0
2025-06-15 15:48:30,767 - semgrep.rule_match - DEBUG - match_key = ('\n            let archivosAdjuntos = [];\n\n            function showPage(pageId) {\n                // Ocultar todas las p√°ginas\n                const pages = document.querySelectorAll(".page");\n                pages.forEach((page) => {\n                    page.classList.remove("active");\n                });\n\n                // Mostrar la p√°gina seleccionada\n                document.getElementById(pageId).classList.add("active");\n\n                // Cargar contenido espec√≠fico si es necesario\n                if (pageId === "veedores") {\n                    cargarVeedores();\n                }\n            }\n\n            async function cargarVeedores() {\n                try {\n                    const veedores = await apiRequest("/api/veedores");\n                    let veedoresHTML = "";\n\n                    veedores.forEach((veedor) => {\n                        veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                    });\n\n                    document.getElementById("veedoresContent").innerHTML =\n                        veedoresHTML;\n                } catch (error) {\n                    console.error("Error cargando veedores:", error);\n                    document.getElementById("veedoresContent").innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n                }\n            }\n\n            async function mostrarFormularioQueja(tipo) {\n                let tipoTexto;\n                if (tipo === "primaria") {\n                    tipoTexto = "Atenci√≥n Primaria";\n                } else if (tipo === "complementaria") {\n                    tipoTexto = "Atenci√≥n Complementaria";\n                } else if (tipo === "medicamentos") {\n                    tipoTexto = "Medicamentos";\n                }\n\n                try {\n                    // Cargar departamentos y tipos de queja\n                    const departamentos =\n                        await apiRequest("/api/departamentos");\n                    const tiposQueja = await apiRequest(\n                        `/api/tipos-queja/${tipo}`,\n                    );\n\n                    // Generar opciones\n                    const departamentosOptions = departamentos\n                        .map((dep) => `<option value="${dep}">${dep}</option>`)\n                        .join("");\n\n                    const tiposQuejaOptions = tiposQueja\n                        .map(\n                            (tipoQ) =>\n                                `<option value="${tipoQ}">${tipoQ}</option>`,\n                        )\n                        .join("");\n\n                    const nombreCompleto = usuarioActual\n                        ? `${usuarioActual.nombre} ${usuarioActual.apellido}`\n                        : "";\n                    const cedula = usuarioActual ? usuarioActual.cedula : "";\n                    const correo = usuarioActual ? usuarioActual.correo : "";\n                    const celular = usuarioActual ? usuarioActual.celular : "";\n\n                    document.getElementById("quejaContent").innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL POR EL DERECHO A LA SALUD DEL MAGISTERIO</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos sobre el tratamiento de sus datos personales:</p>\n                                \n                                <p><strong>Finalidad espec√≠fica:</strong> Sus datos personales ser√°n utilizados exclusivamente para los siguientes fines relacionados con las actividades de la Veedur√≠a Nacional por el Derecho a la Salud del Magisterio:</p>\n                                <ul style="margin-left: 20px; text-align: left;">\n                                    <li>Procesar, gestionar y realizar seguimiento integral a su queja de salud</li>\n                                    <li>Invitarle a reuniones, asambleas y encuentros de veedur√≠a</li>\n                                    <li>Convocarle a capacitaciones y talleres sobre derechos en salud</li>\n                                    <li>Invitarle a foros, seminarios y eventos educativos del magisterio</li>\n                                    <li>Mantenerle informado sobre actividades que fortalezcan la veedur√≠a ciudadana</li>\n                                    <li>Comunicarle avances, resultados y acciones derivadas de su queja</li>\n                                </ul>\n                                \n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados de forma segura y procesados √∫nicamente para los fines mencionados, sin compartirse con terceros ajenos a la organizaci√≥n.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando directamente a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre completo, n√∫mero de c√©dula, correo electr√≥nico, tel√©fono celular, tipo de usuario y detalles espec√≠ficos de su queja de salud.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales para los fines espec√≠ficos de la veedur√≠a descritos anteriormente.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n\n                    // Configurar eventos\n                    configurarEventosFormulario();\n                } catch (error) {\n                    console.error("Error cargando formulario:", error);\n                    document.getElementById("quejaContent").innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n                }\n            }\n\n            function mostrarSeleccionTipo() {\n                document.getElementById("quejaContent").innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n            }\n\n            function configurarEventosFormulario() {\n                // Configurar el evento de cambio de tipo de problema\n                document\n                    .getElementById("problema")\n                    .addEventListener("change", function () {\n                        const problemaOtroGroup =\n                            document.getElementById("problemaOtroGroup");\n                        const problemaOtroInput =\n                            document.getElementById("problemaOtro");\n\n                        if (this.value === "otro") {\n                            problemaOtroGroup.style.display = "block";\n                            problemaOtroInput.required = true;\n                            this.required = false;\n                        } else {\n                            problemaOtroGroup.style.display = "none";\n                            problemaOtroInput.required = false;\n                            problemaOtroInput.value = "";\n                            this.required = true;\n                        }\n                    });\n\n                // Configurar el evento de cambio de departamento\n                document\n                    .getElementById("departamento")\n                    .addEventListener("change", async (e) => {\n                        const departamento = e.target.value;\n                        const ciudadSelect = document.getElementById("ciudad");\n\n                        if (departamento) {\n                            try {\n                                const municipios = await apiRequest(\n                                    `/api/municipios/${encodeURIComponent(departamento)}`,\n                                );\n\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Seleccione municipio</option>\';\n                                ciudadSelect.disabled = false;\n\n                                municipios.forEach((municipio) => {\n                                    ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                                });\n\n                                // Agregar opci√≥n "Otro"\n                                ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n\n                                // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                                ciudadSelect.addEventListener(\n                                    "change",\n                                    function () {\n                                        const ciudadOtroInput =\n                                            document.getElementById(\n                                                "ciudadOtro",\n                                            );\n                                        if (this.value === "otro") {\n                                            ciudadOtroInput.style.display =\n                                                "block";\n                                            ciudadOtroInput.required = true;\n                                            this.required = false;\n                                        } else {\n                                            ciudadOtroInput.style.display =\n                                                "none";\n                                            ciudadOtroInput.required = false;\n                                            this.required = true;\n                                            ciudadOtroInput.value = "";\n                                        }\n                                    },\n                                );\n                            } catch (error) {\n                                console.error(\n                                    "Error cargando municipios:",\n                                    error,\n                                );\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Error cargando municipios</option>\';\n                            }\n                        } else {\n                            ciudadSelect.innerHTML =\n                                \'<option value="">Primero seleccione departamento</option>\';\n                            ciudadSelect.disabled = true;\n                        }\n                    });\n\n                // Configurar manejo de archivos\n                const fileUpload = document.getElementById("fileUpload");\n                const fileInput = document.getElementById("fileInput");\n\n                fileUpload.addEventListener("click", () => fileInput.click());\n                fileUpload.addEventListener("dragover", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.add("dragover");\n                });\n                fileUpload.addEventListener("dragleave", () => {\n                    fileUpload.classList.remove("dragover");\n                });\n                fileUpload.addEventListener("drop", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.remove("dragover");\n                    handleFiles(e.dataTransfer.files);\n                });\n\n                fileInput.addEventListener("change", (e) => {\n                    handleFiles(e.target.files);\n                });\n\n                // Configurar env√≠o del formulario\n                document\n                    .getElementById("quejaForm")\n                    .addEventListener("submit", async (e) => {\n                        await enviarQuejaAutorizada(e);\n                    });\n            }\n\n            function handleFiles(files) {\n                for (let file of files) {\n                    if (validateFile(file)) {\n                        archivosAdjuntos.push(file);\n                        updateFileList();\n                    }\n                }\n            }\n\n            function validateFile(file) {\n                const allowedTypes = [\n                    "application/pdf",\n                    "application/msword",\n                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",\n                    "image/jpeg",\n                    "image/jpg",\n                    "image/png",\n                ];\n                const maxSize = 5 * 1024 * 1024; // 5MB\n\n                if (!allowedTypes.includes(file.type)) {\n                    alert("Tipo de archivo no permitido: " + file.name);\n                    return false;\n                }\n                if (file.size > maxSize) {\n                    alert(\n                        "El archivo es muy grande (m√°ximo 5MB): " + file.name,\n                    );\n                    return false;\n                }\n                return true;\n            }\n\n            function updateFileList() {\n                const fileList = document.getElementById("fileList");\n                fileList.innerHTML = "";\n\n                archivosAdjuntos.forEach((file, index) => {\n                    const fileItem = document.createElement("div");\n                    fileItem.className = "file-item";\n                    fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                    fileList.appendChild(fileItem);\n                });\n            }\n\n            function removeFile(index) {\n                archivosAdjuntos.splice(index, 1);\n                updateFileList();\n            }\n\n            // Sistema de filtros de contenido inapropiado\n            function validarContenidoQueja(problema, detalle) {\n                const palabrasOfensivas = [\n                    "idiota",\n                    "est√∫pido",\n                    "estupido",\n                    "imb√©cil",\n                    "imbecil",\n                    "tonto",\n                    "in√∫til",\n                    "inutil",\n                    "incompetente",\n                    "basura",\n                    "maldito",\n                    "maldita",\n                    "pendejo",\n                    "pendeja",\n                    "hijo de",\n                    "hijode",\n                    "marica",\n                    "maricas",\n                    "maric√≥n",\n                    "maricon",\n                    "puta",\n                    "puto",\n                    "putita",\n                    "putilla",\n                    "cabron",\n                    "cabr√≥n",\n                    "gonorrea",\n                    "gonorreita",\n                    "carajo",\n                    "culo",\n                    "culero",\n                    "culera",\n                    "mierda",\n                    "jodido",\n                    "jodida",\n                    "inepto",\n                    "inepta",\n                    "ineptos",\n                    "ineptas",\n                    "vieja",\n                    "viejo",\n                    "viejas",\n                    "viejos",\n                    "chismosa",\n                    "chismoso",\n                    "mediquillos",\n                    "mediquillo",\n                    "mediquilla",\n                    "mediquetes",\n                    "perro",\n                    "perra",\n                    "animal",\n                    "bestia",\n                    "bruto",\n                    "bruta",\n                    "burro",\n                    "burra",\n                    "malo",\n                    "mala",\n                    "malos",\n                    "malas",\n                    "porquer√≠a",\n                    "porqueria",\n                    "lacra",\n                    "rastrero",\n                    "asqueroso",\n                    "asquerosa",\n                    "maltratador",\n                    "maltratadora",\n                    "doctorcito",\n                    "doctorcitos",\n                    "medicastro",\n                    "medicastros",\n                    "matasanos",\n                    "matasano",\n                    "charlat√°n",\n                    "charlatana",\n                ];\n\n                const expresionesProblematicas = [\n                    /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                    /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                    /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                    /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                    /\\besa\\s+(vieja|viejo)\\b/gi,\n                ];\n\n                const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n                const erroresEncontrados = [];\n                let sugerencia = `${problema} ${detalle}`;\n\n                // Verificar palabras ofensivas\n                for (const palabra of palabrasOfensivas) {\n                    const regex = new RegExp(\n                        `\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&")}\\\\b`,\n                        "gi",\n                    );\n                    if (regex.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            `Lenguaje inapropiado: "${palabra}"`,\n                        );\n                        sugerencia = sugerencia.replace(\n                            regex,\n                            "[t√©rmino apropiado]",\n                        );\n                    }\n                }\n\n                // Verificar expresiones problem√°ticas\n                for (const expresion of expresionesProblematicas) {\n                    if (expresion.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            "Expresi√≥n despectiva hacia profesionales de salud",\n                        );\n                        sugerencia = sugerencia.replace(\n                            expresion,\n                            "[expresi√≥n respetuosa]",\n                        );\n                    }\n                }\n\n                // Casos espec√≠ficos de mejora\n                if (\n                    textoCompleto.includes("esa vieja") &&\n                    textoCompleto.includes("m√©dica")\n                ) {\n                    erroresEncontrados.push(\n                        "Expresi√≥n despectiva por edad y g√©nero",\n                    );\n                    sugerencia =\n                        "Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.";\n                }\n\n                if (\n                    textoCompleto.includes("mediquillos") ||\n                    textoCompleto.includes("mediquillo")\n                ) {\n                    erroresEncontrados.push(\n                        "T√©rmino despectivo hacia profesionales m√©dicos",\n                    );\n                    sugerencia =\n                        "No estoy satisfecho con el trato recibido por parte del personal m√©dico.";\n                }\n\n                if (\n                    textoCompleto.includes("como a perro") ||\n                    textoCompleto.includes("como perro")\n                ) {\n                    erroresEncontrados.push(\n                        "Comparaci√≥n despectiva sobre trato recibido",\n                    );\n                    sugerencia =\n                        "Considero que el trato recibido careci√≥ de calidez humana.";\n                }\n\n                return {\n                    esValido: erroresEncontrados.length === 0,\n                    errores: erroresEncontrados,\n                    sugerencia: sugerencia,\n                };\n            }\n\n            async function enviarQueja(e) {\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n                data.paraBeneficiario = document.querySelector(\n                    \'input[name="paraBeneficiario"]\',\n                ).checked;\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    data.problema = problemaOtroInput.value.trim();\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("paraBeneficiario", data.paraBeneficiario);\n\n                // Establecer el problema correcto (personalizado si es "otro")\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            // Variables globales para sesi√≥n de usuario\n            let usuarioActual = null;\n\n            // Funci√≥n para registrar usuario\n            async function registrarUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar confirmaci√≥n de contrase√±a\n                if (data.clave !== data.confirmarClave) {\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Las contrase√±as no coinciden</div>\';\n                    return;\n                }\n\n                // Remover confirmaci√≥n de contrase√±a del env√≠o\n                delete data.confirmarClave;\n\n                try {\n                    const result = await apiRequest("/api/register", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv =\n                        document.getElementById("registroMessage");\n                    if (result.success) {\n                        messageDiv.innerHTML =\n                            \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                        setTimeout(() => {\n                            showPage("login");\n                        }, 2000);\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al registrar usuario"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error registrando usuario:", error);\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para hacer login\n            async function loginUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                try {\n                    const result = await apiRequest("/api/login", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv = document.getElementById("loginMessage");\n                    if (result.success) {\n                        usuarioActual = result.usuario;\n                        actualizarInfoUsuario();\n                        showPage("sistema-autorizado");\n                        cargarMisQuejas();\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al iniciar sesi√≥n"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error en login:", error);\n                    document.getElementById("loginMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n            function actualizarInfoUsuario() {\n                if (usuarioActual) {\n                    const tipoUsuarioLabel = {\n                        docente_activo: "Docente Activo",\n                        docente_pensionado: "Docente Pensionado",\n                        beneficiario: "Beneficiario",\n                    };\n\n                    document.getElementById("usuarioInfo").textContent =\n                        `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n                }\n            }\n\n            // Funci√≥n para cargar las quejas del usuario\n            async function cargarMisQuejas() {\n                if (!usuarioActual) return;\n\n                try {\n                    const result = await apiRequest(\n                        `/api/quejas/${usuarioActual.id}`,\n                    );\n                    const listadoDiv = document.getElementById("listadoQuejas");\n\n                    if (result.quejas && result.quejas.length > 0) {\n                        let html = "";\n                        result.quejas.forEach((queja) => {\n                            const fecha = new Date(\n                                queja.fechaCreacion,\n                            ).toLocaleDateString("es-CO");\n                            html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                        });\n                        listadoDiv.innerHTML = html;\n                    } else {\n                        listadoDiv.innerHTML =\n                            \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                    }\n                } catch (error) {\n                    console.error("Error cargando quejas:", error);\n                    document.getElementById("listadoQuejas").innerHTML =\n                        \'<div class="error">Error al cargar las quejas</div>\';\n                }\n            }\n\n            // Funci√≥n para cerrar sesi√≥n\n            function cerrarSesion() {\n                if (confirm("¬øEst√° seguro que desea cerrar sesi√≥n?")) {\n                    usuarioActual = null;\n                    showPage("inicio");\n                    // Limpiar formularios\n                    document\n                        .querySelectorAll("form")\n                        .forEach((form) => form.reset());\n                    document\n                        .querySelectorAll(".error, .success")\n                        .forEach((msg) => msg.remove());\n                }\n            }\n\n            // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n            async function enviarQuejaAutorizada(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar que se haya aceptado la pol√≠tica de datos\n                const aceptoPolitica = document.querySelector(\n                    \'input[name="aceptoPolitica"]\',\n                ).checked;\n                if (!aceptoPolitica) {\n                    const messageDiv = document.getElementById("quejaMessage");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                    return;\n                }\n\n                data.aceptoPolitica = aceptoPolitica;\n                data.tipoUsuario = document.querySelector(\n                    \'select[name="tipoUsuario"]\',\n                ).value;\n\n                // Manejar municipio personalizado si se seleccion√≥ "Otro"\n                const ciudadSelect = document.querySelector(\n                    \'select[name="ciudad"]\',\n                );\n                const ciudadOtroInput = document.querySelector(\n                    \'input[name="ciudadOtro"]\',\n                );\n\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    data.ciudad = ciudadOtroInput.value.trim();\n                }\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("aceptoPolitica", aceptoPolitica);\n                submitFormData.set("tipoUsuario", data.tipoUsuario);\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Manejar municipio personalizado\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    submitFormData.set("ciudad", ciudadOtroInput.value.trim());\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                        // Actualizar lista de quejas\n                        cargarMisQuejas();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            function cerrarApp() {\n                if (confirm("¬øEst√° seguro que desea salir del sistema?")) {\n                    window.close();\n                }\n            }\n\n            async function apiRequest(url, options = {}) {\n                try {\n                    const response = await fetch(url, {\n                        headers: {\n                            "Content-Type": "application/json",\n                            ...options.headers,\n                        },\n                        ...options,\n                    });\n                    return await response.json();\n                } catch (error) {\n                    console.error("Error en la petici√≥n:", error);\n                    return { error: "Error de conexi√≥n con el servidor" };\n                }\n            }\n         $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n            let archivosAdjuntos = [];\n\n            function showPage(pageId) {\n                // Ocultar todas las p√°ginas\n                const pages = document.querySelectorAll(".page");\n                pages.forEach((page) => {\n                    page.classList.remove("active");\n                });\n\n                // Mostrar la p√°gina seleccionada\n                document.getElementById(pageId).classList.add("active");\n\n                // Cargar contenido espec√≠fico si es necesario\n                if (pageId === "veedores") {\n                    cargarVeedores();\n                }\n            }\n\n            async function cargarVeedores() {\n                try {\n                    const veedores = await apiRequest("/api/veedores");\n                    let veedoresHTML = "";\n\n                    veedores.forEach((veedor) => {\n                        veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                    });\n\n                    document.getElementById("veedoresContent").innerHTML =\n                        veedoresHTML;\n                } catch (error) {\n                    console.error("Error cargando veedores:", error);\n                    document.getElementById("veedoresContent").innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n                }\n            }\n\n            async function mostrarFormularioQueja(tipo) {\n                let tipoTexto;\n                if (tipo === "primaria") {\n                    tipoTexto = "Atenci√≥n Primaria";\n                } else if (tipo === "complementaria") {\n                    tipoTexto = "Atenci√≥n Complementaria";\n                } else if (tipo === "medicamentos") {\n                    tipoTexto = "Medicamentos";\n                }\n\n                try {\n                    // Cargar departamentos y tipos de queja\n                    const departamentos =\n                        await apiRequest("/api/departamentos");\n                    const tiposQueja = await apiRequest(\n                        `/api/tipos-queja/${tipo}`,\n                    );\n\n                    // Generar opciones\n                    const departamentosOptions = departamentos\n                        .map((dep) => `<option value="${dep}">${dep}</option>`)\n                        .join("");\n\n                    const tiposQuejaOptions = tiposQueja\n                        .map(\n                            (tipoQ) =>\n                                `<option value="${tipoQ}">${tipoQ}</option>`,\n                        )\n                        .join("");\n\n                    const nombreCompleto = usuarioActual\n                        ? `${usuarioActual.nombre} ${usuarioActual.apellido}`\n                        : "";\n                    const cedula = usuarioActual ? usuarioActual.cedula : "";\n                    const correo = usuarioActual ? usuarioActual.correo : "";\n                    const celular = usuarioActual ? usuarioActual.celular : "";\n\n                    document.getElementById("quejaContent").innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL POR EL DERECHO A LA SALUD DEL MAGISTERIO</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos sobre el tratamiento de sus datos personales:</p>\n                                \n                                <p><strong>Finalidad espec√≠fica:</strong> Sus datos personales ser√°n utilizados exclusivamente para los siguientes fines relacionados con las actividades de la Veedur√≠a Nacional por el Derecho a la Salud del Magisterio:</p>\n                                <ul style="margin-left: 20px; text-align: left;">\n                                    <li>Procesar, gestionar y realizar seguimiento integral a su queja de salud</li>\n                                    <li>Invitarle a reuniones, asambleas y encuentros de veedur√≠a</li>\n                                    <li>Convocarle a capacitaciones y talleres sobre derechos en salud</li>\n                                    <li>Invitarle a foros, seminarios y eventos educativos del magisterio</li>\n                                    <li>Mantenerle informado sobre actividades que fortalezcan la veedur√≠a ciudadana</li>\n                                    <li>Comunicarle avances, resultados y acciones derivadas de su queja</li>\n                                </ul>\n                                \n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados de forma segura y procesados √∫nicamente para los fines mencionados, sin compartirse con terceros ajenos a la organizaci√≥n.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando directamente a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre completo, n√∫mero de c√©dula, correo electr√≥nico, tel√©fono celular, tipo de usuario y detalles espec√≠ficos de su queja de salud.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales para los fines espec√≠ficos de la veedur√≠a descritos anteriormente.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n\n                    // Configurar eventos\n                    configurarEventosFormulario();\n                } catch (error) {\n                    console.error("Error cargando formulario:", error);\n                    document.getElementById("quejaContent").innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n                }\n            }\n\n            function mostrarSeleccionTipo() {\n                document.getElementById("quejaContent").innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n            }\n\n            function configurarEventosFormulario() {\n                // Configurar el evento de cambio de tipo de problema\n                document\n                    .getElementById("problema")\n                    .addEventListener("change", function () {\n                        const problemaOtroGroup =\n                            document.getElementById("problemaOtroGroup");\n                        const problemaOtroInput =\n                            document.getElementById("problemaOtro");\n\n                        if (this.value === "otro") {\n                            problemaOtroGroup.style.display = "block";\n                            problemaOtroInput.required = true;\n                            this.required = false;\n                        } else {\n                            problemaOtroGroup.style.display = "none";\n                            problemaOtroInput.required = false;\n                            problemaOtroInput.value = "";\n                            this.required = true;\n                        }\n                    });\n\n                // Configurar el evento de cambio de departamento\n                document\n                    .getElementById("departamento")\n                    .addEventListener("change", async (e) => {\n                        const departamento = e.target.value;\n                        const ciudadSelect = document.getElementById("ciudad");\n\n                        if (departamento) {\n                            try {\n                                const municipios = await apiRequest(\n                                    `/api/municipios/${encodeURIComponent(departamento)}`,\n                                );\n\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Seleccione municipio</option>\';\n                                ciudadSelect.disabled = false;\n\n                                municipios.forEach((municipio) => {\n                                    ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                                });\n\n                                // Agregar opci√≥n "Otro"\n                                ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n\n                                // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                                ciudadSelect.addEventListener(\n                                    "change",\n                                    function () {\n                                        const ciudadOtroInput =\n                                            document.getElementById(\n                                                "ciudadOtro",\n                                            );\n                                        if (this.value === "otro") {\n                                            ciudadOtroInput.style.display =\n                                                "block";\n                                            ciudadOtroInput.required = true;\n                                            this.required = false;\n                                        } else {\n                                            ciudadOtroInput.style.display =\n                                                "none";\n                                            ciudadOtroInput.required = false;\n                                            this.required = true;\n                                            ciudadOtroInput.value = "";\n                                        }\n                                    },\n                                );\n                            } catch (error) {\n                                console.error(\n                                    "Error cargando municipios:",\n                                    error,\n                                );\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Error cargando municipios</option>\';\n                            }\n                        } else {\n                            ciudadSelect.innerHTML =\n                                \'<option value="">Primero seleccione departamento</option>\';\n                            ciudadSelect.disabled = true;\n                        }\n                    });\n\n                // Configurar manejo de archivos\n                const fileUpload = document.getElementById("fileUpload");\n                const fileInput = document.getElementById("fileInput");\n\n                fileUpload.addEventListener("click", () => fileInput.click());\n                fileUpload.addEventListener("dragover", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.add("dragover");\n                });\n                fileUpload.addEventListener("dragleave", () => {\n                    fileUpload.classList.remove("dragover");\n                });\n                fileUpload.addEventListener("drop", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.remove("dragover");\n                    handleFiles(e.dataTransfer.files);\n                });\n\n                fileInput.addEventListener("change", (e) => {\n                    handleFiles(e.target.files);\n                });\n\n                // Configurar env√≠o del formulario\n                document\n                    .getElementById("quejaForm")\n                    .addEventListener("submit", async (e) => {\n                        await enviarQuejaAutorizada(e);\n                    });\n            }\n\n            function handleFiles(files) {\n                for (let file of files) {\n                    if (validateFile(file)) {\n                        archivosAdjuntos.push(file);\n                        updateFileList();\n                    }\n                }\n            }\n\n            function validateFile(file) {\n                const allowedTypes = [\n                    "application/pdf",\n                    "application/msword",\n                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",\n                    "image/jpeg",\n                    "image/jpg",\n                    "image/png",\n                ];\n                const maxSize = 5 * 1024 * 1024; // 5MB\n\n                if (!allowedTypes.includes(file.type)) {\n                    alert("Tipo de archivo no permitido: " + file.name);\n                    return false;\n                }\n                if (file.size > maxSize) {\n                    alert(\n                        "El archivo es muy grande (m√°ximo 5MB): " + file.name,\n                    );\n                    return false;\n                }\n                return true;\n            }\n\n            function updateFileList() {\n                const fileList = document.getElementById("fileList");\n                fileList.innerHTML = "";\n\n                archivosAdjuntos.forEach((file, index) => {\n                    const fileItem = document.createElement("div");\n                    fileItem.className = "file-item";\n                    fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                    fileList.appendChild(fileItem);\n                });\n            }\n\n            function removeFile(index) {\n                archivosAdjuntos.splice(index, 1);\n                updateFileList();\n            }\n\n            // Sistema de filtros de contenido inapropiado\n            function validarContenidoQueja(problema, detalle) {\n                const palabrasOfensivas = [\n                    "idiota",\n                    "est√∫pido",\n                    "estupido",\n                    "imb√©cil",\n                    "imbecil",\n                    "tonto",\n                    "in√∫til",\n                    "inutil",\n                    "incompetente",\n                    "basura",\n                    "maldito",\n                    "maldita",\n                    "pendejo",\n                    "pendeja",\n                    "hijo de",\n                    "hijode",\n                    "marica",\n                    "maricas",\n                    "maric√≥n",\n                    "maricon",\n                    "puta",\n                    "puto",\n                    "putita",\n                    "putilla",\n                    "cabron",\n                    "cabr√≥n",\n                    "gonorrea",\n                    "gonorreita",\n                    "carajo",\n                    "culo",\n                    "culero",\n                    "culera",\n                    "mierda",\n                    "jodido",\n                    "jodida",\n                    "inepto",\n                    "inepta",\n                    "ineptos",\n                    "ineptas",\n                    "vieja",\n                    "viejo",\n                    "viejas",\n                    "viejos",\n                    "chismosa",\n                    "chismoso",\n                    "mediquillos",\n                    "mediquillo",\n                    "mediquilla",\n                    "mediquetes",\n                    "perro",\n                    "perra",\n                    "animal",\n                    "bestia",\n                    "bruto",\n                    "bruta",\n                    "burro",\n                    "burra",\n                    "malo",\n                    "mala",\n                    "malos",\n                    "malas",\n                    "porquer√≠a",\n                    "porqueria",\n                    "lacra",\n                    "rastrero",\n                    "asqueroso",\n                    "asquerosa",\n                    "maltratador",\n                    "maltratadora",\n                    "doctorcito",\n                    "doctorcitos",\n                    "medicastro",\n                    "medicastros",\n                    "matasanos",\n                    "matasano",\n                    "charlat√°n",\n                    "charlatana",\n                ];\n\n                const expresionesProblematicas = [\n                    /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                    /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                    /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                    /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                    /\\besa\\s+(vieja|viejo)\\b/gi,\n                ];\n\n                const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n                const erroresEncontrados = [];\n                let sugerencia = `${problema} ${detalle}`;\n\n                // Verificar palabras ofensivas\n                for (const palabra of palabrasOfensivas) {\n                    const regex = new RegExp(\n                        `\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&")}\\\\b`,\n                        "gi",\n                    );\n                    if (regex.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            `Lenguaje inapropiado: "${palabra}"`,\n                        );\n                        sugerencia = sugerencia.replace(\n                            regex,\n                            "[t√©rmino apropiado]",\n                        );\n                    }\n                }\n\n                // Verificar expresiones problem√°ticas\n                for (const expresion of expresionesProblematicas) {\n                    if (expresion.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            "Expresi√≥n despectiva hacia profesionales de salud",\n                        );\n                        sugerencia = sugerencia.replace(\n                            expresion,\n                            "[expresi√≥n respetuosa]",\n                        );\n                    }\n                }\n\n                // Casos espec√≠ficos de mejora\n                if (\n                    textoCompleto.includes("esa vieja") &&\n                    textoCompleto.includes("m√©dica")\n                ) {\n                    erroresEncontrados.push(\n                        "Expresi√≥n despectiva por edad y g√©nero",\n                    );\n                    sugerencia =\n                        "Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.";\n                }\n\n                if (\n                    textoCompleto.includes("mediquillos") ||\n                    textoCompleto.includes("mediquillo")\n                ) {\n                    erroresEncontrados.push(\n                        "T√©rmino despectivo hacia profesionales m√©dicos",\n                    );\n                    sugerencia =\n                        "No estoy satisfecho con el trato recibido por parte del personal m√©dico.";\n                }\n\n                if (\n                    textoCompleto.includes("como a perro") ||\n                    textoCompleto.includes("como perro")\n                ) {\n                    erroresEncontrados.push(\n                        "Comparaci√≥n despectiva sobre trato recibido",\n                    );\n                    sugerencia =\n                        "Considero que el trato recibido careci√≥ de calidez humana.";\n                }\n\n                return {\n                    esValido: erroresEncontrados.length === 0,\n                    errores: erroresEncontrados,\n                    sugerencia: sugerencia,\n                };\n            }\n\n            async function enviarQueja(e) {\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n                data.paraBeneficiario = document.querySelector(\n                    \'input[name="paraBeneficiario"]\',\n                ).checked;\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    data.problema = problemaOtroInput.value.trim();\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("paraBeneficiario", data.paraBeneficiario);\n\n                // Establecer el problema correcto (personalizado si es "otro")\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            // Variables globales para sesi√≥n de usuario\n            let usuarioActual = null;\n\n            // Funci√≥n para registrar usuario\n            async function registrarUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar confirmaci√≥n de contrase√±a\n                if (data.clave !== data.confirmarClave) {\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Las contrase√±as no coinciden</div>\';\n                    return;\n                }\n\n                // Remover confirmaci√≥n de contrase√±a del env√≠o\n                delete data.confirmarClave;\n\n                try {\n                    const result = await apiRequest("/api/register", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv =\n                        document.getElementById("registroMessage");\n                    if (result.success) {\n                        messageDiv.innerHTML =\n                            \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                        setTimeout(() => {\n                            showPage("login");\n                        }, 2000);\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al registrar usuario"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error registrando usuario:", error);\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para hacer login\n            async function loginUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                try {\n                    const result = await apiRequest("/api/login", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv = document.getElementById("loginMessage");\n                    if (result.success) {\n                        usuarioActual = result.usuario;\n                        actualizarInfoUsuario();\n                        showPage("sistema-autorizado");\n                        cargarMisQuejas();\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al iniciar sesi√≥n"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error en login:", error);\n                    document.getElementById("loginMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n            function actualizarInfoUsuario() {\n                if (usuarioActual) {\n                    const tipoUsuarioLabel = {\n                        docente_activo: "Docente Activo",\n                        docente_pensionado: "Docente Pensionado",\n                        beneficiario: "Beneficiario",\n                    };\n\n                    document.getElementById("usuarioInfo").textContent =\n                        `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n                }\n            }\n\n            // Funci√≥n para cargar las quejas del usuario\n            async function cargarMisQuejas() {\n                if (!usuarioActual) return;\n\n                try {\n                    const result = await apiRequest(\n                        `/api/quejas/${usuarioActual.id}`,\n                    );\n                    const listadoDiv = document.getElementById("listadoQuejas");\n\n                    if (result.quejas && result.quejas.length > 0) {\n                        let html = "";\n                        result.quejas.forEach((queja) => {\n                            const fecha = new Date(\n                                queja.fechaCreacion,\n                            ).toLocaleDateString("es-CO");\n                            html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                        });\n                        listadoDiv.innerHTML = html;\n                    } else {\n                        listadoDiv.innerHTML =\n                            \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                    }\n                } catch (error) {\n                    console.error("Error cargando quejas:", error);\n                    document.getElementById("listadoQuejas").innerHTML =\n                        \'<div class="error">Error al cargar las quejas</div>\';\n                }\n            }\n\n            // Funci√≥n para cerrar sesi√≥n\n            function cerrarSesion() {\n                if (confirm("¬øEst√° seguro que desea cerrar sesi√≥n?")) {\n                    usuarioActual = null;\n                    showPage("inicio");\n                    // Limpiar formularios\n                    document\n                        .querySelectorAll("form")\n                        .forEach((form) => form.reset());\n                    document\n                        .querySelectorAll(".error, .success")\n                        .forEach((msg) => msg.remove());\n                }\n            }\n\n            // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n            async function enviarQuejaAutorizada(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar que se haya aceptado la pol√≠tica de datos\n                const aceptoPolitica = document.querySelector(\n                    \'input[name="aceptoPolitica"]\',\n                ).checked;\n                if (!aceptoPolitica) {\n                    const messageDiv = document.getElementById("quejaMessage");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                    return;\n                }\n\n                data.aceptoPolitica = aceptoPolitica;\n                data.tipoUsuario = document.querySelector(\n                    \'select[name="tipoUsuario"]\',\n                ).value;\n\n                // Manejar municipio personalizado si se seleccion√≥ "Otro"\n                const ciudadSelect = document.querySelector(\n                    \'select[name="ciudad"]\',\n                );\n                const ciudadOtroInput = document.querySelector(\n                    \'input[name="ciudadOtro"]\',\n                );\n\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    data.ciudad = ciudadOtroInput.value.trim();\n                }\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("aceptoPolitica", aceptoPolitica);\n                submitFormData.set("tipoUsuario", data.tipoUsuario);\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Manejar municipio personalizado\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    submitFormData.set("ciudad", ciudadOtroInput.value.trim());\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                        // Actualizar lista de quejas\n                        cargarMisQuejas();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            function cerrarApp() {\n                if (confirm("¬øEst√° seguro que desea salir del sistema?")) {\n                    window.close();\n                }\n            }\n\n            async function apiRequest(url, options = {}) {\n                try {\n                    const response = await fetch(url, {\n                        headers: {\n                            "Content-Type": "application/json",\n                            ...options.headers,\n                        },\n                        ...options,\n                    });\n                    return await response.json();\n                } catch (error) {\n                    console.error("Error en la petici√≥n:", error);\n                    return { error: "Error de conexi√≥n con el servidor" };\n                }\n            }\n        </script>\n', PosixPath('index.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6913aeeb3dc35d7c97c0adb2118c3890769e6d4f6ca7fa453b38916833d09cbd50d8b9860637fc3610497afba203884dd3b8c8a435b9a4ca71e2cf0dcdeb8ac8_0
2025-06-15 15:48:30,777 - semgrep.rule_match - DEBUG - match_key = ('\n            let archivosAdjuntos = [];\n\n            function showPage(pageId) {\n                // Ocultar todas las p√°ginas\n                const pages = document.querySelectorAll(".page");\n                pages.forEach((page) => {\n                    page.classList.remove("active");\n                });\n\n                // Mostrar la p√°gina seleccionada\n                document.getElementById(pageId).classList.add("active");\n\n                // Cargar contenido espec√≠fico si es necesario\n                if (pageId === "veedores") {\n                    cargarVeedores();\n                }\n            }\n\n            async function cargarVeedores() {\n                try {\n                    const veedores = await apiRequest("/api/veedores");\n                    let veedoresHTML = "";\n\n                    veedores.forEach((veedor) => {\n                        veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                    });\n\n                    document.getElementById("veedoresContent").innerHTML =\n                        veedoresHTML;\n                } catch (error) {\n                    console.error("Error cargando veedores:", error);\n                    document.getElementById("veedoresContent").innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n                }\n            }\n\n            async function mostrarFormularioQueja(tipo) {\n                let tipoTexto;\n                if (tipo === "primaria") {\n                    tipoTexto = "Atenci√≥n Primaria";\n                } else if (tipo === "complementaria") {\n                    tipoTexto = "Atenci√≥n Complementaria";\n                } else if (tipo === "medicamentos") {\n                    tipoTexto = "Medicamentos";\n                }\n\n                try {\n                    // Cargar departamentos y tipos de queja\n                    const departamentos =\n                        await apiRequest("/api/departamentos");\n                    const tiposQueja = await apiRequest(\n                        `/api/tipos-queja/${tipo}`,\n                    );\n\n                    // Generar opciones\n                    const departamentosOptions = departamentos\n                        .map((dep) => `<option value="${dep}">${dep}</option>`)\n                        .join("");\n\n                    const tiposQuejaOptions = tiposQueja\n                        .map(\n                            (tipoQ) =>\n                                `<option value="${tipoQ}">${tipoQ}</option>`,\n                        )\n                        .join("");\n\n                    const nombreCompleto = usuarioActual\n                        ? `${usuarioActual.nombre} ${usuarioActual.apellido}`\n                        : "";\n                    const cedula = usuarioActual ? usuarioActual.cedula : "";\n                    const correo = usuarioActual ? usuarioActual.correo : "";\n                    const celular = usuarioActual ? usuarioActual.celular : "";\n\n                    document.getElementById("quejaContent").innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL POR EL DERECHO A LA SALUD DEL MAGISTERIO</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos sobre el tratamiento de sus datos personales:</p>\n                                \n                                <p><strong>Finalidad espec√≠fica:</strong> Sus datos personales ser√°n utilizados exclusivamente para los siguientes fines relacionados con las actividades de la Veedur√≠a Nacional por el Derecho a la Salud del Magisterio:</p>\n                                <ul style="margin-left: 20px; text-align: left;">\n                                    <li>Procesar, gestionar y realizar seguimiento integral a su queja de salud</li>\n                                    <li>Invitarle a reuniones, asambleas y encuentros de veedur√≠a</li>\n                                    <li>Convocarle a capacitaciones y talleres sobre derechos en salud</li>\n                                    <li>Invitarle a foros, seminarios y eventos educativos del magisterio</li>\n                                    <li>Mantenerle informado sobre actividades que fortalezcan la veedur√≠a ciudadana</li>\n                                    <li>Comunicarle avances, resultados y acciones derivadas de su queja</li>\n                                </ul>\n                                \n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados de forma segura y procesados √∫nicamente para los fines mencionados, sin compartirse con terceros ajenos a la organizaci√≥n.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando directamente a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre completo, n√∫mero de c√©dula, correo electr√≥nico, tel√©fono celular, tipo de usuario y detalles espec√≠ficos de su queja de salud.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales para los fines espec√≠ficos de la veedur√≠a descritos anteriormente.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n\n                    // Configurar eventos\n                    configurarEventosFormulario();\n                } catch (error) {\n                    console.error("Error cargando formulario:", error);\n                    document.getElementById("quejaContent").innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n                }\n            }\n\n            function mostrarSeleccionTipo() {\n                document.getElementById("quejaContent").innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n            }\n\n            function configurarEventosFormulario() {\n                // Configurar el evento de cambio de tipo de problema\n                document\n                    .getElementById("problema")\n                    .addEventListener("change", function () {\n                        const problemaOtroGroup =\n                            document.getElementById("problemaOtroGroup");\n                        const problemaOtroInput =\n                            document.getElementById("problemaOtro");\n\n                        if (this.value === "otro") {\n                            problemaOtroGroup.style.display = "block";\n                            problemaOtroInput.required = true;\n                            this.required = false;\n                        } else {\n                            problemaOtroGroup.style.display = "none";\n                            problemaOtroInput.required = false;\n                            problemaOtroInput.value = "";\n                            this.required = true;\n                        }\n                    });\n\n                // Configurar el evento de cambio de departamento\n                document\n                    .getElementById("departamento")\n                    .addEventListener("change", async (e) => {\n                        const departamento = e.target.value;\n                        const ciudadSelect = document.getElementById("ciudad");\n\n                        if (departamento) {\n                            try {\n                                const municipios = await apiRequest(\n                                    `/api/municipios/${encodeURIComponent(departamento)}`,\n                                );\n\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Seleccione municipio</option>\';\n                                ciudadSelect.disabled = false;\n\n                                municipios.forEach((municipio) => {\n                                    ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                                });\n\n                                // Agregar opci√≥n "Otro"\n                                ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n\n                                // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                                ciudadSelect.addEventListener(\n                                    "change",\n                                    function () {\n                                        const ciudadOtroInput =\n                                            document.getElementById(\n                                                "ciudadOtro",\n                                            );\n                                        if (this.value === "otro") {\n                                            ciudadOtroInput.style.display =\n                                                "block";\n                                            ciudadOtroInput.required = true;\n                                            this.required = false;\n                                        } else {\n                                            ciudadOtroInput.style.display =\n                                                "none";\n                                            ciudadOtroInput.required = false;\n                                            this.required = true;\n                                            ciudadOtroInput.value = "";\n                                        }\n                                    },\n                                );\n                            } catch (error) {\n                                console.error(\n                                    "Error cargando municipios:",\n                                    error,\n                                );\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Error cargando municipios</option>\';\n                            }\n                        } else {\n                            ciudadSelect.innerHTML =\n                                \'<option value="">Primero seleccione departamento</option>\';\n                            ciudadSelect.disabled = true;\n                        }\n                    });\n\n                // Configurar manejo de archivos\n                const fileUpload = document.getElementById("fileUpload");\n                const fileInput = document.getElementById("fileInput");\n\n                fileUpload.addEventListener("click", () => fileInput.click());\n                fileUpload.addEventListener("dragover", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.add("dragover");\n                });\n                fileUpload.addEventListener("dragleave", () => {\n                    fileUpload.classList.remove("dragover");\n                });\n                fileUpload.addEventListener("drop", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.remove("dragover");\n                    handleFiles(e.dataTransfer.files);\n                });\n\n                fileInput.addEventListener("change", (e) => {\n                    handleFiles(e.target.files);\n                });\n\n                // Configurar env√≠o del formulario\n                document\n                    .getElementById("quejaForm")\n                    .addEventListener("submit", async (e) => {\n                        await enviarQuejaAutorizada(e);\n                    });\n            }\n\n            function handleFiles(files) {\n                for (let file of files) {\n                    if (validateFile(file)) {\n                        archivosAdjuntos.push(file);\n                        updateFileList();\n                    }\n                }\n            }\n\n            function validateFile(file) {\n                const allowedTypes = [\n                    "application/pdf",\n                    "application/msword",\n                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",\n                    "image/jpeg",\n                    "image/jpg",\n                    "image/png",\n                ];\n                const maxSize = 5 * 1024 * 1024; // 5MB\n\n                if (!allowedTypes.includes(file.type)) {\n                    alert("Tipo de archivo no permitido: " + file.name);\n                    return false;\n                }\n                if (file.size > maxSize) {\n                    alert(\n                        "El archivo es muy grande (m√°ximo 5MB): " + file.name,\n                    );\n                    return false;\n                }\n                return true;\n            }\n\n            function updateFileList() {\n                const fileList = document.getElementById("fileList");\n                fileList.innerHTML = "";\n\n                archivosAdjuntos.forEach((file, index) => {\n                    const fileItem = document.createElement("div");\n                    fileItem.className = "file-item";\n                    fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                    fileList.appendChild(fileItem);\n                });\n            }\n\n            function removeFile(index) {\n                archivosAdjuntos.splice(index, 1);\n                updateFileList();\n            }\n\n            // Sistema de filtros de contenido inapropiado\n            function validarContenidoQueja(problema, detalle) {\n                const palabrasOfensivas = [\n                    "idiota",\n                    "est√∫pido",\n                    "estupido",\n                    "imb√©cil",\n                    "imbecil",\n                    "tonto",\n                    "in√∫til",\n                    "inutil",\n                    "incompetente",\n                    "basura",\n                    "maldito",\n                    "maldita",\n                    "pendejo",\n                    "pendeja",\n                    "hijo de",\n                    "hijode",\n                    "marica",\n                    "maricas",\n                    "maric√≥n",\n                    "maricon",\n                    "puta",\n                    "puto",\n                    "putita",\n                    "putilla",\n                    "cabron",\n                    "cabr√≥n",\n                    "gonorrea",\n                    "gonorreita",\n                    "carajo",\n                    "culo",\n                    "culero",\n                    "culera",\n                    "mierda",\n                    "jodido",\n                    "jodida",\n                    "inepto",\n                    "inepta",\n                    "ineptos",\n                    "ineptas",\n                    "vieja",\n                    "viejo",\n                    "viejas",\n                    "viejos",\n                    "chismosa",\n                    "chismoso",\n                    "mediquillos",\n                    "mediquillo",\n                    "mediquilla",\n                    "mediquetes",\n                    "perro",\n                    "perra",\n                    "animal",\n                    "bestia",\n                    "bruto",\n                    "bruta",\n                    "burro",\n                    "burra",\n                    "malo",\n                    "mala",\n                    "malos",\n                    "malas",\n                    "porquer√≠a",\n                    "porqueria",\n                    "lacra",\n                    "rastrero",\n                    "asqueroso",\n                    "asquerosa",\n                    "maltratador",\n                    "maltratadora",\n                    "doctorcito",\n                    "doctorcitos",\n                    "medicastro",\n                    "medicastros",\n                    "matasanos",\n                    "matasano",\n                    "charlat√°n",\n                    "charlatana",\n                ];\n\n                const expresionesProblematicas = [\n                    /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                    /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                    /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                    /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                    /\\besa\\s+(vieja|viejo)\\b/gi,\n                ];\n\n                const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n                const erroresEncontrados = [];\n                let sugerencia = `${problema} ${detalle}`;\n\n                // Verificar palabras ofensivas\n                for (const palabra of palabrasOfensivas) {\n                    const regex = new RegExp(\n                        `\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&")}\\\\b`,\n                        "gi",\n                    );\n                    if (regex.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            `Lenguaje inapropiado: "${palabra}"`,\n                        );\n                        sugerencia = sugerencia.replace(\n                            regex,\n                            "[t√©rmino apropiado]",\n                        );\n                    }\n                }\n\n                // Verificar expresiones problem√°ticas\n                for (const expresion of expresionesProblematicas) {\n                    if (expresion.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            "Expresi√≥n despectiva hacia profesionales de salud",\n                        );\n                        sugerencia = sugerencia.replace(\n                            expresion,\n                            "[expresi√≥n respetuosa]",\n                        );\n                    }\n                }\n\n                // Casos espec√≠ficos de mejora\n                if (\n                    textoCompleto.includes("esa vieja") &&\n                    textoCompleto.includes("m√©dica")\n                ) {\n                    erroresEncontrados.push(\n                        "Expresi√≥n despectiva por edad y g√©nero",\n                    );\n                    sugerencia =\n                        "Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.";\n                }\n\n                if (\n                    textoCompleto.includes("mediquillos") ||\n                    textoCompleto.includes("mediquillo")\n                ) {\n                    erroresEncontrados.push(\n                        "T√©rmino despectivo hacia profesionales m√©dicos",\n                    );\n                    sugerencia =\n                        "No estoy satisfecho con el trato recibido por parte del personal m√©dico.";\n                }\n\n                if (\n                    textoCompleto.includes("como a perro") ||\n                    textoCompleto.includes("como perro")\n                ) {\n                    erroresEncontrados.push(\n                        "Comparaci√≥n despectiva sobre trato recibido",\n                    );\n                    sugerencia =\n                        "Considero que el trato recibido careci√≥ de calidez humana.";\n                }\n\n                return {\n                    esValido: erroresEncontrados.length === 0,\n                    errores: erroresEncontrados,\n                    sugerencia: sugerencia,\n                };\n            }\n\n            async function enviarQueja(e) {\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n                data.paraBeneficiario = document.querySelector(\n                    \'input[name="paraBeneficiario"]\',\n                ).checked;\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    data.problema = problemaOtroInput.value.trim();\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("paraBeneficiario", data.paraBeneficiario);\n\n                // Establecer el problema correcto (personalizado si es "otro")\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            // Variables globales para sesi√≥n de usuario\n            let usuarioActual = null;\n\n            // Funci√≥n para registrar usuario\n            async function registrarUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar confirmaci√≥n de contrase√±a\n                if (data.clave !== data.confirmarClave) {\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Las contrase√±as no coinciden</div>\';\n                    return;\n                }\n\n                // Remover confirmaci√≥n de contrase√±a del env√≠o\n                delete data.confirmarClave;\n\n                try {\n                    const result = await apiRequest("/api/register", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv =\n                        document.getElementById("registroMessage");\n                    if (result.success) {\n                        messageDiv.innerHTML =\n                            \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                        setTimeout(() => {\n                            showPage("login");\n                        }, 2000);\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al registrar usuario"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error registrando usuario:", error);\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para hacer login\n            async function loginUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                try {\n                    const result = await apiRequest("/api/login", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv = document.getElementById("loginMessage");\n                    if (result.success) {\n                        usuarioActual = result.usuario;\n                        actualizarInfoUsuario();\n                        showPage("sistema-autorizado");\n                        cargarMisQuejas();\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al iniciar sesi√≥n"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error en login:", error);\n                    document.getElementById("loginMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n            function actualizarInfoUsuario() {\n                if (usuarioActual) {\n                    const tipoUsuarioLabel = {\n                        docente_activo: "Docente Activo",\n                        docente_pensionado: "Docente Pensionado",\n                        beneficiario: "Beneficiario",\n                    };\n\n                    document.getElementById("usuarioInfo").textContent =\n                        `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n                }\n            }\n\n            // Funci√≥n para cargar las quejas del usuario\n            async function cargarMisQuejas() {\n                if (!usuarioActual) return;\n\n                try {\n                    const result = await apiRequest(\n                        `/api/quejas/${usuarioActual.id}`,\n                    );\n                    const listadoDiv = document.getElementById("listadoQuejas");\n\n                    if (result.quejas && result.quejas.length > 0) {\n                        let html = "";\n                        result.quejas.forEach((queja) => {\n                            const fecha = new Date(\n                                queja.fechaCreacion,\n                            ).toLocaleDateString("es-CO");\n                            html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                        });\n                        listadoDiv.innerHTML = html;\n                    } else {\n                        listadoDiv.innerHTML =\n                            \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                    }\n                } catch (error) {\n                    console.error("Error cargando quejas:", error);\n                    document.getElementById("listadoQuejas").innerHTML =\n                        \'<div class="error">Error al cargar las quejas</div>\';\n                }\n            }\n\n            // Funci√≥n para cerrar sesi√≥n\n            function cerrarSesion() {\n                if (confirm("¬øEst√° seguro que desea cerrar sesi√≥n?")) {\n                    usuarioActual = null;\n                    showPage("inicio");\n                    // Limpiar formularios\n                    document\n                        .querySelectorAll("form")\n                        .forEach((form) => form.reset());\n                    document\n                        .querySelectorAll(".error, .success")\n                        .forEach((msg) => msg.remove());\n                }\n            }\n\n            // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n            async function enviarQuejaAutorizada(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar que se haya aceptado la pol√≠tica de datos\n                const aceptoPolitica = document.querySelector(\n                    \'input[name="aceptoPolitica"]\',\n                ).checked;\n                if (!aceptoPolitica) {\n                    const messageDiv = document.getElementById("quejaMessage");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                    return;\n                }\n\n                data.aceptoPolitica = aceptoPolitica;\n                data.tipoUsuario = document.querySelector(\n                    \'select[name="tipoUsuario"]\',\n                ).value;\n\n                // Manejar municipio personalizado si se seleccion√≥ "Otro"\n                const ciudadSelect = document.querySelector(\n                    \'select[name="ciudad"]\',\n                );\n                const ciudadOtroInput = document.querySelector(\n                    \'input[name="ciudadOtro"]\',\n                );\n\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    data.ciudad = ciudadOtroInput.value.trim();\n                }\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("aceptoPolitica", aceptoPolitica);\n                submitFormData.set("tipoUsuario", data.tipoUsuario);\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Manejar municipio personalizado\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    submitFormData.set("ciudad", ciudadOtroInput.value.trim());\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                        // Actualizar lista de quejas\n                        cargarMisQuejas();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            function cerrarApp() {\n                if (confirm("¬øEst√° seguro que desea salir del sistema?")) {\n                    window.close();\n                }\n            }\n\n            async function apiRequest(url, options = {}) {\n                try {\n                    const response = await fetch(url, {\n                        headers: {\n                            "Content-Type": "application/json",\n                            ...options.headers,\n                        },\n                        ...options,\n                    });\n                    return await response.json();\n                } catch (error) {\n                    console.error("Error en la petici√≥n:", error);\n                    return { error: "Error de conexi√≥n con el servidor" };\n                }\n            }\n         $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n            let archivosAdjuntos = [];\n\n            function showPage(pageId) {\n                // Ocultar todas las p√°ginas\n                const pages = document.querySelectorAll(".page");\n                pages.forEach((page) => {\n                    page.classList.remove("active");\n                });\n\n                // Mostrar la p√°gina seleccionada\n                document.getElementById(pageId).classList.add("active");\n\n                // Cargar contenido espec√≠fico si es necesario\n                if (pageId === "veedores") {\n                    cargarVeedores();\n                }\n            }\n\n            async function cargarVeedores() {\n                try {\n                    const veedores = await apiRequest("/api/veedores");\n                    let veedoresHTML = "";\n\n                    veedores.forEach((veedor) => {\n                        veedoresHTML += `\n                        <div class="veedor-item">\n                            <h5>${veedor.nombre}</h5>\n                            <p><strong>Cargo:</strong> ${veedor.cargo}</p>\n                            <p><strong>Regi√≥n:</strong> ${veedor.departamento}</p>\n                            <p><strong>Tel√©fono:</strong> ${veedor.telefono}</p>\n                            <p><strong>Email:</strong> ${veedor.email}</p>\n                        </div>\n                    `;\n                    });\n\n                    document.getElementById("veedoresContent").innerHTML =\n                        veedoresHTML;\n                } catch (error) {\n                    console.error("Error cargando veedores:", error);\n                    document.getElementById("veedoresContent").innerHTML = `\n                    <div class="error">Error al cargar la lista de veedores. Intente nuevamente.</div>\n                `;\n                }\n            }\n\n            async function mostrarFormularioQueja(tipo) {\n                let tipoTexto;\n                if (tipo === "primaria") {\n                    tipoTexto = "Atenci√≥n Primaria";\n                } else if (tipo === "complementaria") {\n                    tipoTexto = "Atenci√≥n Complementaria";\n                } else if (tipo === "medicamentos") {\n                    tipoTexto = "Medicamentos";\n                }\n\n                try {\n                    // Cargar departamentos y tipos de queja\n                    const departamentos =\n                        await apiRequest("/api/departamentos");\n                    const tiposQueja = await apiRequest(\n                        `/api/tipos-queja/${tipo}`,\n                    );\n\n                    // Generar opciones\n                    const departamentosOptions = departamentos\n                        .map((dep) => `<option value="${dep}">${dep}</option>`)\n                        .join("");\n\n                    const tiposQuejaOptions = tiposQueja\n                        .map(\n                            (tipoQ) =>\n                                `<option value="${tipoQ}">${tipoQ}</option>`,\n                        )\n                        .join("");\n\n                    const nombreCompleto = usuarioActual\n                        ? `${usuarioActual.nombre} ${usuarioActual.apellido}`\n                        : "";\n                    const cedula = usuarioActual ? usuarioActual.cedula : "";\n                    const correo = usuarioActual ? usuarioActual.correo : "";\n                    const celular = usuarioActual ? usuarioActual.celular : "";\n\n                    document.getElementById("quejaContent").innerHTML = `\n                    <h4>Formulario de Queja - ${tipoTexto}</h4>\n                    <form id="quejaForm" onsubmit="enviarQuejaAutorizada(event)">\n                        <input type="hidden" name="clasificacion" value="${tipo}">\n                        \n                        <div class="info-box" style="margin-bottom: 20px;">\n                            <p><strong>Datos del Usuario:</strong></p>\n                            <p>Los siguientes campos est√°n precargados con su informaci√≥n de registro:</p>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="nombre">Nombre Completo *</label>\n                            <input type="text" id="nombre" name="nombre" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="cedula">N√∫mero de C√©dula *</label>\n                            <input type="text" id="cedula" name="cedula" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="correo">Correo Electr√≥nico *</label>\n                            <input type="email" id="correo" name="correo" required>\n                        </div>\n                        <div class="form-group">\n                            <label for="celular">Tel√©fono/Celular</label>\n                            <input type="tel" id="celular" name="celular" required>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="tipoUsuario">Tipo de Usuario *</label>\n                            <select id="tipoUsuario" name="tipoUsuario" required>\n                                <option value="">Seleccione...</option>\n                                <option value="docente_activo">Docente Activo</option>\n                                <option value="docente_pensionado">Docente Pensionado</option>\n                                <option value="beneficiario">Beneficiario</option>\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="problema">Tipo de Problema *</label>\n                            <select id="problema" name="problema" required>\n                                <option value="">Seleccione el tipo de problema</option>\n                                ${tiposQuejaOptions}\n                                <option value="otro">Otro (especificar)</option>\n                            </select>\n                        </div>\n                        <div class="form-group" id="problemaOtroGroup" style="display: none;">\n                            <label for="problemaOtro">Especifique el tipo de problema *</label>\n                            <input type="text" id="problemaOtro" name="problemaOtro" placeholder="Describa el tipo de problema espec√≠fico">\n                        </div>\n                        <div class="form-group">\n                            <label for="detalle">Descripci√≥n Detallada *</label>\n                            <textarea id="detalle" name="detalle" required \n                                      placeholder="Describa detalladamente su queja incluyendo fecha, lugar y personas involucradas"></textarea>\n                        </div>\n                        <div class="form-group">\n                            <label for="departamento">Departamento *</label>\n                            <select id="departamento" name="departamento" required>\n                                <option value="">Seleccione departamento</option>\n                                ${departamentosOptions}\n                            </select>\n                        </div>\n                        <div class="form-group">\n                            <label for="ciudad">Ciudad/Municipio *</label>\n                            <select id="ciudad" name="ciudad" required disabled>\n                                <option value="">Primero seleccione departamento</option>\n                            </select>\n                            <input type="text" id="ciudadOtro" name="ciudadOtro" placeholder="Escriba el nombre del municipio" style="display: none; margin-top: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%;">\n                        </div>\n                        <div class="form-group" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; background: #f9f9f9;">\n                            <h5 style="margin: 0 0 10px 0; color: #333;">Pol√≠tica de Tratamiento de Datos Personales</h5>\n                            <div style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; margin-bottom: 10px; font-size: 12px; line-height: 1.4;">\n                                <p><strong>VEEDUR√çA NACIONAL POR EL DERECHO A LA SALUD DEL MAGISTERIO</strong></p>\n                                <p>En cumplimiento de la Ley 1581 de 2012 y sus decretos reglamentarios, informamos sobre el tratamiento de sus datos personales:</p>\n                                \n                                <p><strong>Finalidad espec√≠fica:</strong> Sus datos personales ser√°n utilizados exclusivamente para los siguientes fines relacionados con las actividades de la Veedur√≠a Nacional por el Derecho a la Salud del Magisterio:</p>\n                                <ul style="margin-left: 20px; text-align: left;">\n                                    <li>Procesar, gestionar y realizar seguimiento integral a su queja de salud</li>\n                                    <li>Invitarle a reuniones, asambleas y encuentros de veedur√≠a</li>\n                                    <li>Convocarle a capacitaciones y talleres sobre derechos en salud</li>\n                                    <li>Invitarle a foros, seminarios y eventos educativos del magisterio</li>\n                                    <li>Mantenerle informado sobre actividades que fortalezcan la veedur√≠a ciudadana</li>\n                                    <li>Comunicarle avances, resultados y acciones derivadas de su queja</li>\n                                </ul>\n                                \n                                <p><strong>Tratamiento:</strong> Los datos ser√°n almacenados de forma segura y procesados √∫nicamente para los fines mencionados, sin compartirse con terceros ajenos a la organizaci√≥n.</p>\n                                <p><strong>Derechos:</strong> Puede conocer, actualizar, rectificar o solicitar la supresi√≥n de sus datos contactando directamente a la Veedur√≠a.</p>\n                                <p><strong>Datos recolectados:</strong> Nombre completo, n√∫mero de c√©dula, correo electr√≥nico, tel√©fono celular, tipo de usuario y detalles espec√≠ficos de su queja de salud.</p>\n                                <p><strong>Autorizaci√≥n:</strong> Al marcar la casilla siguiente, autoriza expresamente el tratamiento de sus datos personales para los fines espec√≠ficos de la veedur√≠a descritos anteriormente.</p>\n                            </div>\n                            <label style="display: flex; align-items: center; cursor: pointer;">\n                                <input type="checkbox" id="aceptoPolitica" name="aceptoPolitica" required style="margin-right: 8px; width: 18px; height: 18px;"> \n                                <span style="font-weight: bold;">\n                                    He le√≠do y acepto la pol√≠tica de tratamiento de datos personales *\n                                </span>\n                            </label>\n                        </div>\n                        \n                        <h5>Archivos Adjuntos (Opcional):</h5>\n                        <div class="file-upload" id="fileUpload">\n                            <p>Toque aqu√≠ para seleccionar archivos</p>\n                            <p style="font-size: 11px; color: #666;">PDF, DOC, DOCX, JPG, PNG (m√°x 5MB)</p>\n                            <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" style="display: none;">\n                        </div>\n                        <div id="fileList" class="file-list"></div>\n                        \n                        <button type="submit" class="btn">Enviar Queja</button>\n                        <button type="button" onclick="mostrarSeleccionTipo()" class="btn btn-secondary">Cancelar</button>\n                        <div id="quejaMessage"></div>\n                    </form>\n                `;\n\n                    // Configurar eventos\n                    configurarEventosFormulario();\n                } catch (error) {\n                    console.error("Error cargando formulario:", error);\n                    document.getElementById("quejaContent").innerHTML = `\n                    <div class="error">Error al cargar el formulario. Intente nuevamente.</div>\n                    <button onclick="mostrarSeleccionTipo()" class="btn">Volver</button>\n                `;\n                }\n            }\n\n            function mostrarSeleccionTipo() {\n                document.getElementById("quejaContent").innerHTML = `\n                <div class="info-box">\n                    <p><strong>Seleccione el tipo de atenci√≥n para su queja:</strong></p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Primaria:</strong> Consultas generales, odontolog√≠a b√°sica, vacunaci√≥n</p>\n                    <p>‚Ä¢ <strong>Atenci√≥n Complementaria:</strong> Especialistas, cirug√≠as, terapias</p>\n                    <p>‚Ä¢ <strong>Medicamentos:</strong> Suministro, calidad, acceso a medicamentos</p>\n                </div>\n                <button onclick="mostrarFormularioQueja(\'primaria\')" class="btn">Atenci√≥n Primaria</button>\n                <button onclick="mostrarFormularioQueja(\'complementaria\')" class="btn">Atenci√≥n Complementaria</button>\n                <button onclick="mostrarFormularioQueja(\'medicamentos\')" class="btn">Medicamentos</button>\n            `;\n            }\n\n            function configurarEventosFormulario() {\n                // Configurar el evento de cambio de tipo de problema\n                document\n                    .getElementById("problema")\n                    .addEventListener("change", function () {\n                        const problemaOtroGroup =\n                            document.getElementById("problemaOtroGroup");\n                        const problemaOtroInput =\n                            document.getElementById("problemaOtro");\n\n                        if (this.value === "otro") {\n                            problemaOtroGroup.style.display = "block";\n                            problemaOtroInput.required = true;\n                            this.required = false;\n                        } else {\n                            problemaOtroGroup.style.display = "none";\n                            problemaOtroInput.required = false;\n                            problemaOtroInput.value = "";\n                            this.required = true;\n                        }\n                    });\n\n                // Configurar el evento de cambio de departamento\n                document\n                    .getElementById("departamento")\n                    .addEventListener("change", async (e) => {\n                        const departamento = e.target.value;\n                        const ciudadSelect = document.getElementById("ciudad");\n\n                        if (departamento) {\n                            try {\n                                const municipios = await apiRequest(\n                                    `/api/municipios/${encodeURIComponent(departamento)}`,\n                                );\n\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Seleccione municipio</option>\';\n                                ciudadSelect.disabled = false;\n\n                                municipios.forEach((municipio) => {\n                                    ciudadSelect.innerHTML += `<option value="${municipio}">${municipio}</option>`;\n                                });\n\n                                // Agregar opci√≥n "Otro"\n                                ciudadSelect.innerHTML += `<option value="otro">Otro (especificar)</option>`;\n\n                                // Configurar evento para mostrar campo de texto cuando se selecciona "Otro"\n                                ciudadSelect.addEventListener(\n                                    "change",\n                                    function () {\n                                        const ciudadOtroInput =\n                                            document.getElementById(\n                                                "ciudadOtro",\n                                            );\n                                        if (this.value === "otro") {\n                                            ciudadOtroInput.style.display =\n                                                "block";\n                                            ciudadOtroInput.required = true;\n                                            this.required = false;\n                                        } else {\n                                            ciudadOtroInput.style.display =\n                                                "none";\n                                            ciudadOtroInput.required = false;\n                                            this.required = true;\n                                            ciudadOtroInput.value = "";\n                                        }\n                                    },\n                                );\n                            } catch (error) {\n                                console.error(\n                                    "Error cargando municipios:",\n                                    error,\n                                );\n                                ciudadSelect.innerHTML =\n                                    \'<option value="">Error cargando municipios</option>\';\n                            }\n                        } else {\n                            ciudadSelect.innerHTML =\n                                \'<option value="">Primero seleccione departamento</option>\';\n                            ciudadSelect.disabled = true;\n                        }\n                    });\n\n                // Configurar manejo de archivos\n                const fileUpload = document.getElementById("fileUpload");\n                const fileInput = document.getElementById("fileInput");\n\n                fileUpload.addEventListener("click", () => fileInput.click());\n                fileUpload.addEventListener("dragover", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.add("dragover");\n                });\n                fileUpload.addEventListener("dragleave", () => {\n                    fileUpload.classList.remove("dragover");\n                });\n                fileUpload.addEventListener("drop", (e) => {\n                    e.preventDefault();\n                    fileUpload.classList.remove("dragover");\n                    handleFiles(e.dataTransfer.files);\n                });\n\n                fileInput.addEventListener("change", (e) => {\n                    handleFiles(e.target.files);\n                });\n\n                // Configurar env√≠o del formulario\n                document\n                    .getElementById("quejaForm")\n                    .addEventListener("submit", async (e) => {\n                        await enviarQuejaAutorizada(e);\n                    });\n            }\n\n            function handleFiles(files) {\n                for (let file of files) {\n                    if (validateFile(file)) {\n                        archivosAdjuntos.push(file);\n                        updateFileList();\n                    }\n                }\n            }\n\n            function validateFile(file) {\n                const allowedTypes = [\n                    "application/pdf",\n                    "application/msword",\n                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",\n                    "image/jpeg",\n                    "image/jpg",\n                    "image/png",\n                ];\n                const maxSize = 5 * 1024 * 1024; // 5MB\n\n                if (!allowedTypes.includes(file.type)) {\n                    alert("Tipo de archivo no permitido: " + file.name);\n                    return false;\n                }\n                if (file.size > maxSize) {\n                    alert(\n                        "El archivo es muy grande (m√°ximo 5MB): " + file.name,\n                    );\n                    return false;\n                }\n                return true;\n            }\n\n            function updateFileList() {\n                const fileList = document.getElementById("fileList");\n                fileList.innerHTML = "";\n\n                archivosAdjuntos.forEach((file, index) => {\n                    const fileItem = document.createElement("div");\n                    fileItem.className = "file-item";\n                    fileItem.innerHTML = `\n                    <span>${file.name} (${(file.size / 1024).toFixed(1)} KB)</span>\n                    <button onclick="removeFile(${index})">Eliminar</button>\n                `;\n                    fileList.appendChild(fileItem);\n                });\n            }\n\n            function removeFile(index) {\n                archivosAdjuntos.splice(index, 1);\n                updateFileList();\n            }\n\n            // Sistema de filtros de contenido inapropiado\n            function validarContenidoQueja(problema, detalle) {\n                const palabrasOfensivas = [\n                    "idiota",\n                    "est√∫pido",\n                    "estupido",\n                    "imb√©cil",\n                    "imbecil",\n                    "tonto",\n                    "in√∫til",\n                    "inutil",\n                    "incompetente",\n                    "basura",\n                    "maldito",\n                    "maldita",\n                    "pendejo",\n                    "pendeja",\n                    "hijo de",\n                    "hijode",\n                    "marica",\n                    "maricas",\n                    "maric√≥n",\n                    "maricon",\n                    "puta",\n                    "puto",\n                    "putita",\n                    "putilla",\n                    "cabron",\n                    "cabr√≥n",\n                    "gonorrea",\n                    "gonorreita",\n                    "carajo",\n                    "culo",\n                    "culero",\n                    "culera",\n                    "mierda",\n                    "jodido",\n                    "jodida",\n                    "inepto",\n                    "inepta",\n                    "ineptos",\n                    "ineptas",\n                    "vieja",\n                    "viejo",\n                    "viejas",\n                    "viejos",\n                    "chismosa",\n                    "chismoso",\n                    "mediquillos",\n                    "mediquillo",\n                    "mediquilla",\n                    "mediquetes",\n                    "perro",\n                    "perra",\n                    "animal",\n                    "bestia",\n                    "bruto",\n                    "bruta",\n                    "burro",\n                    "burra",\n                    "malo",\n                    "mala",\n                    "malos",\n                    "malas",\n                    "porquer√≠a",\n                    "porqueria",\n                    "lacra",\n                    "rastrero",\n                    "asqueroso",\n                    "asquerosa",\n                    "maltratador",\n                    "maltratadora",\n                    "doctorcito",\n                    "doctorcitos",\n                    "medicastro",\n                    "medicastros",\n                    "matasanos",\n                    "matasano",\n                    "charlat√°n",\n                    "charlatana",\n                ];\n\n                const expresionesProblematicas = [\n                    /\\b(vieja|viejo)\\b.*?\\b(m√©dica|m√©dico|enfermera|enfermero|doctor|doctora)\\b/gi,\n                    /\\b(no sabe|no saben)\\b.*?\\b(nada|hacer|trabajar|atender)\\b/gi,\n                    /\\b(t√≠tulo|t√≠tulos)\\b.*?\\b(regalado|regalados|comprado|comprados)\\b/gi,\n                    /\\b(tratan|trataron).*?\\b(como)\\b.*?\\b(perro|perros|animal|animales)\\b/gi,\n                    /\\besa\\s+(vieja|viejo)\\b/gi,\n                ];\n\n                const textoCompleto = `${problema} ${detalle}`.toLowerCase();\n                const erroresEncontrados = [];\n                let sugerencia = `${problema} ${detalle}`;\n\n                // Verificar palabras ofensivas\n                for (const palabra of palabrasOfensivas) {\n                    const regex = new RegExp(\n                        `\\\\b${palabra.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&")}\\\\b`,\n                        "gi",\n                    );\n                    if (regex.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            `Lenguaje inapropiado: "${palabra}"`,\n                        );\n                        sugerencia = sugerencia.replace(\n                            regex,\n                            "[t√©rmino apropiado]",\n                        );\n                    }\n                }\n\n                // Verificar expresiones problem√°ticas\n                for (const expresion of expresionesProblematicas) {\n                    if (expresion.test(textoCompleto)) {\n                        erroresEncontrados.push(\n                            "Expresi√≥n despectiva hacia profesionales de salud",\n                        );\n                        sugerencia = sugerencia.replace(\n                            expresion,\n                            "[expresi√≥n respetuosa]",\n                        );\n                    }\n                }\n\n                // Casos espec√≠ficos de mejora\n                if (\n                    textoCompleto.includes("esa vieja") &&\n                    textoCompleto.includes("m√©dica")\n                ) {\n                    erroresEncontrados.push(\n                        "Expresi√≥n despectiva por edad y g√©nero",\n                    );\n                    sugerencia =\n                        "Me siento insatisfecho con la atenci√≥n recibida por parte de la profesional m√©dica.";\n                }\n\n                if (\n                    textoCompleto.includes("mediquillos") ||\n                    textoCompleto.includes("mediquillo")\n                ) {\n                    erroresEncontrados.push(\n                        "T√©rmino despectivo hacia profesionales m√©dicos",\n                    );\n                    sugerencia =\n                        "No estoy satisfecho con el trato recibido por parte del personal m√©dico.";\n                }\n\n                if (\n                    textoCompleto.includes("como a perro") ||\n                    textoCompleto.includes("como perro")\n                ) {\n                    erroresEncontrados.push(\n                        "Comparaci√≥n despectiva sobre trato recibido",\n                    );\n                    sugerencia =\n                        "Considero que el trato recibido careci√≥ de calidez humana.";\n                }\n\n                return {\n                    esValido: erroresEncontrados.length === 0,\n                    errores: erroresEncontrados,\n                    sugerencia: sugerencia,\n                };\n            }\n\n            async function enviarQueja(e) {\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n                data.paraBeneficiario = document.querySelector(\n                    \'input[name="paraBeneficiario"]\',\n                ).checked;\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    data.problema = problemaOtroInput.value.trim();\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("paraBeneficiario", data.paraBeneficiario);\n\n                // Establecer el problema correcto (personalizado si es "otro")\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            // Variables globales para sesi√≥n de usuario\n            let usuarioActual = null;\n\n            // Funci√≥n para registrar usuario\n            async function registrarUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar confirmaci√≥n de contrase√±a\n                if (data.clave !== data.confirmarClave) {\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Las contrase√±as no coinciden</div>\';\n                    return;\n                }\n\n                // Remover confirmaci√≥n de contrase√±a del env√≠o\n                delete data.confirmarClave;\n\n                try {\n                    const result = await apiRequest("/api/register", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv =\n                        document.getElementById("registroMessage");\n                    if (result.success) {\n                        messageDiv.innerHTML =\n                            \'<div class="success">Usuario registrado exitosamente. Puede ingresar al sistema.</div>\';\n                        setTimeout(() => {\n                            showPage("login");\n                        }, 2000);\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al registrar usuario"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error registrando usuario:", error);\n                    document.getElementById("registroMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para hacer login\n            async function loginUsuario(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                try {\n                    const result = await apiRequest("/api/login", {\n                        method: "POST",\n                        body: JSON.stringify(data),\n                    });\n\n                    const messageDiv = document.getElementById("loginMessage");\n                    if (result.success) {\n                        usuarioActual = result.usuario;\n                        actualizarInfoUsuario();\n                        showPage("sistema-autorizado");\n                        cargarMisQuejas();\n                    } else {\n                        messageDiv.innerHTML = `<div class="error">${result.error || "Error al iniciar sesi√≥n"}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error en login:", error);\n                    document.getElementById("loginMessage").innerHTML =\n                        \'<div class="error">Error de conexi√≥n. Intente nuevamente.</div>\';\n                }\n            }\n\n            // Funci√≥n para actualizar informaci√≥n del usuario en pantalla\n            function actualizarInfoUsuario() {\n                if (usuarioActual) {\n                    const tipoUsuarioLabel = {\n                        docente_activo: "Docente Activo",\n                        docente_pensionado: "Docente Pensionado",\n                        beneficiario: "Beneficiario",\n                    };\n\n                    document.getElementById("usuarioInfo").textContent =\n                        `Bienvenido/a ${usuarioActual.nombre} ${usuarioActual.apellido} - ${tipoUsuarioLabel[usuarioActual.tipoUsuario]}`;\n                }\n            }\n\n            // Funci√≥n para cargar las quejas del usuario\n            async function cargarMisQuejas() {\n                if (!usuarioActual) return;\n\n                try {\n                    const result = await apiRequest(\n                        `/api/quejas/${usuarioActual.id}`,\n                    );\n                    const listadoDiv = document.getElementById("listadoQuejas");\n\n                    if (result.quejas && result.quejas.length > 0) {\n                        let html = "";\n                        result.quejas.forEach((queja) => {\n                            const fecha = new Date(\n                                queja.fechaCreacion,\n                            ).toLocaleDateString("es-CO");\n                            html += `\n                            <div class="veedor-item">\n                                <h5>Queja #${queja.id} - ${queja.problema}</h5>\n                                <p><strong>Detalle:</strong> ${queja.detalle}</p>\n                                <p><strong>Ciudad:</strong> ${queja.ciudad}, ${queja.departamento}</p>\n                                <p><strong>Clasificaci√≥n:</strong> ${queja.clasificacion}</p>\n                                <p><strong>Estado:</strong> ${queja.estado}</p>\n                                <p><strong>Fecha:</strong> ${fecha}</p>\n                            </div>\n                        `;\n                        });\n                        listadoDiv.innerHTML = html;\n                    } else {\n                        listadoDiv.innerHTML =\n                            \'<div class="info-box"><p>No ha registrado quejas a√∫n.</p></div>\';\n                    }\n                } catch (error) {\n                    console.error("Error cargando quejas:", error);\n                    document.getElementById("listadoQuejas").innerHTML =\n                        \'<div class="error">Error al cargar las quejas</div>\';\n                }\n            }\n\n            // Funci√≥n para cerrar sesi√≥n\n            function cerrarSesion() {\n                if (confirm("¬øEst√° seguro que desea cerrar sesi√≥n?")) {\n                    usuarioActual = null;\n                    showPage("inicio");\n                    // Limpiar formularios\n                    document\n                        .querySelectorAll("form")\n                        .forEach((form) => form.reset());\n                    document\n                        .querySelectorAll(".error, .success")\n                        .forEach((msg) => msg.remove());\n                }\n            }\n\n            // Funci√≥n para enviar queja con validaci√≥n de pol√≠tica de datos\n            async function enviarQuejaAutorizada(e) {\n                e.preventDefault();\n                const formData = new FormData(e.target);\n                const data = Object.fromEntries(formData);\n\n                // Validar que se haya aceptado la pol√≠tica de datos\n                const aceptoPolitica = document.querySelector(\n                    \'input[name="aceptoPolitica"]\',\n                ).checked;\n                if (!aceptoPolitica) {\n                    const messageDiv = document.getElementById("quejaMessage");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Pol√≠tica de Datos Requerida</strong><br>\n                        Debe aceptar la pol√≠tica de tratamiento de datos personales para continuar con el env√≠o de su queja.\n                    </div>\n                `;\n                    return;\n                }\n\n                data.aceptoPolitica = aceptoPolitica;\n                data.tipoUsuario = document.querySelector(\n                    \'select[name="tipoUsuario"]\',\n                ).value;\n\n                // Manejar municipio personalizado si se seleccion√≥ "Otro"\n                const ciudadSelect = document.querySelector(\n                    \'select[name="ciudad"]\',\n                );\n                const ciudadOtroInput = document.querySelector(\n                    \'input[name="ciudadOtro"]\',\n                );\n\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    data.ciudad = ciudadOtroInput.value.trim();\n                }\n\n                // Validar contenido antes de enviar\n                const validacion = validarContenidoQueja(\n                    data.problema,\n                    data.detalle,\n                );\n                const messageDiv = document.getElementById("quejaMessage");\n\n                if (!validacion.esValido) {\n                    const errores = validacion.errores.join("<br>‚Ä¢ ");\n                    messageDiv.innerHTML = `\n                    <div class="error">\n                        <strong>Contenido no apropiado detectado:</strong><br>\n                        ‚Ä¢ ${errores}<br><br>\n                        <strong>Sugerencia de mejora:</strong><br>\n                        "${validacion.sugerencia}"<br><br>\n                        <em>Por favor, reformule su mensaje de manera respetuosa y constructiva para una mejor atenci√≥n a su caso.</em>\n                    </div>\n                `;\n                    return;\n                }\n\n                // Crear FormData para env√≠o con archivos\n                const submitFormData = new FormData(e.target);\n                submitFormData.set("aceptoPolitica", aceptoPolitica);\n                submitFormData.set("tipoUsuario", data.tipoUsuario);\n\n                // Manejar tipo de problema personalizado si se seleccion√≥ "Otro"\n                const problemaSelect = document.querySelector(\n                    \'select[name="problema"]\',\n                );\n                const problemaOtroInput = document.querySelector(\n                    \'input[name="problemaOtro"]\',\n                );\n\n                if (\n                    problemaSelect.value === "otro" &&\n                    problemaOtroInput.value.trim()\n                ) {\n                    submitFormData.set(\n                        "problema",\n                        problemaOtroInput.value.trim(),\n                    );\n                }\n\n                // Manejar municipio personalizado\n                if (\n                    ciudadSelect.value === "otro" &&\n                    ciudadOtroInput.value.trim()\n                ) {\n                    submitFormData.set("ciudad", ciudadOtroInput.value.trim());\n                }\n\n                // Agregar archivos adjuntos\n                if (archivosAdjuntos.length > 0) {\n                    archivosAdjuntos.forEach((file) => {\n                        submitFormData.append("soporte", file);\n                    });\n                }\n\n                try {\n                    const result = await fetch("/api/quejas", {\n                        method: "POST",\n                        body: submitFormData,\n                    }).then((res) => res.json());\n\n                    if (result.success) {\n                        const mensaje =\n                            result.mensaje || "Queja registrada exitosamente";\n                        messageDiv.innerHTML = `<div class="success">${mensaje}</div>`;\n                        e.target.reset();\n                        archivosAdjuntos = [];\n                        updateFileList();\n                        // Actualizar lista de quejas\n                        cargarMisQuejas();\n                    } else {\n                        let errorMessage =\n                            result.error || "Error al registrar la queja";\n                        if (result.sugerencia) {\n                            errorMessage += `<br><br><strong>Sugerencia:</strong><br>${result.sugerencia}`;\n                        }\n                        if (result.mensaje) {\n                            errorMessage += `<br><br><em>${result.mensaje}</em>`;\n                        }\n                        messageDiv.innerHTML = `<div class="error">${errorMessage}</div>`;\n                    }\n                } catch (error) {\n                    console.error("Error enviando queja:", error);\n                    messageDiv.innerHTML = `<div class="error">Error de conexi√≥n. Intente nuevamente.</div>`;\n                }\n            }\n\n            function cerrarApp() {\n                if (confirm("¬øEst√° seguro que desea salir del sistema?")) {\n                    window.close();\n                }\n            }\n\n            async function apiRequest(url, options = {}) {\n                try {\n                    const response = await fetch(url, {\n                        headers: {\n                            "Content-Type": "application/json",\n                            ...options.headers,\n                        },\n                        ...options,\n                    });\n                    return await response.json();\n                } catch (error) {\n                    console.error("Error en la petici√≥n:", error);\n                    return { error: "Error de conexi√≥n con el servidor" };\n                }\n            }\n        </script>\n', PosixPath('index.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 6913aeeb3dc35d7c97c0adb2118c3890769e6d4f6ca7fa453b38916833d09cbd50d8b9860637fc3610497afba203884dd3b8c8a435b9a4ca71e2cf0dcdeb8ac8_0
2025-06-15 15:48:30,780 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('servidor.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename') match_id = 1e28cff7b9b8c5d3f37e2db70145c19096d32e3e53bc35ed4ee1092c97c3b6142f14112141e502f50fd0246a6b743e8f75a1cdd41098c1903756f1f2207b8ef6_0
2025-06-15 15:48:30,780 - semgrep.rule_match - DEBUG - match_key = ('filePath function ... (..., filePath,...) {...} filePath fs = require(\'fs\')\n...\n fs = require(\'fs/promises\')\n...\n import fs from \'fs\'\n...\n import fs from \'fs/promises\'\n...\n import * as fs from \'fs\'\n...\n import * as fs from \'fs/promises\'\n...\n fs. ... .$METHOD("...", ...) fs. ... .access(filePath,...) fs. ... .accessSync(filePath, ...) fs. ... .appendFile(filePath,...) fs. ... .appendFileSync(filePath, ...) fs. ... .chmod(filePath,...) fs. ... .chmodSync(filePath, ...) fs. ... .chown(filePath,...) fs. ... .chownSync(filePath, ...) fs. ... .close(filePath,...) fs. ... .closeSync(filePath, ...) fs. ... .copyFile(filePath,...) fs. ... .copyFile($SMTH, filePath,...) fs. ... .copyFileSync(filePath, ...) fs. ... .copyFileSync($SMTH, filePath, ...) fs. ... .cp(filePath, ...) fs. ... .cp($SMTH, filePath, ...) fs. ... .cpSync(filePath, ...) fs. ... .cpSync($SMTH, filePath, ...) fs. ... .createReadStream(filePath,...) fs. ... .createWriteStream(filePath,...) fs. ... .exists(filePath, ...) fs. ... .existsSync(filePath, ...) fs. ... .fchmod(filePath, ...) fs. ... .fchmodSync(filePath, ...) fs. ... .fchown(filePath, ...) fs. ... .fchownSync(filePath, ...) fs. ... .fdatasync(filePath, ...) fs. ... .fdatasyncSync(filePath, ...) fs. ... .fstat(filePath, ...) fs. ... .fstatSync(filePath, ...) fs. ... .fsync(filePath, ...) fs. ... .fsyncSync(filePath, ...) fs. ... .ftruncate(filePath, ...) fs. ... .ftruncateSync(filePath, ...) fs. ... .futimes(filePath, ...) fs. ... .futimesSync(filePath, ...) fs. ... .lchmod(filePath, ...) fs. ... .lchmodSync(filePath, ...) fs. ... .lchown(filePath, ...) fs. ... .lchownSync(filePath, ...) fs. ... .link(filePath, ...) fs. ... .link($SMTH, filePath, ...) fs. ... .linkSync(filePath, ...) fs. ... .linkSync($SMTH, filePath, ...) fs. ... .lstat(filePath, ...) fs. ... .lstatSync(filePath, ...) fs. ... .lutimes(filePath, ...) fs. ... .lutimesSync(filePath, ...) fs. ... .mkdir(filePath, ...) fs. ... .mkdirSync(filePath, ...) fs. ... .mkdtemp(filePath, ...) fs. ... .mkdtempSync(filePath, ...) fs. ... .open(filePath, ...) fs. ... .openSync(filePath, ...) fs. ... .opendir(filePath, ...) fs. ... .opendirSync(filePath, ...) fs. ... .read(filePath, ...) fs. ... .read(filePath, ...) fs. ... .readFile(filePath, ...) fs. ... .readFileSync(filePath, ...) fs. ... .readSync(filePath, ...) fs. ... .readSync(filePath, ...) fs. ... .readdir(filePath, ...) fs. ... .readdirSync(filePath, ...) fs. ... .readlink(filePath, ...) fs. ... .readlinkSync(filePath, ...) fs. ... .readv(filePath, ...) fs. ... .readvSync(filePath, ...) fs. ... .realpath(filePath, ...) fs. ... .realpath.native(filePath, ...) fs. ... .realpathSync.native(filePath, ...) fs. ... .realpathync(filePath, ...) fs. ... .rename(filePath, ...) fs. ... .rename($SMTH, filePath, ...) fs. ... .renameSync(filePath, ...) fs. ... .renameSync($SMTH, filePath, ...) fs. ... .rm(filePath, ...) fs. ... .rmSync(filePath, ...) fs. ... .rmdir(filePath, ...) fs. ... .rmdirSync(filePath, ...) fs. ... .stat(filePath, ...) fs. ... .statSync(filePath, ...) fs. ... .symlink(filePath, ...) fs. ... .symlink($SMTH, filePath, ...) fs. ... .symlinkSync(filePath, ...) fs. ... .symlinkSync($SMTH, filePath, ...) fs. ... .truncate(filePath, ...) fs. ... .truncateSync(filePath, ...) fs. ... .unlink(filePath, ...) fs. ... .unlinkSync(filePath, ...) fs. ... .unwatchFile(filePath, ...) fs. ... .utimes(filePath, ...) fs. ... .utimesSync(filePath, ...) fs. ... .watch(filePath, ...) fs. ... .watchFile(filePath, ...) fs. ... .write(filePath, ...) fs. ... .writeFile(filePath, ...) fs. ... .writeFileSync(filePath, ...) fs. ... .writeSync(filePath, ...) fs. ... .writev(filePath, ...) fs. ... .writevSync(filePath, ...) filePath $METHOD("...", ...) access(filePath,...) accessSync(filePath, ...) appendFile(filePath,...) appendFileSync(filePath, ...) chmod(filePath,...) chmodSync(filePath, ...) chown(filePath,...) chownSync(filePath, ...) close(filePath,...) closeSync(filePath, ...) copyFile(filePath,...) copyFile($SMTH, filePath,...) copyFileSync(filePath, ...) copyFileSync($SMTH, filePath, ...) cp(filePath, ...) cp($SMTH, filePath, ...) cpSync(filePath, ...) cpSync($SMTH, filePath, ...) createReadStream(filePath,...) createWriteStream(filePath,...) exists(filePath, ...) existsSync(filePath, ...) fchmod(filePath, ...) fchmodSync(filePath, ...) fchown(filePath, ...) fchownSync(filePath, ...) fdatasync(filePath, ...) fdatasyncSync(filePath, ...) fstat(filePath, ...) fstatSync(filePath, ...) fsync(filePath, ...) fsyncSync(filePath, ...) ftruncate(filePath, ...) ftruncateSync(filePath, ...) futimes(filePath, ...) futimesSync(filePath, ...) lchmod(filePath, ...) lchmodSync(filePath, ...) lchown(filePath, ...) lchownSync(filePath, ...) link(filePath, ...) link($SMTH, filePath, ...) linkSync(filePath, ...) linkSync($SMTH, filePath, ...) lstat(filePath, ...) lstatSync(filePath, ...) lutimes(filePath, ...) lutimesSync(filePath, ...) mkdir(filePath, ...) mkdirSync(filePath, ...) mkdtemp(filePath, ...) mkdtempSync(filePath, ...) open(filePath, ...) openSync(filePath, ...) opendir(filePath, ...) opendirSync(filePath, ...) read(filePath, ...) read(filePath, ...) readFile(filePath, ...) readFileSync(filePath, ...) readSync(filePath, ...) readSync(filePath, ...) readdir(filePath, ...) readdirSync(filePath, ...) readlink(filePath, ...) readlinkSync(filePath, ...) readv(filePath, ...) readvSync(filePath, ...) realpath(filePath, ...) realpath.native(filePath, ...) realpathSync.native(filePath, ...) realpathync(filePath, ...) rename(filePath, ...) rename($SMTH, filePath, ...) renameSync(filePath, ...) renameSync($SMTH, filePath, ...) rm(filePath, ...) rmSync(filePath, ...) rmdir(filePath, ...) rmdirSync(filePath, ...) stat(filePath, ...) statSync(filePath, ...) symlink(filePath, ...) symlink($SMTH, filePath, ...) symlinkSync(filePath, ...) symlinkSync($SMTH, filePath, ...) truncate(filePath, ...) truncateSync(filePath, ...) unlink(filePath, ...) unlinkSync(filePath, ...) unwatchFile(filePath, ...) utimes(filePath, ...) utimesSync(filePath, ...) watch(filePath, ...) watchFile(filePath, ...) write(filePath, ...) writeFile(filePath, ...) writeFileSync(filePath, ...) writeSync(filePath, ...) writev(filePath, ...) writevSync(filePath, ...) import \'fs\'\n...\n import \'fs/promises\'\n...\n', PosixPath('servidor.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename') match_id = 9ccf80f8e41b33fa3a9c3f26b88929c8b68bed4e178b4529319eb2e6d6a1e3da155734557c5fdb280455e4685eda986fa4f58156661c2d82e9ac481667bdf7b4_0
2025-06-15 15:48:30,781 - semgrep.rule_match - DEBUG - match_key = ('filePath function ... (..., filePath,...) {...} filePath fs = require(\'fs\')\n...\n fs = require(\'fs/promises\')\n...\n import fs from \'fs\'\n...\n import fs from \'fs/promises\'\n...\n import * as fs from \'fs\'\n...\n import * as fs from \'fs/promises\'\n...\n fs. ... .$METHOD("...", ...) fs. ... .access(filePath,...) fs. ... .accessSync(filePath, ...) fs. ... .appendFile(filePath,...) fs. ... .appendFileSync(filePath, ...) fs. ... .chmod(filePath,...) fs. ... .chmodSync(filePath, ...) fs. ... .chown(filePath,...) fs. ... .chownSync(filePath, ...) fs. ... .close(filePath,...) fs. ... .closeSync(filePath, ...) fs. ... .copyFile(filePath,...) fs. ... .copyFile($SMTH, filePath,...) fs. ... .copyFileSync(filePath, ...) fs. ... .copyFileSync($SMTH, filePath, ...) fs. ... .cp(filePath, ...) fs. ... .cp($SMTH, filePath, ...) fs. ... .cpSync(filePath, ...) fs. ... .cpSync($SMTH, filePath, ...) fs. ... .createReadStream(filePath,...) fs. ... .createWriteStream(filePath,...) fs. ... .exists(filePath, ...) fs. ... .existsSync(filePath, ...) fs. ... .fchmod(filePath, ...) fs. ... .fchmodSync(filePath, ...) fs. ... .fchown(filePath, ...) fs. ... .fchownSync(filePath, ...) fs. ... .fdatasync(filePath, ...) fs. ... .fdatasyncSync(filePath, ...) fs. ... .fstat(filePath, ...) fs. ... .fstatSync(filePath, ...) fs. ... .fsync(filePath, ...) fs. ... .fsyncSync(filePath, ...) fs. ... .ftruncate(filePath, ...) fs. ... .ftruncateSync(filePath, ...) fs. ... .futimes(filePath, ...) fs. ... .futimesSync(filePath, ...) fs. ... .lchmod(filePath, ...) fs. ... .lchmodSync(filePath, ...) fs. ... .lchown(filePath, ...) fs. ... .lchownSync(filePath, ...) fs. ... .link(filePath, ...) fs. ... .link($SMTH, filePath, ...) fs. ... .linkSync(filePath, ...) fs. ... .linkSync($SMTH, filePath, ...) fs. ... .lstat(filePath, ...) fs. ... .lstatSync(filePath, ...) fs. ... .lutimes(filePath, ...) fs. ... .lutimesSync(filePath, ...) fs. ... .mkdir(filePath, ...) fs. ... .mkdirSync(filePath, ...) fs. ... .mkdtemp(filePath, ...) fs. ... .mkdtempSync(filePath, ...) fs. ... .open(filePath, ...) fs. ... .openSync(filePath, ...) fs. ... .opendir(filePath, ...) fs. ... .opendirSync(filePath, ...) fs. ... .read(filePath, ...) fs. ... .read(filePath, ...) fs. ... .readFile(filePath, ...) fs. ... .readFileSync(filePath, ...) fs. ... .readSync(filePath, ...) fs. ... .readSync(filePath, ...) fs. ... .readdir(filePath, ...) fs. ... .readdirSync(filePath, ...) fs. ... .readlink(filePath, ...) fs. ... .readlinkSync(filePath, ...) fs. ... .readv(filePath, ...) fs. ... .readvSync(filePath, ...) fs. ... .realpath(filePath, ...) fs. ... .realpath.native(filePath, ...) fs. ... .realpathSync.native(filePath, ...) fs. ... .realpathync(filePath, ...) fs. ... .rename(filePath, ...) fs. ... .rename($SMTH, filePath, ...) fs. ... .renameSync(filePath, ...) fs. ... .renameSync($SMTH, filePath, ...) fs. ... .rm(filePath, ...) fs. ... .rmSync(filePath, ...) fs. ... .rmdir(filePath, ...) fs. ... .rmdirSync(filePath, ...) fs. ... .stat(filePath, ...) fs. ... .statSync(filePath, ...) fs. ... .symlink(filePath, ...) fs. ... .symlink($SMTH, filePath, ...) fs. ... .symlinkSync(filePath, ...) fs. ... .symlinkSync($SMTH, filePath, ...) fs. ... .truncate(filePath, ...) fs. ... .truncateSync(filePath, ...) fs. ... .unlink(filePath, ...) fs. ... .unlinkSync(filePath, ...) fs. ... .unwatchFile(filePath, ...) fs. ... .utimes(filePath, ...) fs. ... .utimesSync(filePath, ...) fs. ... .watch(filePath, ...) fs. ... .watchFile(filePath, ...) fs. ... .write(filePath, ...) fs. ... .writeFile(filePath, ...) fs. ... .writeFileSync(filePath, ...) fs. ... .writeSync(filePath, ...) fs. ... .writev(filePath, ...) fs. ... .writevSync(filePath, ...) filePath $METHOD("...", ...) access(filePath,...) accessSync(filePath, ...) appendFile(filePath,...) appendFileSync(filePath, ...) chmod(filePath,...) chmodSync(filePath, ...) chown(filePath,...) chownSync(filePath, ...) close(filePath,...) closeSync(filePath, ...) copyFile(filePath,...) copyFile($SMTH, filePath,...) copyFileSync(filePath, ...) copyFileSync($SMTH, filePath, ...) cp(filePath, ...) cp($SMTH, filePath, ...) cpSync(filePath, ...) cpSync($SMTH, filePath, ...) createReadStream(filePath,...) createWriteStream(filePath,...) exists(filePath, ...) existsSync(filePath, ...) fchmod(filePath, ...) fchmodSync(filePath, ...) fchown(filePath, ...) fchownSync(filePath, ...) fdatasync(filePath, ...) fdatasyncSync(filePath, ...) fstat(filePath, ...) fstatSync(filePath, ...) fsync(filePath, ...) fsyncSync(filePath, ...) ftruncate(filePath, ...) ftruncateSync(filePath, ...) futimes(filePath, ...) futimesSync(filePath, ...) lchmod(filePath, ...) lchmodSync(filePath, ...) lchown(filePath, ...) lchownSync(filePath, ...) link(filePath, ...) link($SMTH, filePath, ...) linkSync(filePath, ...) linkSync($SMTH, filePath, ...) lstat(filePath, ...) lstatSync(filePath, ...) lutimes(filePath, ...) lutimesSync(filePath, ...) mkdir(filePath, ...) mkdirSync(filePath, ...) mkdtemp(filePath, ...) mkdtempSync(filePath, ...) open(filePath, ...) openSync(filePath, ...) opendir(filePath, ...) opendirSync(filePath, ...) read(filePath, ...) read(filePath, ...) readFile(filePath, ...) readFileSync(filePath, ...) readSync(filePath, ...) readSync(filePath, ...) readdir(filePath, ...) readdirSync(filePath, ...) readlink(filePath, ...) readlinkSync(filePath, ...) readv(filePath, ...) readvSync(filePath, ...) realpath(filePath, ...) realpath.native(filePath, ...) realpathSync.native(filePath, ...) realpathync(filePath, ...) rename(filePath, ...) rename($SMTH, filePath, ...) renameSync(filePath, ...) renameSync($SMTH, filePath, ...) rm(filePath, ...) rmSync(filePath, ...) rmdir(filePath, ...) rmdirSync(filePath, ...) stat(filePath, ...) statSync(filePath, ...) symlink(filePath, ...) symlink($SMTH, filePath, ...) symlinkSync(filePath, ...) symlinkSync($SMTH, filePath, ...) truncate(filePath, ...) truncateSync(filePath, ...) unlink(filePath, ...) unlinkSync(filePath, ...) unwatchFile(filePath, ...) utimes(filePath, ...) utimesSync(filePath, ...) watch(filePath, ...) watchFile(filePath, ...) write(filePath, ...) writeFile(filePath, ...) writeFileSync(filePath, ...) writeSync(filePath, ...) writev(filePath, ...) writevSync(filePath, ...) import \'fs\'\n...\n import \'fs/promises\'\n...\n', PosixPath('servidor.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename') match_id = 9ccf80f8e41b33fa3a9c3f26b88929c8b68bed4e178b4529319eb2e6d6a1e3da155734557c5fdb280455e4685eda986fa4f58156661c2d82e9ac481667bdf7b4_0
2025-06-15 15:48:30,782 - semgrep.rule_match - DEBUG - match_key = ('filePath function ... (..., filePath,...) {...} filePath fs = require(\'fs\')\n...\n fs = require(\'fs/promises\')\n...\n import fs from \'fs\'\n...\n import fs from \'fs/promises\'\n...\n import * as fs from \'fs\'\n...\n import * as fs from \'fs/promises\'\n...\n fs. ... .$METHOD("...", ...) fs. ... .access(filePath,...) fs. ... .accessSync(filePath, ...) fs. ... .appendFile(filePath,...) fs. ... .appendFileSync(filePath, ...) fs. ... .chmod(filePath,...) fs. ... .chmodSync(filePath, ...) fs. ... .chown(filePath,...) fs. ... .chownSync(filePath, ...) fs. ... .close(filePath,...) fs. ... .closeSync(filePath, ...) fs. ... .copyFile(filePath,...) fs. ... .copyFile($SMTH, filePath,...) fs. ... .copyFileSync(filePath, ...) fs. ... .copyFileSync($SMTH, filePath, ...) fs. ... .cp(filePath, ...) fs. ... .cp($SMTH, filePath, ...) fs. ... .cpSync(filePath, ...) fs. ... .cpSync($SMTH, filePath, ...) fs. ... .createReadStream(filePath,...) fs. ... .createWriteStream(filePath,...) fs. ... .exists(filePath, ...) fs. ... .existsSync(filePath, ...) fs. ... .fchmod(filePath, ...) fs. ... .fchmodSync(filePath, ...) fs. ... .fchown(filePath, ...) fs. ... .fchownSync(filePath, ...) fs. ... .fdatasync(filePath, ...) fs. ... .fdatasyncSync(filePath, ...) fs. ... .fstat(filePath, ...) fs. ... .fstatSync(filePath, ...) fs. ... .fsync(filePath, ...) fs. ... .fsyncSync(filePath, ...) fs. ... .ftruncate(filePath, ...) fs. ... .ftruncateSync(filePath, ...) fs. ... .futimes(filePath, ...) fs. ... .futimesSync(filePath, ...) fs. ... .lchmod(filePath, ...) fs. ... .lchmodSync(filePath, ...) fs. ... .lchown(filePath, ...) fs. ... .lchownSync(filePath, ...) fs. ... .link(filePath, ...) fs. ... .link($SMTH, filePath, ...) fs. ... .linkSync(filePath, ...) fs. ... .linkSync($SMTH, filePath, ...) fs. ... .lstat(filePath, ...) fs. ... .lstatSync(filePath, ...) fs. ... .lutimes(filePath, ...) fs. ... .lutimesSync(filePath, ...) fs. ... .mkdir(filePath, ...) fs. ... .mkdirSync(filePath, ...) fs. ... .mkdtemp(filePath, ...) fs. ... .mkdtempSync(filePath, ...) fs. ... .open(filePath, ...) fs. ... .openSync(filePath, ...) fs. ... .opendir(filePath, ...) fs. ... .opendirSync(filePath, ...) fs. ... .read(filePath, ...) fs. ... .read(filePath, ...) fs. ... .readFile(filePath, ...) fs. ... .readFileSync(filePath, ...) fs. ... .readSync(filePath, ...) fs. ... .readSync(filePath, ...) fs. ... .readdir(filePath, ...) fs. ... .readdirSync(filePath, ...) fs. ... .readlink(filePath, ...) fs. ... .readlinkSync(filePath, ...) fs. ... .readv(filePath, ...) fs. ... .readvSync(filePath, ...) fs. ... .realpath(filePath, ...) fs. ... .realpath.native(filePath, ...) fs. ... .realpathSync.native(filePath, ...) fs. ... .realpathync(filePath, ...) fs. ... .rename(filePath, ...) fs. ... .rename($SMTH, filePath, ...) fs. ... .renameSync(filePath, ...) fs. ... .renameSync($SMTH, filePath, ...) fs. ... .rm(filePath, ...) fs. ... .rmSync(filePath, ...) fs. ... .rmdir(filePath, ...) fs. ... .rmdirSync(filePath, ...) fs. ... .stat(filePath, ...) fs. ... .statSync(filePath, ...) fs. ... .symlink(filePath, ...) fs. ... .symlink($SMTH, filePath, ...) fs. ... .symlinkSync(filePath, ...) fs. ... .symlinkSync($SMTH, filePath, ...) fs. ... .truncate(filePath, ...) fs. ... .truncateSync(filePath, ...) fs. ... .unlink(filePath, ...) fs. ... .unlinkSync(filePath, ...) fs. ... .unwatchFile(filePath, ...) fs. ... .utimes(filePath, ...) fs. ... .utimesSync(filePath, ...) fs. ... .watch(filePath, ...) fs. ... .watchFile(filePath, ...) fs. ... .write(filePath, ...) fs. ... .writeFile(filePath, ...) fs. ... .writeFileSync(filePath, ...) fs. ... .writeSync(filePath, ...) fs. ... .writev(filePath, ...) fs. ... .writevSync(filePath, ...) filePath $METHOD("...", ...) access(filePath,...) accessSync(filePath, ...) appendFile(filePath,...) appendFileSync(filePath, ...) chmod(filePath,...) chmodSync(filePath, ...) chown(filePath,...) chownSync(filePath, ...) close(filePath,...) closeSync(filePath, ...) copyFile(filePath,...) copyFile($SMTH, filePath,...) copyFileSync(filePath, ...) copyFileSync($SMTH, filePath, ...) cp(filePath, ...) cp($SMTH, filePath, ...) cpSync(filePath, ...) cpSync($SMTH, filePath, ...) createReadStream(filePath,...) createWriteStream(filePath,...) exists(filePath, ...) existsSync(filePath, ...) fchmod(filePath, ...) fchmodSync(filePath, ...) fchown(filePath, ...) fchownSync(filePath, ...) fdatasync(filePath, ...) fdatasyncSync(filePath, ...) fstat(filePath, ...) fstatSync(filePath, ...) fsync(filePath, ...) fsyncSync(filePath, ...) ftruncate(filePath, ...) ftruncateSync(filePath, ...) futimes(filePath, ...) futimesSync(filePath, ...) lchmod(filePath, ...) lchmodSync(filePath, ...) lchown(filePath, ...) lchownSync(filePath, ...) link(filePath, ...) link($SMTH, filePath, ...) linkSync(filePath, ...) linkSync($SMTH, filePath, ...) lstat(filePath, ...) lstatSync(filePath, ...) lutimes(filePath, ...) lutimesSync(filePath, ...) mkdir(filePath, ...) mkdirSync(filePath, ...) mkdtemp(filePath, ...) mkdtempSync(filePath, ...) open(filePath, ...) openSync(filePath, ...) opendir(filePath, ...) opendirSync(filePath, ...) read(filePath, ...) read(filePath, ...) readFile(filePath, ...) readFileSync(filePath, ...) readSync(filePath, ...) readSync(filePath, ...) readdir(filePath, ...) readdirSync(filePath, ...) readlink(filePath, ...) readlinkSync(filePath, ...) readv(filePath, ...) readvSync(filePath, ...) realpath(filePath, ...) realpath.native(filePath, ...) realpathSync.native(filePath, ...) realpathync(filePath, ...) rename(filePath, ...) rename($SMTH, filePath, ...) renameSync(filePath, ...) renameSync($SMTH, filePath, ...) rm(filePath, ...) rmSync(filePath, ...) rmdir(filePath, ...) rmdirSync(filePath, ...) stat(filePath, ...) statSync(filePath, ...) symlink(filePath, ...) symlink($SMTH, filePath, ...) symlinkSync(filePath, ...) symlinkSync($SMTH, filePath, ...) truncate(filePath, ...) truncateSync(filePath, ...) unlink(filePath, ...) unlinkSync(filePath, ...) unwatchFile(filePath, ...) utimes(filePath, ...) utimesSync(filePath, ...) watch(filePath, ...) watchFile(filePath, ...) write(filePath, ...) writeFile(filePath, ...) writeFileSync(filePath, ...) writeSync(filePath, ...) writev(filePath, ...) writevSync(filePath, ...) import \'fs\'\n...\n import \'fs/promises\'\n...\n', PosixPath('servidor.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename') match_id = 9ccf80f8e41b33fa3a9c3f26b88929c8b68bed4e178b4529319eb2e6d6a1e3da155734557c5fdb280455e4685eda986fa4f58156661c2d82e9ac481667bdf7b4_0
2025-06-15 15:48:30,783 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('servidor.js'), 'config..semgrep.vendored-rules.problem-based-packs.insecure-transport.js-node.using-http-server') match_id = 7bbef83984e7ec0c97cc42e352bf259dbb4d2e2fa0ef8ae1a97c5627255881a7344f0518d9b5f3474645cece056a7fdf378b3415893cfe32be4019ab758e11bb_0
2025-06-15 15:48:30,784 - semgrep.rule_match - DEBUG - match_key = ("http http = require('http');\n...\n http.createServer(...);\n new http.createServer2(...);\n", PosixPath('servidor.js'), 'config..semgrep.vendored-rules.problem-based-packs.insecure-transport.js-node.using-http-server') match_id = fe47c7eb88473da2b816db7cbd376ff557c54d3ba8ce273395e6031c5d7cc292e785c8fddef12d8aba4af5929a9f9e5bc4d1372ea16eabe73a8988c7b1aed73b_0
2025-06-15 15:48:30,784 - semgrep.rule_match - DEBUG - match_key = ("http http = require('http');\n...\n http.createServer(...);\n new http.createServer2(...);\n", PosixPath('servidor.js'), 'config..semgrep.vendored-rules.problem-based-packs.insecure-transport.js-node.using-http-server') match_id = fe47c7eb88473da2b816db7cbd376ff557c54d3ba8ce273395e6031c5d7cc292e785c8fddef12d8aba4af5929a9f9e5bc4d1372ea16eabe73a8988c7b1aed73b_0
2025-06-15 15:48:30,785 - semgrep.rule_match - DEBUG - match_key = ("http http = require('http');\n...\n http.createServer(...);\n new http.createServer2(...);\n", PosixPath('servidor.js'), 'config..semgrep.vendored-rules.problem-based-packs.insecure-transport.js-node.using-http-server') match_id = fe47c7eb88473da2b816db7cbd376ff557c54d3ba8ce273395e6031c5d7cc292e785c8fddef12d8aba4af5929a9f9e5bc4d1372ea16eabe73a8988c7b1aed73b_0
2025-06-15 15:48:30,786 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:11.535819 on 18 files
2025-06-15 15:48:30,788 - semgrep.core_runner - DEBUG - findings summary: 9 warning, 0 error, 2 info
2025-06-15 15:48:30,789 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-06-15 15:48:30,789 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-06-15 15:48:30,790 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIQwTeGR/semgrep/bin/semgrep-core-proprietary'.
2025-06-15 15:48:30,929 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   ‚Ä¢ <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   ‚Ä¢ <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   ‚Ä¢ <none>

  Skipped by --include patterns:

   ‚Ä¢ <none>

  Skipped by --exclude patterns:

   ‚Ä¢ <none>

  Files skipped due to insufficient read permissions:

   ‚Ä¢ <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   ‚Ä¢ uploads/CamScanner 05-11-2021 11.40 (1).pdf

  Partially analyzed due to parsing or internal Opengrep errors

   ‚Ä¢ index.html (1 lines skipped)

2025-06-15 15:48:30,930 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.
  Partially scanned: 1 files only partially analyzed due to parsing or internal Opengrep errors
  Scan skipped: 1 files larger than 1.0 MB
  For a full list of skipped files, run opengrep with the --verbose flag.

Ran 426 rules on 18 files: 11 findings.
2025-06-15 15:48:30,930 - semgrep.app.version - DEBUG - Version cache does not exist
2025-06-15 15:48:30,944 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
